/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse MYSQLparse
#define yylex   MYSQLlex
#define yyerror MYSQLerror
#define yylval  MYSQLlval
#define yychar  MYSQLchar
#define yydebug MYSQLdebug
#define yynerrs MYSQLnerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYSE_SYM = 269,
     ANALYZE_SYM = 270,
     AND_AND_SYM = 271,
     AND_SYM = 272,
     ANY_SYM = 273,
     AS = 274,
     ASC = 275,
     ASCII_SYM = 276,
     ASENSITIVE_SYM = 277,
     AT_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CI_ON_SUCCESS_SYM = 318,
     CLASS_ORIGIN_SYM = 319,
     CLIENT_SYM = 320,
     CLOSE_SYM = 321,
     CLUSTERING_SYM = 322,
     COALESCE = 323,
     CODE_SYM = 324,
     COLLATE_SYM = 325,
     COLLATION_SYM = 326,
     COLUMNS = 327,
     COLUMN_SYM = 328,
     COLUMN_FORMAT_SYM = 329,
     COLUMN_NAME_SYM = 330,
     COMFORT_SYM = 331,
     COMMENT_SYM = 332,
     COMMITTED_SYM = 333,
     COMMIT_SYM = 334,
     COMPACT_SYM = 335,
     COMPLETION_SYM = 336,
     COMPRESSED_SYM = 337,
     CONCURRENT = 338,
     CONDITION_SYM = 339,
     CONNECTION_SYM = 340,
     CONSISTENT_SYM = 341,
     CONSTRAINT = 342,
     CONSTRAINT_CATALOG_SYM = 343,
     CONSTRAINT_NAME_SYM = 344,
     CONSTRAINT_SCHEMA_SYM = 345,
     CONTAINS_SYM = 346,
     CONTEXT_SYM = 347,
     CONTINUE_SYM = 348,
     CONVERT_SYM = 349,
     COUNT_SYM = 350,
     CPU_SYM = 351,
     CREATE = 352,
     CROSS = 353,
     CUBE_SYM = 354,
     CURDATE = 355,
     CURRENT_SYM = 356,
     CURRENT_USER = 357,
     CURRVAL_SYM = 358,
     CURSOR_SYM = 359,
     CURSOR_NAME_SYM = 360,
     CURTIME = 361,
     CYCLE_SYM = 362,
     DATABASE = 363,
     DATABASES = 364,
     DATAFILE_SYM = 365,
     DATA_SYM = 366,
     DATETIME = 367,
     DATE_ADD_INTERVAL = 368,
     DATE_SUB_INTERVAL = 369,
     DATE_SYM = 370,
     DAY_HOUR_SYM = 371,
     DAY_MICROSECOND_SYM = 372,
     DAY_MINUTE_SYM = 373,
     DAY_SECOND_SYM = 374,
     DAY_SYM = 375,
     DEALLOCATE_SYM = 376,
     DECIMAL_NUM = 377,
     DECIMAL_SYM = 378,
     DECLARE_SYM = 379,
     DEFAULT = 380,
     DEFAULT_AUTH_SYM = 381,
     DEFINER_SYM = 382,
     DELAYED_SYM = 383,
     DELAY_KEY_WRITE_SYM = 384,
     DELETE_SYM = 385,
     DESC = 386,
     DESCRIBE = 387,
     DES_KEY_FILE = 388,
     DETERMINISTIC_SYM = 389,
     DIAGNOSTICS_SYM = 390,
     DIRECTORY_SYM = 391,
     DISABLE_SYM = 392,
     DISCARD = 393,
     DISK_SYM = 394,
     DISTINCT = 395,
     DIV_SYM = 396,
     DOUBLE_SYM = 397,
     DO_SYM = 398,
     DROP = 399,
     DUAL_SYM = 400,
     DUMPFILE = 401,
     DUPLICATE_SYM = 402,
     DYNAMIC_SYM = 403,
     EACH_SYM = 404,
     ELSE = 405,
     ELSEIF_SYM = 406,
     ENABLE_SYM = 407,
     ENCLOSED = 408,
     END = 409,
     ENDS_SYM = 410,
     END_OF_INPUT = 411,
     ENGINES_SYM = 412,
     ENGINE_SYM = 413,
     ENUM = 414,
     EQ = 415,
     EQUAL_SYM = 416,
     ERROR_SYM = 417,
     ERRORS = 418,
     ESCAPED = 419,
     ESCAPE_SYM = 420,
     EVENTS_SYM = 421,
     EVENT_SYM = 422,
     EVERY_SYM = 423,
     EXCHANGE_SYM = 424,
     EXECUTE_SYM = 425,
     EXECUTED_GTID_SET = 426,
     EXISTS = 427,
     EXIT_SYM = 428,
     EXPANSION_SYM = 429,
     EXPIRE_SYM = 430,
     EXPORT_SYM = 431,
     EXTENDED_SYM = 432,
     EXTENT_SIZE_SYM = 433,
     EXTRACT_SYM = 434,
     FALSE_SYM = 435,
     FAST_SYM = 436,
     FAULTS_SYM = 437,
     FETCH_SYM = 438,
     FILE_SYM = 439,
     FIRST_SYM = 440,
     FIXED_SYM = 441,
     FLOAT_NUM = 442,
     FLOAT_SYM = 443,
     FLUSH_SYM = 444,
     FORCE_SYM = 445,
     FOREIGN = 446,
     FOR_SYM = 447,
     FORMAT_SYM = 448,
     FOUND_SYM = 449,
     FROM = 450,
     FULL = 451,
     FULLTEXT_SYM = 452,
     FUNCTION_SYM = 453,
     GE = 454,
     GENERAL = 455,
     GEOMETRYCOLLECTION = 456,
     GEOMETRY_SYM = 457,
     GET_FORMAT = 458,
     GET_SYM = 459,
     GLOBAL_SYM = 460,
     GRANT = 461,
     GRANTS = 462,
     GROUP_SYM = 463,
     GROUP_CONCAT_SYM = 464,
     GT_SYM = 465,
     HANDLER_SYM = 466,
     HASH_SYM = 467,
     HAVING = 468,
     HELP_SYM = 469,
     HEX_NUM = 470,
     HIGH_PRIORITY = 471,
     HOST_SYM = 472,
     HOSTS_SYM = 473,
     HOUR_MICROSECOND_SYM = 474,
     HOUR_MINUTE_SYM = 475,
     HOUR_SECOND_SYM = 476,
     HOUR_SYM = 477,
     IDENT = 478,
     IDENTIFIED_SYM = 479,
     IDENT_QUOTED = 480,
     IF = 481,
     IGNORE_SYM = 482,
     IGNORE_SERVER_IDS_SYM = 483,
     IMPORT = 484,
     INCREMENT_SYM = 485,
     INDEXES = 486,
     INDEX_SYM = 487,
     INFILE = 488,
     INITIAL_SIZE_SYM = 489,
     INNER_SYM = 490,
     INOUT_SYM = 491,
     INSENSITIVE_SYM = 492,
     INSERT = 493,
     INSERT_METHOD = 494,
     INSTALL_SYM = 495,
     INTERVAL_SYM = 496,
     INTO = 497,
     INT_SYM = 498,
     INVOKER_SYM = 499,
     IN_SYM = 500,
     IO_AFTER_GTIDS = 501,
     IO_BEFORE_GTIDS = 502,
     IO_SYM = 503,
     IPC_SYM = 504,
     IS = 505,
     ISOLATION = 506,
     ISSUER_SYM = 507,
     ITERATE_SYM = 508,
     JOIN_SYM = 509,
     KEYS = 510,
     KEY_BLOCK_SIZE = 511,
     KEY_SYM = 512,
     KILL_SYM = 513,
     LANGUAGE_SYM = 514,
     LAST_SYM = 515,
     LE = 516,
     LEADING = 517,
     LEAVES = 518,
     LEAVE_SYM = 519,
     LEFT = 520,
     LESS_SYM = 521,
     LEVEL_SYM = 522,
     LEX_HOSTNAME = 523,
     LIKE = 524,
     LIMIT = 525,
     LINEAR_SYM = 526,
     LINES = 527,
     LINESTRING = 528,
     LIST_SYM = 529,
     LOAD = 530,
     LOCAL_SYM = 531,
     LOCATOR_SYM = 532,
     LOCKS_SYM = 533,
     LOCK_SYM = 534,
     LOGFILE_SYM = 535,
     LOGS_SYM = 536,
     LONGBLOB = 537,
     LONGTEXT = 538,
     LONG_NUM = 539,
     LONG_SYM = 540,
     LOOP_SYM = 541,
     LOW_PRIORITY = 542,
     LT = 543,
     MASTER_AUTO_POSITION_SYM = 544,
     MASTER_BIND_SYM = 545,
     MASTER_CONNECT_RETRY_SYM = 546,
     MASTER_DELAY_SYM = 547,
     MASTER_HOST_SYM = 548,
     MASTER_LOG_FILE_SYM = 549,
     MASTER_LOG_POS_SYM = 550,
     MASTER_PASSWORD_SYM = 551,
     MASTER_PORT_SYM = 552,
     MASTER_RETRY_COUNT_SYM = 553,
     MASTER_SERVER_ID_SYM = 554,
     MASTER_SSL_CAPATH_SYM = 555,
     MASTER_SSL_CA_SYM = 556,
     MASTER_SSL_CERT_SYM = 557,
     MASTER_SSL_CIPHER_SYM = 558,
     MASTER_SSL_CRL_SYM = 559,
     MASTER_SSL_CRLPATH_SYM = 560,
     MASTER_SSL_KEY_SYM = 561,
     MASTER_SSL_SYM = 562,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 563,
     MASTER_SYM = 564,
     MASTER_USER_SYM = 565,
     MASTER_HEARTBEAT_PERIOD_SYM = 566,
     MATCH = 567,
     MAX_CONNECTIONS_PER_HOUR = 568,
     MAX_QUERIES_PER_HOUR = 569,
     MAX_ROWS = 570,
     MAX_SIZE_SYM = 571,
     MAX_SYM = 572,
     MAX_UPDATES_PER_HOUR = 573,
     MAX_USER_CONNECTIONS_SYM = 574,
     MAX_VALUE_SYM = 575,
     MEDIUMBLOB = 576,
     MEDIUMINT = 577,
     MEDIUMTEXT = 578,
     MEDIUM_SYM = 579,
     MEMORY_SYM = 580,
     MERGE_SYM = 581,
     MESSAGE_TEXT_SYM = 582,
     MICROSECOND_SYM = 583,
     MIGRATE_SYM = 584,
     MINUTE_MICROSECOND_SYM = 585,
     MINUTE_SECOND_SYM = 586,
     MINUTE_SYM = 587,
     MINVALUE_SYM = 588,
     MIN_ROWS = 589,
     MIN_SYM = 590,
     MODE_SYM = 591,
     MODIFIES_SYM = 592,
     MODIFY_SYM = 593,
     MOD_SYM = 594,
     MONTH_SYM = 595,
     MULTILINESTRING = 596,
     MULTIPOINT = 597,
     MULTIPOLYGON = 598,
     MUTEX_SYM = 599,
     MYSQL_ERRNO_SYM = 600,
     NAMES_SYM = 601,
     NAME_SYM = 602,
     NATIONAL_SYM = 603,
     NATURAL = 604,
     NCHAR_STRING = 605,
     NCHAR_SYM = 606,
     NDBCLUSTER_SYM = 607,
     NE = 608,
     NEG = 609,
     NEW_SYM = 610,
     NEXT_SYM = 611,
     NEXTVAL_SYM = 612,
     NOCACHE_SYM = 613,
     NOCYCLE_SYM = 614,
     NODEGROUP_SYM = 615,
     NONE_SYM = 616,
     NOT2_SYM = 617,
     NOT_SYM = 618,
     NOW_SYM = 619,
     NO_SYM = 620,
     NO_WAIT_SYM = 621,
     NO_WRITE_TO_BINLOG = 622,
     NULL_SYM = 623,
     NUM = 624,
     NUMBER_SYM = 625,
     NUMERIC_SYM = 626,
     NVARCHAR_SYM = 627,
     OFFSET_SYM = 628,
     OLD_PASSWORD = 629,
     ON = 630,
     ONE_SYM = 631,
     ONLY_SYM = 632,
     OPEN_SYM = 633,
     OPTIMIZE = 634,
     OPTIONS_SYM = 635,
     OPTION = 636,
     OPTIONALLY = 637,
     OR2_SYM = 638,
     ORDER_SYM = 639,
     OR_OR_SYM = 640,
     OR_SYM = 641,
     OUTER = 642,
     OUTFILE = 643,
     OUT_SYM = 644,
     OWNER_SYM = 645,
     PACK_KEYS_SYM = 646,
     PAGE_SYM = 647,
     PARAM_MARKER = 648,
     PARSER_SYM = 649,
     PARTIAL = 650,
     PARTITION_SYM = 651,
     PARTITIONS_SYM = 652,
     PARTITIONING_SYM = 653,
     PASSWORD = 654,
     PHASE_SYM = 655,
     PLUGIN_DIR_SYM = 656,
     PLUGIN_SYM = 657,
     PLUGINS_SYM = 658,
     POINT_SYM = 659,
     POLYGON = 660,
     PORT_SYM = 661,
     POSITION_SYM = 662,
     PRECISION = 663,
     PREPARE_SYM = 664,
     PRESERVE_SYM = 665,
     PREV_SYM = 666,
     PRIMARY_SYM = 667,
     PRIVILEGES = 668,
     PROCEDURE_SYM = 669,
     PROCESS = 670,
     PROCESSLIST_SYM = 671,
     PROFILE_SYM = 672,
     PROFILES_SYM = 673,
     PROXY_SYM = 674,
     PURGE = 675,
     QUARTER_SYM = 676,
     QUERY_SYM = 677,
     QUEUE_ON_PK_SYM = 678,
     QUICK = 679,
     RANGE_SYM = 680,
     RB_ON_FAIL_SYM = 681,
     READS_SYM = 682,
     READ_ONLY_SYM = 683,
     READ_SYM = 684,
     READ_WRITE_SYM = 685,
     REAL = 686,
     REBUILD_SYM = 687,
     RECOVER_SYM = 688,
     REDOFILE_SYM = 689,
     REDO_BUFFER_SIZE_SYM = 690,
     REDUNDANT_SYM = 691,
     REFERENCES = 692,
     REGEXP = 693,
     RELAY = 694,
     RELAYLOG_SYM = 695,
     RELAY_LOG_FILE_SYM = 696,
     RELAY_LOG_POS_SYM = 697,
     RELAY_THREAD = 698,
     RELEASE_SYM = 699,
     RELOAD = 700,
     REMOVE_SYM = 701,
     RENAME = 702,
     REORGANIZE_SYM = 703,
     REPAIR = 704,
     REPEATABLE_SYM = 705,
     REPEAT_SYM = 706,
     REPLACE = 707,
     REPLICATION = 708,
     REQUIRE_SYM = 709,
     RESET_SYM = 710,
     RESIGNAL_SYM = 711,
     RESOURCES = 712,
     RESTORE_SYM = 713,
     RESTRICT = 714,
     RESUME_SYM = 715,
     RETURNED_SQLSTATE_SYM = 716,
     RETURNS_SYM = 717,
     RETURN_SYM = 718,
     REVERSE_SYM = 719,
     REVOKE = 720,
     RIGHT = 721,
     ROLLBACK_SYM = 722,
     ROLLUP_SYM = 723,
     ROUTINE_SYM = 724,
     ROWS_SYM = 725,
     ROW_FORMAT_SYM = 726,
     ROW_SYM = 727,
     ROW_COUNT_SYM = 728,
     RTREE_SYM = 729,
     SAVEPOINT_SYM = 730,
     SCHEDULE_SYM = 731,
     SCHEMA_NAME_SYM = 732,
     SECOND_MICROSECOND_SYM = 733,
     SECOND_SYM = 734,
     SECURITY_SYM = 735,
     SELECT_SYM = 736,
     SENSITIVE_SYM = 737,
     SEPARATOR_SYM = 738,
     SEQUENCE_SYM = 739,
     SERIALIZABLE_SYM = 740,
     SERIAL_SYM = 741,
     SESSION_SYM = 742,
     SERVER_SYM = 743,
     SERVER_OPTIONS = 744,
     SET = 745,
     SET_VAR = 746,
     SHARE_SYM = 747,
     SHIFT_LEFT = 748,
     SHIFT_RIGHT = 749,
     SHOW = 750,
     SHUTDOWN = 751,
     SIGNAL_SYM = 752,
     SIGNED_SYM = 753,
     SIMPLE_SYM = 754,
     SLAVE = 755,
     SLOW = 756,
     SMALLINT = 757,
     SNAPSHOT_SYM = 758,
     SOCKET_SYM = 759,
     SONAME_SYM = 760,
     SOUNDS_SYM = 761,
     SOURCE_SYM = 762,
     SPATIAL_SYM = 763,
     SPECIFIC_SYM = 764,
     SQLEXCEPTION_SYM = 765,
     SQLSTATE_SYM = 766,
     SQLWARNING_SYM = 767,
     SQL_AFTER_GTIDS = 768,
     SQL_AFTER_MTS_GAPS = 769,
     SQL_BEFORE_GTIDS = 770,
     SQL_BIG_RESULT = 771,
     SQL_BUFFER_RESULT = 772,
     SQL_CACHE_SYM = 773,
     SQL_CALC_FOUND_ROWS = 774,
     SQL_FILTERS_SYM = 775,
     SQL_NO_CACHE_SYM = 776,
     SQL_SMALL_RESULT = 777,
     SQL_SYM = 778,
     SQL_THREAD = 779,
     SSL_SYM = 780,
     STARTING = 781,
     STARTS_SYM = 782,
     START_SYM = 783,
     STATS_AUTO_RECALC_SYM = 784,
     STATS_PERSISTENT_SYM = 785,
     STATS_SAMPLE_PAGES_SYM = 786,
     STATUS_SYM = 787,
     STDDEV_SAMP_SYM = 788,
     STD_SYM = 789,
     STOP_SYM = 790,
     STORAGE_SYM = 791,
     STRAIGHT_JOIN = 792,
     STRING_SYM = 793,
     SUBCLASS_ORIGIN_SYM = 794,
     SUBDATE_SYM = 795,
     SUBJECT_SYM = 796,
     SUBPARTITIONS_SYM = 797,
     SUBPARTITION_SYM = 798,
     SUBSTRING = 799,
     SUM_SYM = 800,
     SUPER_SYM = 801,
     SUSPEND_SYM = 802,
     SWAPS_SYM = 803,
     SWITCHES_SYM = 804,
     SYSDATE = 805,
     TABLES = 806,
     TABLESPACE = 807,
     TABLE_REF_PRIORITY = 808,
     TABLE_SYM = 809,
     TABLE_CHECKSUM_SYM = 810,
     TABLE_NAME_SYM = 811,
     TARGET_AFFECT_SYM = 812,
     TEMPORARY = 813,
     TEMPTABLE_SYM = 814,
     TERMINATED = 815,
     TEXT_STRING = 816,
     TEXT_SYM = 817,
     THAN_SYM = 818,
     THEN_SYM = 819,
     TIMESTAMP = 820,
     TIMESTAMP_ADD = 821,
     TIMESTAMP_DIFF = 822,
     TIME_SYM = 823,
     TINYBLOB = 824,
     TINYINT = 825,
     TINYTEXT = 826,
     TO_SYM = 827,
     TOKU_UNCOMPRESSED_SYM = 828,
     TOKU_ZLIB_SYM = 829,
     TOKU_QUICKLZ_SYM = 830,
     TOKU_LZMA_SYM = 831,
     TOKU_FAST_SYM = 832,
     TOKU_SMALL_SYM = 833,
     TRAILING = 834,
     TRANSACTION_SYM = 835,
     TRIGGERS_SYM = 836,
     TRIGGER_SYM = 837,
     TRIM = 838,
     TRUE_SYM = 839,
     TRUNCATE_SYM = 840,
     TYPES_SYM = 841,
     TYPE_SYM = 842,
     UDF_RETURNS_SYM = 843,
     ULONGLONG_NUM = 844,
     UNCOMMITTED_SYM = 845,
     UNDEFINED_SYM = 846,
     UNDERSCORE_CHARSET = 847,
     UNDOFILE_SYM = 848,
     UNDO_BUFFER_SIZE_SYM = 849,
     UNDO_SYM = 850,
     UNICODE_SYM = 851,
     UNINSTALL_SYM = 852,
     UNION_SYM = 853,
     UNIQUE_SYM = 854,
     UNKNOWN_SYM = 855,
     UNLOCK_SYM = 856,
     UNSIGNED = 857,
     UNTIL_SYM = 858,
     UPDATE_SYM = 859,
     UPGRADE_SYM = 860,
     USAGE = 861,
     USER = 862,
     USE_FRM = 863,
     USE_SYM = 864,
     USING = 865,
     UTC_DATE_SYM = 866,
     UTC_TIMESTAMP_SYM = 867,
     UTC_TIME_SYM = 868,
     VALUES = 869,
     VALUE_SYM = 870,
     VARBINARY = 871,
     VARCHAR = 872,
     VARIABLES = 873,
     VARIANCE_SYM = 874,
     VARYING = 875,
     VAR_SAMP_SYM = 876,
     VIEW_SYM = 877,
     WAIT_SYM = 878,
     WARNINGS = 879,
     WEEK_SYM = 880,
     WEIGHT_STRING_SYM = 881,
     WHEN_SYM = 882,
     WHERE = 883,
     WHILE_SYM = 884,
     WITH = 885,
     WITH_CUBE_SYM = 886,
     WITH_ROLLUP_SYM = 887,
     WORK_SYM = 888,
     WRAPPER_SYM = 889,
     WRITE_SYM = 890,
     X509_SYM = 891,
     XA_SYM = 892,
     XML_SYM = 893,
     XOR = 894,
     YEAR_MONTH_SYM = 895,
     YEAR_SYM = 896,
     ZEROFILL = 897,
     INVISIBLE_SYM = 898,
     VISIBLE_SYM = 899
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYSE_SYM 269
#define ANALYZE_SYM 270
#define AND_AND_SYM 271
#define AND_SYM 272
#define ANY_SYM 273
#define AS 274
#define ASC 275
#define ASCII_SYM 276
#define ASENSITIVE_SYM 277
#define AT_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CATALOG_NAME_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHARSET 313
#define CHAR_SYM 314
#define CHECKSUM_SYM 315
#define CHECK_SYM 316
#define CIPHER_SYM 317
#define CI_ON_SUCCESS_SYM 318
#define CLASS_ORIGIN_SYM 319
#define CLIENT_SYM 320
#define CLOSE_SYM 321
#define CLUSTERING_SYM 322
#define COALESCE 323
#define CODE_SYM 324
#define COLLATE_SYM 325
#define COLLATION_SYM 326
#define COLUMNS 327
#define COLUMN_SYM 328
#define COLUMN_FORMAT_SYM 329
#define COLUMN_NAME_SYM 330
#define COMFORT_SYM 331
#define COMMENT_SYM 332
#define COMMITTED_SYM 333
#define COMMIT_SYM 334
#define COMPACT_SYM 335
#define COMPLETION_SYM 336
#define COMPRESSED_SYM 337
#define CONCURRENT 338
#define CONDITION_SYM 339
#define CONNECTION_SYM 340
#define CONSISTENT_SYM 341
#define CONSTRAINT 342
#define CONSTRAINT_CATALOG_SYM 343
#define CONSTRAINT_NAME_SYM 344
#define CONSTRAINT_SCHEMA_SYM 345
#define CONTAINS_SYM 346
#define CONTEXT_SYM 347
#define CONTINUE_SYM 348
#define CONVERT_SYM 349
#define COUNT_SYM 350
#define CPU_SYM 351
#define CREATE 352
#define CROSS 353
#define CUBE_SYM 354
#define CURDATE 355
#define CURRENT_SYM 356
#define CURRENT_USER 357
#define CURRVAL_SYM 358
#define CURSOR_SYM 359
#define CURSOR_NAME_SYM 360
#define CURTIME 361
#define CYCLE_SYM 362
#define DATABASE 363
#define DATABASES 364
#define DATAFILE_SYM 365
#define DATA_SYM 366
#define DATETIME 367
#define DATE_ADD_INTERVAL 368
#define DATE_SUB_INTERVAL 369
#define DATE_SYM 370
#define DAY_HOUR_SYM 371
#define DAY_MICROSECOND_SYM 372
#define DAY_MINUTE_SYM 373
#define DAY_SECOND_SYM 374
#define DAY_SYM 375
#define DEALLOCATE_SYM 376
#define DECIMAL_NUM 377
#define DECIMAL_SYM 378
#define DECLARE_SYM 379
#define DEFAULT 380
#define DEFAULT_AUTH_SYM 381
#define DEFINER_SYM 382
#define DELAYED_SYM 383
#define DELAY_KEY_WRITE_SYM 384
#define DELETE_SYM 385
#define DESC 386
#define DESCRIBE 387
#define DES_KEY_FILE 388
#define DETERMINISTIC_SYM 389
#define DIAGNOSTICS_SYM 390
#define DIRECTORY_SYM 391
#define DISABLE_SYM 392
#define DISCARD 393
#define DISK_SYM 394
#define DISTINCT 395
#define DIV_SYM 396
#define DOUBLE_SYM 397
#define DO_SYM 398
#define DROP 399
#define DUAL_SYM 400
#define DUMPFILE 401
#define DUPLICATE_SYM 402
#define DYNAMIC_SYM 403
#define EACH_SYM 404
#define ELSE 405
#define ELSEIF_SYM 406
#define ENABLE_SYM 407
#define ENCLOSED 408
#define END 409
#define ENDS_SYM 410
#define END_OF_INPUT 411
#define ENGINES_SYM 412
#define ENGINE_SYM 413
#define ENUM 414
#define EQ 415
#define EQUAL_SYM 416
#define ERROR_SYM 417
#define ERRORS 418
#define ESCAPED 419
#define ESCAPE_SYM 420
#define EVENTS_SYM 421
#define EVENT_SYM 422
#define EVERY_SYM 423
#define EXCHANGE_SYM 424
#define EXECUTE_SYM 425
#define EXECUTED_GTID_SET 426
#define EXISTS 427
#define EXIT_SYM 428
#define EXPANSION_SYM 429
#define EXPIRE_SYM 430
#define EXPORT_SYM 431
#define EXTENDED_SYM 432
#define EXTENT_SIZE_SYM 433
#define EXTRACT_SYM 434
#define FALSE_SYM 435
#define FAST_SYM 436
#define FAULTS_SYM 437
#define FETCH_SYM 438
#define FILE_SYM 439
#define FIRST_SYM 440
#define FIXED_SYM 441
#define FLOAT_NUM 442
#define FLOAT_SYM 443
#define FLUSH_SYM 444
#define FORCE_SYM 445
#define FOREIGN 446
#define FOR_SYM 447
#define FORMAT_SYM 448
#define FOUND_SYM 449
#define FROM 450
#define FULL 451
#define FULLTEXT_SYM 452
#define FUNCTION_SYM 453
#define GE 454
#define GENERAL 455
#define GEOMETRYCOLLECTION 456
#define GEOMETRY_SYM 457
#define GET_FORMAT 458
#define GET_SYM 459
#define GLOBAL_SYM 460
#define GRANT 461
#define GRANTS 462
#define GROUP_SYM 463
#define GROUP_CONCAT_SYM 464
#define GT_SYM 465
#define HANDLER_SYM 466
#define HASH_SYM 467
#define HAVING 468
#define HELP_SYM 469
#define HEX_NUM 470
#define HIGH_PRIORITY 471
#define HOST_SYM 472
#define HOSTS_SYM 473
#define HOUR_MICROSECOND_SYM 474
#define HOUR_MINUTE_SYM 475
#define HOUR_SECOND_SYM 476
#define HOUR_SYM 477
#define IDENT 478
#define IDENTIFIED_SYM 479
#define IDENT_QUOTED 480
#define IF 481
#define IGNORE_SYM 482
#define IGNORE_SERVER_IDS_SYM 483
#define IMPORT 484
#define INCREMENT_SYM 485
#define INDEXES 486
#define INDEX_SYM 487
#define INFILE 488
#define INITIAL_SIZE_SYM 489
#define INNER_SYM 490
#define INOUT_SYM 491
#define INSENSITIVE_SYM 492
#define INSERT 493
#define INSERT_METHOD 494
#define INSTALL_SYM 495
#define INTERVAL_SYM 496
#define INTO 497
#define INT_SYM 498
#define INVOKER_SYM 499
#define IN_SYM 500
#define IO_AFTER_GTIDS 501
#define IO_BEFORE_GTIDS 502
#define IO_SYM 503
#define IPC_SYM 504
#define IS 505
#define ISOLATION 506
#define ISSUER_SYM 507
#define ITERATE_SYM 508
#define JOIN_SYM 509
#define KEYS 510
#define KEY_BLOCK_SIZE 511
#define KEY_SYM 512
#define KILL_SYM 513
#define LANGUAGE_SYM 514
#define LAST_SYM 515
#define LE 516
#define LEADING 517
#define LEAVES 518
#define LEAVE_SYM 519
#define LEFT 520
#define LESS_SYM 521
#define LEVEL_SYM 522
#define LEX_HOSTNAME 523
#define LIKE 524
#define LIMIT 525
#define LINEAR_SYM 526
#define LINES 527
#define LINESTRING 528
#define LIST_SYM 529
#define LOAD 530
#define LOCAL_SYM 531
#define LOCATOR_SYM 532
#define LOCKS_SYM 533
#define LOCK_SYM 534
#define LOGFILE_SYM 535
#define LOGS_SYM 536
#define LONGBLOB 537
#define LONGTEXT 538
#define LONG_NUM 539
#define LONG_SYM 540
#define LOOP_SYM 541
#define LOW_PRIORITY 542
#define LT 543
#define MASTER_AUTO_POSITION_SYM 544
#define MASTER_BIND_SYM 545
#define MASTER_CONNECT_RETRY_SYM 546
#define MASTER_DELAY_SYM 547
#define MASTER_HOST_SYM 548
#define MASTER_LOG_FILE_SYM 549
#define MASTER_LOG_POS_SYM 550
#define MASTER_PASSWORD_SYM 551
#define MASTER_PORT_SYM 552
#define MASTER_RETRY_COUNT_SYM 553
#define MASTER_SERVER_ID_SYM 554
#define MASTER_SSL_CAPATH_SYM 555
#define MASTER_SSL_CA_SYM 556
#define MASTER_SSL_CERT_SYM 557
#define MASTER_SSL_CIPHER_SYM 558
#define MASTER_SSL_CRL_SYM 559
#define MASTER_SSL_CRLPATH_SYM 560
#define MASTER_SSL_KEY_SYM 561
#define MASTER_SSL_SYM 562
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 563
#define MASTER_SYM 564
#define MASTER_USER_SYM 565
#define MASTER_HEARTBEAT_PERIOD_SYM 566
#define MATCH 567
#define MAX_CONNECTIONS_PER_HOUR 568
#define MAX_QUERIES_PER_HOUR 569
#define MAX_ROWS 570
#define MAX_SIZE_SYM 571
#define MAX_SYM 572
#define MAX_UPDATES_PER_HOUR 573
#define MAX_USER_CONNECTIONS_SYM 574
#define MAX_VALUE_SYM 575
#define MEDIUMBLOB 576
#define MEDIUMINT 577
#define MEDIUMTEXT 578
#define MEDIUM_SYM 579
#define MEMORY_SYM 580
#define MERGE_SYM 581
#define MESSAGE_TEXT_SYM 582
#define MICROSECOND_SYM 583
#define MIGRATE_SYM 584
#define MINUTE_MICROSECOND_SYM 585
#define MINUTE_SECOND_SYM 586
#define MINUTE_SYM 587
#define MINVALUE_SYM 588
#define MIN_ROWS 589
#define MIN_SYM 590
#define MODE_SYM 591
#define MODIFIES_SYM 592
#define MODIFY_SYM 593
#define MOD_SYM 594
#define MONTH_SYM 595
#define MULTILINESTRING 596
#define MULTIPOINT 597
#define MULTIPOLYGON 598
#define MUTEX_SYM 599
#define MYSQL_ERRNO_SYM 600
#define NAMES_SYM 601
#define NAME_SYM 602
#define NATIONAL_SYM 603
#define NATURAL 604
#define NCHAR_STRING 605
#define NCHAR_SYM 606
#define NDBCLUSTER_SYM 607
#define NE 608
#define NEG 609
#define NEW_SYM 610
#define NEXT_SYM 611
#define NEXTVAL_SYM 612
#define NOCACHE_SYM 613
#define NOCYCLE_SYM 614
#define NODEGROUP_SYM 615
#define NONE_SYM 616
#define NOT2_SYM 617
#define NOT_SYM 618
#define NOW_SYM 619
#define NO_SYM 620
#define NO_WAIT_SYM 621
#define NO_WRITE_TO_BINLOG 622
#define NULL_SYM 623
#define NUM 624
#define NUMBER_SYM 625
#define NUMERIC_SYM 626
#define NVARCHAR_SYM 627
#define OFFSET_SYM 628
#define OLD_PASSWORD 629
#define ON 630
#define ONE_SYM 631
#define ONLY_SYM 632
#define OPEN_SYM 633
#define OPTIMIZE 634
#define OPTIONS_SYM 635
#define OPTION 636
#define OPTIONALLY 637
#define OR2_SYM 638
#define ORDER_SYM 639
#define OR_OR_SYM 640
#define OR_SYM 641
#define OUTER 642
#define OUTFILE 643
#define OUT_SYM 644
#define OWNER_SYM 645
#define PACK_KEYS_SYM 646
#define PAGE_SYM 647
#define PARAM_MARKER 648
#define PARSER_SYM 649
#define PARTIAL 650
#define PARTITION_SYM 651
#define PARTITIONS_SYM 652
#define PARTITIONING_SYM 653
#define PASSWORD 654
#define PHASE_SYM 655
#define PLUGIN_DIR_SYM 656
#define PLUGIN_SYM 657
#define PLUGINS_SYM 658
#define POINT_SYM 659
#define POLYGON 660
#define PORT_SYM 661
#define POSITION_SYM 662
#define PRECISION 663
#define PREPARE_SYM 664
#define PRESERVE_SYM 665
#define PREV_SYM 666
#define PRIMARY_SYM 667
#define PRIVILEGES 668
#define PROCEDURE_SYM 669
#define PROCESS 670
#define PROCESSLIST_SYM 671
#define PROFILE_SYM 672
#define PROFILES_SYM 673
#define PROXY_SYM 674
#define PURGE 675
#define QUARTER_SYM 676
#define QUERY_SYM 677
#define QUEUE_ON_PK_SYM 678
#define QUICK 679
#define RANGE_SYM 680
#define RB_ON_FAIL_SYM 681
#define READS_SYM 682
#define READ_ONLY_SYM 683
#define READ_SYM 684
#define READ_WRITE_SYM 685
#define REAL 686
#define REBUILD_SYM 687
#define RECOVER_SYM 688
#define REDOFILE_SYM 689
#define REDO_BUFFER_SIZE_SYM 690
#define REDUNDANT_SYM 691
#define REFERENCES 692
#define REGEXP 693
#define RELAY 694
#define RELAYLOG_SYM 695
#define RELAY_LOG_FILE_SYM 696
#define RELAY_LOG_POS_SYM 697
#define RELAY_THREAD 698
#define RELEASE_SYM 699
#define RELOAD 700
#define REMOVE_SYM 701
#define RENAME 702
#define REORGANIZE_SYM 703
#define REPAIR 704
#define REPEATABLE_SYM 705
#define REPEAT_SYM 706
#define REPLACE 707
#define REPLICATION 708
#define REQUIRE_SYM 709
#define RESET_SYM 710
#define RESIGNAL_SYM 711
#define RESOURCES 712
#define RESTORE_SYM 713
#define RESTRICT 714
#define RESUME_SYM 715
#define RETURNED_SQLSTATE_SYM 716
#define RETURNS_SYM 717
#define RETURN_SYM 718
#define REVERSE_SYM 719
#define REVOKE 720
#define RIGHT 721
#define ROLLBACK_SYM 722
#define ROLLUP_SYM 723
#define ROUTINE_SYM 724
#define ROWS_SYM 725
#define ROW_FORMAT_SYM 726
#define ROW_SYM 727
#define ROW_COUNT_SYM 728
#define RTREE_SYM 729
#define SAVEPOINT_SYM 730
#define SCHEDULE_SYM 731
#define SCHEMA_NAME_SYM 732
#define SECOND_MICROSECOND_SYM 733
#define SECOND_SYM 734
#define SECURITY_SYM 735
#define SELECT_SYM 736
#define SENSITIVE_SYM 737
#define SEPARATOR_SYM 738
#define SEQUENCE_SYM 739
#define SERIALIZABLE_SYM 740
#define SERIAL_SYM 741
#define SESSION_SYM 742
#define SERVER_SYM 743
#define SERVER_OPTIONS 744
#define SET 745
#define SET_VAR 746
#define SHARE_SYM 747
#define SHIFT_LEFT 748
#define SHIFT_RIGHT 749
#define SHOW 750
#define SHUTDOWN 751
#define SIGNAL_SYM 752
#define SIGNED_SYM 753
#define SIMPLE_SYM 754
#define SLAVE 755
#define SLOW 756
#define SMALLINT 757
#define SNAPSHOT_SYM 758
#define SOCKET_SYM 759
#define SONAME_SYM 760
#define SOUNDS_SYM 761
#define SOURCE_SYM 762
#define SPATIAL_SYM 763
#define SPECIFIC_SYM 764
#define SQLEXCEPTION_SYM 765
#define SQLSTATE_SYM 766
#define SQLWARNING_SYM 767
#define SQL_AFTER_GTIDS 768
#define SQL_AFTER_MTS_GAPS 769
#define SQL_BEFORE_GTIDS 770
#define SQL_BIG_RESULT 771
#define SQL_BUFFER_RESULT 772
#define SQL_CACHE_SYM 773
#define SQL_CALC_FOUND_ROWS 774
#define SQL_FILTERS_SYM 775
#define SQL_NO_CACHE_SYM 776
#define SQL_SMALL_RESULT 777
#define SQL_SYM 778
#define SQL_THREAD 779
#define SSL_SYM 780
#define STARTING 781
#define STARTS_SYM 782
#define START_SYM 783
#define STATS_AUTO_RECALC_SYM 784
#define STATS_PERSISTENT_SYM 785
#define STATS_SAMPLE_PAGES_SYM 786
#define STATUS_SYM 787
#define STDDEV_SAMP_SYM 788
#define STD_SYM 789
#define STOP_SYM 790
#define STORAGE_SYM 791
#define STRAIGHT_JOIN 792
#define STRING_SYM 793
#define SUBCLASS_ORIGIN_SYM 794
#define SUBDATE_SYM 795
#define SUBJECT_SYM 796
#define SUBPARTITIONS_SYM 797
#define SUBPARTITION_SYM 798
#define SUBSTRING 799
#define SUM_SYM 800
#define SUPER_SYM 801
#define SUSPEND_SYM 802
#define SWAPS_SYM 803
#define SWITCHES_SYM 804
#define SYSDATE 805
#define TABLES 806
#define TABLESPACE 807
#define TABLE_REF_PRIORITY 808
#define TABLE_SYM 809
#define TABLE_CHECKSUM_SYM 810
#define TABLE_NAME_SYM 811
#define TARGET_AFFECT_SYM 812
#define TEMPORARY 813
#define TEMPTABLE_SYM 814
#define TERMINATED 815
#define TEXT_STRING 816
#define TEXT_SYM 817
#define THAN_SYM 818
#define THEN_SYM 819
#define TIMESTAMP 820
#define TIMESTAMP_ADD 821
#define TIMESTAMP_DIFF 822
#define TIME_SYM 823
#define TINYBLOB 824
#define TINYINT 825
#define TINYTEXT 826
#define TO_SYM 827
#define TOKU_UNCOMPRESSED_SYM 828
#define TOKU_ZLIB_SYM 829
#define TOKU_QUICKLZ_SYM 830
#define TOKU_LZMA_SYM 831
#define TOKU_FAST_SYM 832
#define TOKU_SMALL_SYM 833
#define TRAILING 834
#define TRANSACTION_SYM 835
#define TRIGGERS_SYM 836
#define TRIGGER_SYM 837
#define TRIM 838
#define TRUE_SYM 839
#define TRUNCATE_SYM 840
#define TYPES_SYM 841
#define TYPE_SYM 842
#define UDF_RETURNS_SYM 843
#define ULONGLONG_NUM 844
#define UNCOMMITTED_SYM 845
#define UNDEFINED_SYM 846
#define UNDERSCORE_CHARSET 847
#define UNDOFILE_SYM 848
#define UNDO_BUFFER_SIZE_SYM 849
#define UNDO_SYM 850
#define UNICODE_SYM 851
#define UNINSTALL_SYM 852
#define UNION_SYM 853
#define UNIQUE_SYM 854
#define UNKNOWN_SYM 855
#define UNLOCK_SYM 856
#define UNSIGNED 857
#define UNTIL_SYM 858
#define UPDATE_SYM 859
#define UPGRADE_SYM 860
#define USAGE 861
#define USER 862
#define USE_FRM 863
#define USE_SYM 864
#define USING 865
#define UTC_DATE_SYM 866
#define UTC_TIMESTAMP_SYM 867
#define UTC_TIME_SYM 868
#define VALUES 869
#define VALUE_SYM 870
#define VARBINARY 871
#define VARCHAR 872
#define VARIABLES 873
#define VARIANCE_SYM 874
#define VARYING 875
#define VAR_SAMP_SYM 876
#define VIEW_SYM 877
#define WAIT_SYM 878
#define WARNINGS 879
#define WEEK_SYM 880
#define WEIGHT_STRING_SYM 881
#define WHEN_SYM 882
#define WHERE 883
#define WHILE_SYM 884
#define WITH 885
#define WITH_CUBE_SYM 886
#define WITH_ROLLUP_SYM 887
#define WORK_SYM 888
#define WRAPPER_SYM 889
#define WRITE_SYM 890
#define X509_SYM 891
#define XA_SYM 892
#define XML_SYM 893
#define XOR 894
#define YEAR_MONTH_SYM 895
#define YEAR_SYM 896
#define ZEROFILL 897
#define INVISIBLE_SYM 898
#define VISIBLE_SYM 899




/* Copy the first part of user declarations.  */
#line 24 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"

/*
Note: YYTHD is passed as an argument to yyparse(), and subsequently to yylex().
*/
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "rpl_slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_instr.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "opt_explain_traditional.h"
#include "opt_explain_json.h"
#include "lex_token.h"
#include "sql_sequence.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

using std::min;
using std::max;

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(YYTHD, (char*) (A));            \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    MY_ATTRIBUTE ((__unused__))
  #endif
</pre>
  This usage of MY_ATTRIBUTE is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef MY_ATTRIBUTE
#define MY_ATTRIBUTE(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param thd thread handler
*/

void case_stmt_action_case(THD *thd)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp->m_parser_data.new_cont_backpatch();

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  pctx->push_label(thd, EMPTY_STR, sp->instructions());
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

bool case_stmt_action_then(THD *thd, LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  sp_instr_jump *i =
    new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

  if (!i || sp->add_instr(thd, i))
    return true;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->m_parser_data.add_backpatch_entry(i, pctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  sp->m_parser_data.do_backpatch(pctx->pop_label(), sp->instructions());

  if (simple)
    pctx->pop_case_expr_id();

  sp->m_parser_data.do_cont_backpatch(sp->instructions());
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (pctx && tmp->var == Sys_autocommit_ptr)
    sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

#ifdef HAVE_REPLICATION
  if (lex->uses_stored_routines() &&
      ((tmp->var == Sys_gtid_next_ptr
#ifdef HAVE_GTID_NEXT_LIST
       || tmp->var == Sys_gtid_next_list_ptr
#endif
       ) ||
       Sys_gtid_purged_ptr == tmp->var))
  {
    my_error(ER_SET_STATEMENT_CANNOT_INVOKE_FUNCTION, MYF(0),
             tmp->var->name.str);
    return TRUE;
  }
#endif

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd                thread handler
  @param trigger_field_name the NEW-row field name
  @param expr_item          the value expression being assigned
  @param expr_query         the value expression query

  @return error status (true if error, false otherwise).
*/

static bool set_trigger_new_row(THD *thd,
                                LEX_STRING trigger_field_name,
                                Item *expr_item,
                                LEX_STRING expr_query)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  DBUG_ASSERT(expr_item);
  DBUG_ASSERT(sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
               sp->m_trg_chistics.event == TRG_EVENT_UPDATE));

  Item_trigger_field *trg_fld=
    new (thd->mem_root) Item_trigger_field(lex->current_context(),
                                           Item_trigger_field::NEW_ROW,
                                           trigger_field_name.str,
                                           UPDATE_ACL, false);

  if (!trg_fld)
    return true;

  sp_instr_set_trigger_field *i=
    new (thd->mem_root)
      sp_instr_set_trigger_field(sp->instructions(),
                                 lex,
                                 trigger_field_name,
                                 trg_fld, expr_item,
                                 expr_query);

  if (!i)
    return true;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  sp->m_cur_instr_trig_field_items.link_in_list(trg_fld,
                                                &trg_fld->next_trg_field);

  return sp->add_instr(thd, i);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param thd              The current thread.
  @param name             The SP variable name.
  @param spv              The SP variable (optional).
  @param query_start_ptr  Start of the SQL-statement query string (optional).
  @param start_in_q       Start position of the SP variable name in the query.
  @param end_in_q         End position of the SP variable name in the query.

  @remark If spv is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal* create_item_for_sp_var(THD *thd,
                                            LEX_STRING name,
                                            sp_variable *spv,
                                            const char *query_start_ptr,
                                            const char *start_in_q,
                                            const char *end_in_q)
{
  LEX *lex= thd->lex;
  uint spv_pos_in_query= 0;
  uint spv_len_in_query= 0;
  sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

  /* If necessary, look for the variable. */
  if (pctx && !spv)
    spv= pctx->find_variable(name, false);

  if (!spv)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(pctx && spv);

  if (query_start_ptr)
  {
    /* Position and length of the SP variable name in the query. */
    spv_pos_in_query= start_in_q - query_start_ptr;
    spv_len_in_query= end_in_q - start_in_q;
  }

  Item_splocal *item=
    new (thd->mem_root) Item_splocal(
      name, spv->offset, spv->type, spv_pos_in_query, spv_len_in_query);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->proc_analyse)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "SELECT ... PROCEDURE ANALYSE()");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}

/**
  Make a new string allocated on THD's mem-root.

  @param thd        thread handler.
  @param start_ptr  start of the new string.
  @param end_ptr    end of the new string.

  @return LEX_STRING object, containing a pointer to a newly
  constructed/allocated string, and its length. The pointer is NULL
  in case of out-of-memory error.
*/
static LEX_STRING make_string(THD *thd,
                              const char *start_ptr,
                              const char *end_ptr)
{
  LEX_STRING s;

  s.length= end_ptr - start_ptr;
  s.str= (char *) thd->alloc(s.length + 1);

  if (s.str)
    strmake(s.str, start_ptr, s.length);

  return s;
}

/*
  The start is either lip->ptr, if there was no lookahead, lip->tok_start
  otherwise.
*/
#define YY_TOKEN_START \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_start())

/*
   The end is either lip->ptr, if there was no lookahead,
   or lip->tok_end otherwise.
*/

#define YY_TOKEN_END \
  ((yychar == YYEMPTY) ?  YYLIP->get_ptr() : YYLIP->get_tok_end())

/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  @see sp_create_assignment_instr

  @param thd        Thread context
  @param option_ptr Option-value-expression start pointer
*/

static void sp_create_assignment_lex(THD *thd, const char *option_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return;
  }

  LEX *old_lex= lex;
  sp->reset_lex(thd);
  lex= thd->lex;

  /* Set new LEX as if we at start of set rule. */
  mysql_init_select(lex);
  lex->sql_command= SQLCOM_SET_OPTION;
  lex->var_list.empty();
  lex->one_shot_set= 0;
  lex->autocommit= 0;

  /*
    It's a SET statement within SP. It will be either translated
    into one or more sp_instr_stmt instructions, or it will be
    sp_instr_set / sp_instr_set_trigger_field instructions.
    In any case, position of SP-variable can not be determined
    reliably. So, we set the start pointer of the current statement
    to NULL.
  */
  sp->m_parser_data.set_current_stmt_start_ptr(NULL);
  sp->m_parser_data.set_option_start_ptr(option_ptr);

  /* Inherit from outer lex. */
  lex->option_type= old_lex->option_type;
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param expr_end_ptr  Option-value-expression end pointer

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, const char *expr_end_ptr)
{
  LEX *lex= thd->lex;
  sp_head *sp= lex->sphead;

  /*
    We can come here in the following cases:

      1. it's a regular SET statement outside stored programs
        (lex->sphead is NULL);

      2. we're parsing a stored program normally (loading from mysql.proc, ...);

      3. we're re-parsing SET-statement with a user variable after meta-data
        change. It's guaranteed, that:
        - this SET-statement deals with a user/system variable (otherwise, it
          would be a different SP-instruction, and we would parse an expression);
        - this SET-statement has a single user/system variable assignment
          (that's how we generate sp_instr_stmt-instructions for SET-statements).
        So, in this case, even if lex->sphead is set, we should not process
        further.
  */

  if (!sp ||            // case #1
      sp->is_invoked()) // case #3
  {
    return false;
  }

  if (!lex->var_list.is_empty())
  {
    /* Extract expression string. */

    const char *expr_start_ptr= sp->m_parser_data.get_option_start_ptr();

    LEX_STRING expr;
    expr.str= (char *) expr_start_ptr;
    expr.length= expr_end_ptr - expr_start_ptr;

    /* Construct SET-statement query. */

    LEX_STRING set_stmt_query;

    set_stmt_query.length= expr.length + 3;
    set_stmt_query.str= (char *) thd->alloc(set_stmt_query.length + 1);

    if (!set_stmt_query.str)
      return true;

    strmake(strmake(set_stmt_query.str, "SET", 3),
            expr.str, expr.length);

    /*
      We have assignment to user or system variable or option setting, so we
      should construct sp_instr_stmt for it.
    */

    sp_instr_stmt *i=
      new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex, set_stmt_query);

    if (!i || sp->add_instr(thd, i))
      return true;
  }

  /* Remember option_type of the currently parsed LEX. */
  enum_var_type inner_option_type= lex->option_type;

  if (sp->restore_lex(thd))
    return true;

  /* Copy option_type to outer lex in case it has changed. */
  thd->lex->option_type= inner_option_type;

  return false;
}

/**
  Compare a LEX_USER against the current user as defined by the exact user and
  host used during authentication.

  @param user A pointer to a user which needs to be matched against the
              current.

  @see SET PASSWORD rules

  @retval true The specified user is the authorized user
  @retval false The user doesn't match
*/

bool match_authorized_user(Security_context *ctx, LEX_USER *user)
{
  if(user->user.str && my_strcasecmp(system_charset_info,
                                     ctx->priv_user,
                                     user->user.str) == 0)
  {
    /*
      users match; let's compare hosts.
      1. first compare with the host we actually authorized,
      2. then see if we match the host mask of the priv_host
    */
    if (user->host.str && my_strcasecmp(system_charset_info,
                                        user->host.str,
                                        ctx->priv_host) == 0)
    {
      /* specified user exactly match the authorized user */
      return true;
    }
  }
  return false;
}




/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 969 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
{
  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_ha_read_modes ha_read_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  const CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  bool is_not_empty;
}
/* Line 193 of yacc.c.  */
#line 2396 "/Users/wangyang/CLionProjects/AliSQL/cmake-build-debug/sql/sql_yacc.cc"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 1027 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 216 of yacc.c.  */
#line 2412 "/Users/wangyang/CLionProjects/AliSQL/cmake-build-debug/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  622
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   57715

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  664
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  973
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2749
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4662

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   899

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   657,     2,     2,     2,   651,   646,     2,
     654,   655,   649,   648,   656,   647,   662,   650,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   663,   660,
       2,     2,     2,     2,   661,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   652,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   658,   645,   659,   653,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   129,   131,   133,   138,   140,   143,   144,
     149,   150,   153,   157,   159,   162,   163,   167,   168,   174,
     176,   180,   184,   188,   192,   196,   200,   204,   208,   212,
     216,   220,   224,   228,   232,   236,   240,   244,   248,   252,
     258,   262,   264,   265,   267,   271,   273,   277,   281,   285,
     289,   290,   298,   299,   300,   309,   310,   311,   327,   328,
     329,   345,   346,   347,   363,   364,   371,   372,   376,   381,
     386,   390,   393,   394,   396,   398,   401,   404,   407,   411,
     415,   418,   420,   422,   424,   435,   437,   441,   444,   447,
     450,   453,   456,   459,   462,   463,   477,   478,   485,   488,
     489,   491,   495,   497,   498,   501,   502,   505,   506,   508,
     512,   517,   518,   521,   522,   525,   527,   529,   531,   533,
     535,   537,   539,   541,   543,   545,   547,   549,   551,   552,
     556,   558,   559,   562,   563,   566,   569,   572,   575,   578,
     582,   586,   588,   590,   592,   595,   599,   603,   604,   609,
     610,   614,   615,   617,   621,   623,   624,   626,   630,   632,
     633,   637,   638,   640,   644,   646,   651,   652,   654,   656,
     658,   659,   663,   666,   670,   671,   675,   676,   682,   688,
     689,   697,   698,   705,   707,   709,   711,   715,   717,   719,
     721,   725,   726,   728,   730,   732,   734,   737,   739,   743,
     745,   747,   748,   750,   751,   754,   758,   764,   766,   768,
     770,   772,   774,   776,   778,   780,   782,   784,   786,   788,
     790,   792,   794,   798,   803,   804,   806,   808,   812,   814,
     818,   822,   824,   827,   829,   831,   833,   835,   839,   843,
     845,   847,   849,   851,   853,   855,   857,   859,   861,   863,
     865,   867,   869,   871,   875,   876,   877,   881,   883,   885,
     887,   889,   891,   893,   895,   897,   899,   901,   903,   905,
     907,   908,   914,   915,   918,   919,   923,   924,   927,   930,
     933,   936,   937,   944,   947,   948,   951,   953,   955,   959,
     960,   961,   962,   970,   971,   974,   977,   979,   981,   982,
     983,   992,   993,  1000,  1002,  1005,  1007,  1010,  1011,  1012,
    1019,  1020,  1021,  1028,  1029,  1032,  1033,  1039,  1040,  1042,
    1043,  1049,  1050,  1053,  1054,  1060,  1065,  1066,  1067,  1076,
    1077,  1078,  1087,  1089,  1091,  1093,  1095,  1097,  1100,  1105,
    1111,  1112,  1117,  1122,  1127,  1131,  1135,  1138,  1141,  1142,
    1145,  1147,  1150,  1154,  1156,  1158,  1160,  1161,  1163,  1165,
    1168,  1172,  1174,  1176,  1178,  1180,  1182,  1184,  1186,  1188,
    1189,  1191,  1193,  1196,  1200,  1202,  1204,  1206,  1208,  1210,
    1211,  1213,  1215,  1218,  1222,  1224,  1226,  1228,  1230,  1232,
    1234,  1236,  1237,  1239,  1241,  1244,  1248,  1250,  1252,  1254,
    1257,  1260,  1263,  1265,  1267,  1269,  1271,  1274,  1278,  1282,
    1286,  1290,  1294,  1298,  1302,  1306,  1311,  1313,  1315,  1317,
    1319,  1322,  1326,  1329,  1334,  1340,  1341,  1347,  1348,  1349,
    1355,  1356,  1364,  1366,  1367,  1369,  1370,  1375,  1376,  1377,
    1381,  1387,  1394,  1395,  1400,  1403,  1406,  1409,  1412,  1413,
    1415,  1416,  1420,  1421,  1423,  1425,  1429,  1431,  1436,  1442,
    1448,  1449,  1452,  1453,  1454,  1462,  1463,  1474,  1476,  1480,
    1482,  1484,  1485,  1488,  1489,  1493,  1495,  1499,  1500,  1507,
    1509,  1510,  1511,  1517,  1518,  1523,  1525,  1527,  1529,  1533,
    1535,  1539,  1540,  1541,  1547,  1549,  1553,  1555,  1557,  1558,
    1562,  1564,  1568,  1569,  1574,  1576,  1577,  1579,  1582,  1584,
    1588,  1593,  1597,  1601,  1605,  1610,  1615,  1619,  1620,  1621,
    1628,  1629,  1631,  1632,  1634,  1636,  1639,  1641,  1643,  1644,
    1646,  1648,  1651,  1653,  1654,  1658,  1659,  1661,  1663,  1666,
    1668,  1671,  1675,  1679,  1683,  1687,  1691,  1695,  1699,  1703,
    1707,  1711,  1715,  1719,  1723,  1727,  1731,  1735,  1739,  1743,
    1747,  1751,  1752,  1759,  1761,  1763,  1767,  1772,  1777,  1780,
    1783,  1786,  1790,  1794,  1799,  1804,  1806,  1808,  1810,  1812,
    1814,  1816,  1818,  1820,  1822,  1824,  1826,  1828,  1830,  1832,
    1834,  1836,  1838,  1840,  1842,  1845,  1847,  1849,  1851,  1853,
    1855,  1857,  1861,  1863,  1865,  1868,  1871,  1879,  1888,  1897,
    1906,  1915,  1918,  1919,  1921,  1926,  1927,  1929,  1932,  1933,
    1938,  1942,  1946,  1950,  1952,  1955,  1957,  1959,  1963,  1966,
    1970,  1973,  1976,  1978,  1982,  1986,  1989,  1993,  1995,  1998,
    2001,  2004,  2006,  2009,  2011,  2013,  2015,  2018,  2022,  2025,
    2029,  2032,  2035,  2039,  2043,  2047,  2048,  2055,  2056,  2063,
    2066,  2068,  2070,  2072,  2074,  2076,  2078,  2080,  2082,  2084,
    2086,  2088,  2091,  2094,  2096,  2099,  2101,  2104,  2108,  2111,
    2113,  2115,  2117,  2119,  2121,  2123,  2125,  2128,  2129,  2131,
    2133,  2139,  2140,  2144,  2145,  2148,  2152,  2153,  2155,  2158,
    2160,  2162,  2164,  2166,  2170,  2174,  2178,  2182,  2183,  2185,
    2186,  2188,  2189,  2191,  2194,  2196,  2198,  2201,  2204,  2208,
    2210,  2214,  2217,  2219,  2222,  2225,  2228,  2231,  2234,  2237,
    2240,  2243,  2246,  2249,  2252,  2255,  2257,  2259,  2262,  2264,
    2266,  2268,  2270,  2272,  2273,  2276,  2278,  2280,  2282,  2284,
    2286,  2287,  2290,  2292,  2294,  2295,  2297,  2299,  2302,  2305,
    2307,  2310,  2313,  2314,  2316,  2318,  2320,  2324,  2326,  2330,
    2331,  2333,  2334,  2339,  2341,  2343,  2345,  2346,  2348,  2351,
    2353,  2355,  2358,  2360,  2364,  2368,  2370,  2372,  2373,  2376,
    2377,  2379,  2385,  2386,  2390,  2394,  2396,  2397,  2400,  2403,
    2406,  2407,  2411,  2415,  2422,  2429,  2431,  2433,  2436,  2439,
    2442,  2444,  2447,  2450,  2452,  2454,  2455,  2457,  2459,  2461,
    2463,  2464,  2466,  2468,  2470,  2472,  2475,  2478,  2480,  2482,
    2484,  2486,  2487,  2489,  2492,  2493,  2495,  2496,  2498,  2499,
    2501,  2503,  2506,  2508,  2511,  2513,  2516,  2519,  2522,  2524,
    2526,  2530,  2533,  2535,  2537,  2539,  2541,  2543,  2547,  2549,
    2551,  2553,  2558,  2561,  2563,  2568,  2569,  2571,  2572,  2575,
    2577,  2581,  2582,  2590,  2591,  2597,  2605,  2606,  2612,  2613,
    2619,  2620,  2626,  2627,  2632,  2633,  2644,  2648,  2653,  2657,
    2661,  2669,  2674,  2678,  2684,  2685,  2689,  2691,  2696,  2697,
    2701,  2702,  2705,  2706,  2708,  2709,  2712,  2715,  2718,  2721,
    2723,  2725,  2727,  2732,  2737,  2738,  2745,  2750,  2751,  2757,
    2758,  2765,  2770,  2774,  2776,  2784,  2788,  2790,  2792,  2793,
    2799,  2800,  2804,  2807,  2808,  2814,  2815,  2816,  2823,  2825,
    2829,  2831,  2833,  2837,  2840,  2844,  2847,  2852,  2853,  2860,
    2861,  2862,  2871,  2876,  2881,  2885,  2889,  2892,  2895,  2902,
    2907,  2913,  2917,  2923,  2925,  2927,  2929,  2931,  2933,  2934,
    2936,  2938,  2941,  2944,  2948,  2952,  2956,  2960,  2961,  2963,
    2964,  2966,  2967,  2969,  2971,  2972,  2975,  2977,  2978,  2980,
    2982,  2984,  2985,  2992,  2996,  3000,  3001,  3003,  3005,  3009,
    3013,  3016,  3019,  3024,  3025,  3029,  3030,  3034,  3035,  3039,
    3040,  3044,  3045,  3047,  3049,  3053,  3055,  3057,  3058,  3061,
    3063,  3067,  3071,  3075,  3077,  3078,  3084,  3085,  3087,  3089,
    3090,  3097,  3098,  3100,  3102,  3105,  3107,  3109,  3111,  3112,
    3118,  3121,  3122,  3128,  3129,  3131,  3133,  3136,  3138,  3140,
    3142,  3144,  3146,  3149,  3150,  3157,  3158,  3160,  3162,  3163,
    3168,  3173,  3177,  3183,  3185,  3189,  3194,  3195,  3202,  3204,
    3206,  3208,  3212,  3215,  3219,  3221,  3223,  3224,  3231,  3233,
    3235,  3237,  3241,  3245,  3250,  3251,  3258,  3259,  3262,  3263,
    3268,  3269,  3272,  3274,  3277,  3282,  3285,  3289,  3292,  3296,
    3297,  3301,  3302,  3303,  3309,  3312,  3314,  3317,  3319,  3321,
    3324,  3327,  3328,  3329,  3346,  3355,  3360,  3364,  3365,  3367,
    3370,  3372,  3374,  3376,  3378,  3379,  3383,  3389,  3393,  3395,
    3397,  3401,  3406,  3407,  3408,  3409,  3412,  3415,  3417,  3419,
    3420,  3423,  3427,  3431,  3435,  3438,  3442,  3447,  3451,  3456,
    3460,  3465,  3467,  3471,  3476,  3480,  3484,  3491,  3493,  3499,
    3506,  3512,  3520,  3527,  3536,  3542,  3549,  3554,  3559,  3565,
    3569,  3574,  3576,  3580,  3584,  3588,  3592,  3596,  3600,  3606,
    3612,  3616,  3620,  3624,  3628,  3632,  3636,  3638,  3640,  3642,
    3644,  3646,  3648,  3650,  3652,  3654,  3656,  3658,  3660,  3662,
    3664,  3666,  3668,  3670,  3672,  3674,  3676,  3678,  3680,  3684,
    3686,  3688,  3690,  3692,  3696,  3699,  3702,  3705,  3708,  3712,
    3716,  3722,  3729,  3734,  3739,  3747,  3750,  3757,  3763,  3770,
    3777,  3782,  3787,  3792,  3797,  3803,  3808,  3815,  3818,  3823,
    3828,  3833,  3844,  3851,  3860,  3867,  3872,  3877,  3884,  3889,
    3894,  3899,  3906,  3911,  3919,  3927,  3935,  3942,  3949,  3956,
    3963,  3967,  3972,  3979,  3988,  3991,  3994,  4003,  4012,  4019,
    4026,  4028,  4035,  4042,  4051,  4060,  4067,  4076,  4083,  4086,
    4095,  4104,  4107,  4110,  4113,  4118,  4123,  4128,  4133,  4137,
    4146,  4153,  4162,  4167,  4174,  4179,  4184,  4189,  4196,  4205,
    4210,  4214,  4221,  4226,  4233,  4239,  4248,  4256,  4267,  4269,
    4276,  4281,  4286,  4291,  4296,  4301,  4308,  4313,  4314,  4320,
    4327,  4330,  4334,  4335,  4340,  4341,  4345,  4346,  4348,  4350,
    4354,  4359,  4364,  4370,  4375,  4380,  4385,  4391,  4396,  4397,
    4398,  4406,  4411,  4417,  4422,  4428,  4433,  4438,  4443,  4448,
    4453,  4459,  4460,  4469,  4470,  4474,  4478,  4480,  4485,  4486,
    4488,  4489,  4492,  4493,  4494,  4499,  4504,  4507,  4508,  4512,
    4515,  4519,  4522,  4524,  4527,  4529,  4532,  4534,  4537,  4540,
    4543,  4544,  4546,  4548,  4552,  4554,  4558,  4560,  4564,  4565,
    4567,  4568,  4571,  4576,  4582,  4584,  4586,  4588,  4590,  4595,
    4597,  4601,  4605,  4609,  4610,  4617,  4618,  4625,  4626,  4635,
    4640,  4641,  4650,  4651,  4662,  4669,  4670,  4679,  4680,  4691,
    4698,  4700,  4703,  4706,  4707,  4709,  4715,  4716,  4722,  4726,
    4732,  4735,  4736,  4737,  4745,  4747,  4748,  4749,  4756,  4757,
    4761,  4762,  4763,  4769,  4770,  4772,  4773,  4775,  4776,  4779,
    4783,  4787,  4789,  4791,  4792,  4800,  4801,  4809,  4811,  4814,
    4815,  4816,  4819,  4820,  4823,  4824,  4826,  4828,  4830,  4832,
    4836,  4838,  4842,  4844,  4846,  4848,  4850,  4852,  4854,  4856,
    4858,  4860,  4862,  4864,  4866,  4868,  4870,  4872,  4874,  4876,
    4878,  4880,  4882,  4884,  4886,  4888,  4890,  4892,  4893,  4895,
    4897,  4898,  4901,  4902,  4904,  4905,  4906,  4910,  4911,  4912,
    4916,  4919,  4920,  4921,  4926,  4931,  4934,  4935,  4937,  4939,
    4943,  4947,  4949,  4952,  4953,  4955,  4956,  4961,  4966,  4969,
    4970,  4972,  4974,  4975,  4977,  4978,  4980,  4983,  4985,  4989,
    4993,  4995,  4997,  4999,  5001,  5003,  5004,  5007,  5009,  5011,
    5013,  5015,  5017,  5019,  5021,  5023,  5025,  5027,  5029,  5031,
    5033,  5035,  5037,  5039,  5041,  5043,  5045,  5047,  5049,  5051,
    5053,  5054,  5055,  5062,  5063,  5065,  5069,  5071,  5072,  5075,
    5079,  5081,  5084,  5086,  5087,  5091,  5092,  5093,  5101,  5104,
    5106,  5107,  5111,  5112,  5122,  5123,  5128,  5129,  5130,  5140,
    5145,  5152,  5157,  5162,  5167,  5168,  5175,  5180,  5185,  5190,
    5196,  5201,  5203,  5207,  5209,  5212,  5214,  5218,  5220,  5221,
    5224,  5225,  5227,  5228,  5230,  5231,  5233,  5235,  5238,  5242,
    5244,  5246,  5247,  5248,  5260,  5261,  5262,  5269,  5270,  5272,
    5274,  5276,  5278,  5280,  5283,  5285,  5287,  5289,  5293,  5298,
    5299,  5303,  5307,  5309,  5312,  5315,  5316,  5320,  5321,  5327,
    5331,  5333,  5337,  5339,  5343,  5345,  5347,  5348,  5350,  5351,
    5356,  5357,  5359,  5363,  5365,  5367,  5369,  5370,  5371,  5378,
    5379,  5380,  5396,  5400,  5402,  5406,  5410,  5412,  5416,  5417,
    5419,  5420,  5423,  5424,  5426,  5427,  5429,  5430,  5433,  5434,
    5439,  5440,  5448,  5449,  5455,  5456,  5463,  5465,  5469,  5472,
    5477,  5478,  5481,  5482,  5485,  5487,  5489,  5491,  5492,  5498,
    5499,  5501,  5502,  5504,  5506,  5510,  5512,  5514,  5517,  5520,
    5523,  5525,  5527,  5529,  5531,  5532,  5536,  5537,  5541,  5544,
    5549,  5554,  5558,  5563,  5568,  5570,  5574,  5578,  5585,  5588,
    5591,  5592,  5599,  5600,  5607,  5613,  5616,  5618,  5624,  5630,
    5633,  5636,  5638,  5643,  5647,  5650,  5652,  5656,  5659,  5662,
    5664,  5668,  5673,  5677,  5681,  5685,  5688,  5691,  5695,  5699,
    5703,  5707,  5711,  5715,  5719,  5723,  5725,  5727,  5729,  5731,
    5733,  5734,  5736,  5737,  5740,  5741,  5743,  5745,  5747,  5748,
    5751,  5752,  5755,  5756,  5759,  5762,  5763,  5768,  5769,  5774,
    5776,  5778,  5780,  5782,  5784,  5786,  5788,  5789,  5791,  5793,
    5797,  5798,  5800,  5802,  5803,  5808,  5809,  5810,  5816,  5818,
    5819,  5823,  5824,  5828,  5832,  5834,  5837,  5840,  5843,  5846,
    5849,  5852,  5855,  5857,  5859,  5861,  5863,  5865,  5867,  5868,
    5870,  5871,  5875,  5879,  5881,  5882,  5886,  5888,  5891,  5892,
    5894,  5895,  5899,  5903,  5906,  5909,  5913,  5914,  5916,  5918,
    5921,  5922,  5923,  5924,  5925,  5948,  5950,  5952,  5953,  5955,
    5956,  5958,  5960,  5961,  5963,  5965,  5966,  5969,  5972,  5974,
    5978,  5983,  5987,  5991,  5992,  5995,  5998,  6000,  6004,  6008,
    6009,  6014,  6015,  6019,  6021,  6023,  6024,  6028,  6031,  6035,
    6037,  6039,  6042,  6043,  6046,  6050,  6052,  6058,  6060,  6062,
    6065,  6068,  6070,  6072,  6074,  6076,  6078,  6081,  6084,  6086,
    6088,  6090,  6092,  6094,  6096,  6098,  6100,  6103,  6106,  6108,
    6110,  6112,  6114,  6116,  6119,  6122,  6125,  6127,  6129,  6133,
    6139,  6141,  6143,  6145,  6147,  6149,  6153,  6158,  6164,  6166,
    6172,  6176,  6179,  6181,  6185,  6188,  6191,  6196,  6198,  6200,
    6202,  6204,  6206,  6208,  6210,  6212,  6214,  6216,  6218,  6220,
    6222,  6224,  6226,  6230,  6233,  6235,  6237,  6239,  6241,  6243,
    6245,  6247,  6249,  6251,  6253,  6255,  6257,  6259,  6261,  6263,
    6265,  6267,  6269,  6271,  6273,  6275,  6277,  6279,  6281,  6283,
    6285,  6287,  6289,  6291,  6293,  6295,  6297,  6299,  6301,  6303,
    6305,  6307,  6309,  6311,  6313,  6315,  6317,  6319,  6321,  6323,
    6325,  6327,  6329,  6331,  6333,  6335,  6337,  6339,  6341,  6343,
    6345,  6347,  6349,  6351,  6353,  6355,  6357,  6359,  6361,  6363,
    6365,  6367,  6369,  6371,  6373,  6375,  6377,  6379,  6381,  6383,
    6385,  6387,  6389,  6391,  6393,  6395,  6397,  6399,  6401,  6403,
    6405,  6407,  6409,  6411,  6413,  6415,  6417,  6419,  6421,  6423,
    6425,  6427,  6429,  6431,  6433,  6435,  6437,  6439,  6441,  6443,
    6445,  6447,  6449,  6451,  6453,  6455,  6457,  6459,  6461,  6463,
    6465,  6467,  6469,  6471,  6473,  6475,  6477,  6479,  6481,  6483,
    6485,  6487,  6489,  6491,  6493,  6495,  6497,  6499,  6501,  6503,
    6505,  6507,  6509,  6511,  6513,  6515,  6517,  6519,  6521,  6523,
    6525,  6527,  6529,  6531,  6533,  6535,  6537,  6539,  6541,  6543,
    6545,  6547,  6549,  6551,  6553,  6555,  6557,  6559,  6561,  6563,
    6565,  6567,  6569,  6571,  6573,  6575,  6577,  6579,  6581,  6583,
    6585,  6587,  6589,  6591,  6593,  6595,  6597,  6599,  6601,  6603,
    6605,  6607,  6609,  6611,  6613,  6615,  6617,  6619,  6621,  6623,
    6625,  6627,  6629,  6631,  6633,  6635,  6637,  6639,  6641,  6643,
    6645,  6647,  6649,  6651,  6653,  6655,  6657,  6659,  6661,  6663,
    6665,  6667,  6669,  6671,  6673,  6675,  6677,  6679,  6681,  6683,
    6685,  6687,  6689,  6691,  6693,  6695,  6697,  6699,  6701,  6703,
    6705,  6707,  6709,  6711,  6713,  6715,  6717,  6719,  6721,  6723,
    6725,  6727,  6729,  6731,  6733,  6735,  6737,  6739,  6741,  6743,
    6745,  6747,  6749,  6751,  6753,  6755,  6757,  6759,  6761,  6763,
    6765,  6767,  6769,  6771,  6773,  6775,  6777,  6779,  6781,  6783,
    6785,  6787,  6789,  6791,  6793,  6795,  6797,  6799,  6801,  6803,
    6805,  6807,  6809,  6811,  6813,  6815,  6817,  6819,  6821,  6823,
    6825,  6827,  6829,  6831,  6833,  6835,  6837,  6839,  6841,  6843,
    6845,  6847,  6849,  6851,  6853,  6855,  6857,  6859,  6861,  6863,
    6865,  6867,  6869,  6871,  6873,  6875,  6877,  6879,  6881,  6883,
    6885,  6887,  6889,  6891,  6893,  6895,  6897,  6899,  6901,  6903,
    6905,  6907,  6909,  6911,  6913,  6915,  6917,  6919,  6921,  6923,
    6925,  6927,  6929,  6931,  6933,  6935,  6937,  6939,  6941,  6943,
    6945,  6947,  6949,  6951,  6953,  6955,  6957,  6959,  6961,  6963,
    6965,  6967,  6969,  6971,  6972,  6976,  6977,  6981,  6982,  6986,
    6989,  6990,  6994,  6995,  6999,  7002,  7003,  7006,  7007,  7010,
    7011,  7016,  7017,  7021,  7023,  7025,  7027,  7029,  7030,  7032,
    7034,  7036,  7037,  7040,  7043,  7046,  7050,  7051,  7056,  7061,
    7068,  7071,  7075,  7079,  7083,  7089,  7091,  7095,  7099,  7101,
    7103,  7107,  7111,  7113,  7117,  7120,  7123,  7126,  7129,  7132,
    7134,  7136,  7141,  7146,  7148,  7150,  7152,  7154,  7156,  7157,
    7163,  7164,  7166,  7169,  7171,  7173,  7175,  7177,  7181,  7185,
    7187,  7189,  7192,  7195,  7196,  7200,  7205,  7209,  7210,  7218,
    7220,  7223,  7225,  7227,  7229,  7231,  7233,  7235,  7236,  7242,
    7244,  7246,  7248,  7250,  7252,  7253,  7258,  7265,  7272,  7279,
    7287,  7293,  7294,  7299,  7308,  7317,  7326,  7333,  7334,  7336,
    7338,  7341,  7342,  7344,  7346,  7350,  7351,  7355,  7356,  7360,
    7361,  7365,  7366,  7370,  7372,  7374,  7376,  7378,  7380,  7382,
    7384,  7386,  7388,  7390,  7392,  7395,  7398,  7400,  7404,  7407,
    7410,  7413,  7416,  7419,  7422,  7425,  7428,  7430,  7432,  7435,
    7436,  7438,  7442,  7444,  7447,  7450,  7453,  7455,  7459,  7463,
    7465,  7467,  7471,  7473,  7477,  7482,  7488,  7493,  7500,  7502,
    7503,  7507,  7511,  7513,  7515,  7516,  7519,  7522,  7525,  7528,
    7529,  7532,  7533,  7537,  7540,  7542,  7545,  7548,  7551,  7554,
    7557,  7558,  7562,  7563,  7565,  7566,  7570,  7573,  7574,  7576,
    7579,  7580,  7582,  7587,  7592,  7598,  7601,  7605,  7606,  7608,
    7609,  7614,  7615,  7617,  7619,  7620,  7622,  7623,  7626,  7629,
    7631,  7632,  7634,  7636,  7639,  7643,  7646,  7647,  7654,  7658,
    7659,  7660,  7661,  7663,  7666,  7668,  7670,  7672,  7674,  7676,
    7678,  7680,  7682,  7684,  7687,  7690,  7694,  7696,  7698,  7700,
    7702,  7704,  7706,  7708,  7710,  7712,  7714,  7716,  7718,  7720,
    7721,  7725,  7727,  7730,  7732,  7735,  7739,  7743,  7747,  7748,
    7752,  7756,  7757,  7765,  7766,  7770,  7772,  7776,  7777,  7781,
    7782,  7786,  7791,  7793,  7797,  7798,  7802,  7803,  7807,  7812,
    7817,  7818,  7819,  7820,  7837,  7846,  7854,  7855,  7856,  7857,
    7858,  7859,  7875,  7876,  7877,  7878,  7879,  7892,  7897,  7902,
    7906,  7911,  7915,  7918,  7920,  7924,  7930,  7932,  7934,  7935,
    7937,  7939,  7940,  7943,  7944,  7945,  7949,  7950,  7953,  7959
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     665,     0,    -1,   156,    -1,    -1,   668,   666,   660,   667,
      -1,   668,   156,    -1,    -1,   156,    -1,   669,    -1,  1561,
      -1,  1050,    -1,  1116,    -1,  1118,    -1,   726,    -1,   681,
      -1,  1119,    -1,  1108,    -1,  1567,    -1,   688,    -1,   670,
      -1,  1373,    -1,  1405,    -1,  1314,    -1,  1316,    -1,   674,
      -1,  1412,    -1,   761,    -1,  1534,    -1,  1524,    -1,   679,
      -1,  1333,    -1,  1635,    -1,  1432,    -1,  1435,    -1,  1515,
      -1,  1124,    -1,  1132,    -1,   880,    -1,  1139,    -1,   672,
      -1,  1428,    -1,  1570,    -1,  1127,    -1,  1111,    -1,  1336,
      -1,  1422,    -1,   760,    -1,  1531,    -1,  1568,    -1,  1569,
      -1,  1151,    -1,  1487,    -1,   753,    -1,  1391,    -1,  1092,
      -1,  1094,    -1,  1384,    -1,  1636,    -1,  1522,    -1,  1361,
      -1,  1434,    -1,  1627,    -1,   671,   409,  1481,    -1,   121,
      -1,   144,    -1,   409,  1481,   195,   673,    -1,  1478,    -1,
     661,  1483,    -1,    -1,   170,  1481,   675,   676,    -1,    -1,
     610,   677,    -1,   677,   656,   678,    -1,   678,    -1,   661,
    1483,    -1,    -1,   214,   680,  1483,    -1,    -1,    56,   309,
     572,   682,   683,    -1,   684,    -1,   683,   656,   684,    -1,
     293,   160,  1477,    -1,   290,   160,  1477,    -1,   310,   160,
    1477,    -1,   296,   160,  1477,    -1,   297,   160,  1295,    -1,
     291,   160,  1295,    -1,   298,   160,  1295,    -1,   292,   160,
    1295,    -1,   307,   160,  1295,    -1,   301,   160,  1477,    -1,
     300,   160,  1477,    -1,   302,   160,  1477,    -1,   303,   160,
    1477,    -1,   306,   160,  1477,    -1,   308,   160,  1295,    -1,
     304,   160,  1477,    -1,   305,   160,  1477,    -1,   311,   160,
    1464,    -1,   228,   160,   654,   685,   655,    -1,   289,   160,
    1295,    -1,   687,    -1,    -1,   686,    -1,   685,   656,   686,
      -1,  1295,    -1,   294,   160,  1477,    -1,   295,   160,  1297,
      -1,   441,   160,  1477,    -1,   442,   160,  1295,    -1,    -1,
      97,   932,   554,   935,  1473,   689,   869,    -1,    -1,    -1,
      97,   484,   935,  1473,   690,   700,   691,   869,    -1,    -1,
      -1,    97,  1023,   232,  1481,  1031,   375,  1473,   692,   654,
    1045,   655,  1517,  1032,   693,  1084,    -1,    -1,    -1,    97,
    1028,   232,  1481,  1030,   375,  1473,   694,   654,  1045,   655,
    1517,  1033,   695,  1084,    -1,    -1,    -1,    97,  1029,   232,
    1481,  1030,   375,  1473,   696,   654,  1045,   655,  1517,  1034,
     697,  1084,    -1,    -1,    97,   108,   935,  1481,   698,   929,
      -1,    -1,    97,   699,  1589,    -1,    97,   607,   719,  1551,
      -1,    97,   280,   208,   833,    -1,    97,   552,   830,    -1,
      97,   703,    -1,    -1,   701,    -1,   702,    -1,   701,   702,
      -1,   333,  1295,    -1,   320,  1295,    -1,   528,   630,  1295,
      -1,   230,    46,  1295,    -1,    48,  1295,    -1,   358,    -1,
     107,    -1,   359,    -1,   488,  1483,   191,   111,   634,  1483,
     380,   654,   704,   655,    -1,   705,    -1,   704,   656,   705,
      -1,   607,  1478,    -1,   217,  1478,    -1,   108,  1478,    -1,
     390,  1478,    -1,   399,  1478,    -1,   504,  1478,    -1,   406,
    1295,    -1,    -1,  1172,   167,   935,   720,   707,   375,   476,
     708,   713,   710,   715,   143,   716,    -1,    -1,   168,  1176,
    1267,   709,   711,   712,    -1,    23,  1176,    -1,    -1,   152,
      -1,   137,   375,   500,    -1,   137,    -1,    -1,   527,  1176,
      -1,    -1,   155,  1176,    -1,    -1,   714,    -1,   375,    81,
     410,    -1,   375,    81,   363,   410,    -1,    -1,    77,  1478,
      -1,    -1,   717,   718,    -1,   778,    -1,   780,    -1,   776,
      -1,   797,    -1,   815,    -1,   817,    -1,   812,    -1,   782,
      -1,   784,    -1,   785,    -1,   786,    -1,   787,    -1,   789,
      -1,    -1,  1481,   662,  1481,    -1,  1481,    -1,    -1,   721,
     723,    -1,    -1,   722,   724,    -1,    77,  1478,    -1,   259,
     523,    -1,   365,   523,    -1,    91,   523,    -1,   427,   523,
     111,    -1,   337,   523,   111,    -1,   725,    -1,   723,    -1,
     134,    -1,  1182,   134,    -1,   523,   480,   127,    -1,   523,
     480,   244,    -1,    -1,    49,   720,   727,   728,    -1,    -1,
     654,   729,   655,    -1,    -1,   730,    -1,   730,   656,  1176,
      -1,  1176,    -1,    -1,   732,    -1,   732,   656,   734,    -1,
     734,    -1,    -1,  1481,   733,   983,    -1,    -1,   736,    -1,
     736,   656,   737,    -1,   737,    -1,   738,   733,  1481,   983,
      -1,    -1,   245,    -1,   389,    -1,   236,    -1,    -1,   739,
     775,   660,    -1,   775,   660,    -1,   740,   775,   660,    -1,
      -1,   741,   742,   660,    -1,    -1,   124,   772,   743,   983,
     773,    -1,   124,  1481,    84,   192,   749,    -1,    -1,   124,
     746,   211,   192,   744,   747,   775,    -1,    -1,   124,  1481,
     104,   192,   745,  1151,    -1,   173,    -1,    93,    -1,   748,
      -1,   747,   656,   748,    -1,   752,    -1,  1295,    -1,   750,
      -1,   511,   751,  1479,    -1,    -1,   615,    -1,   749,    -1,
    1481,    -1,   512,    -1,  1182,   194,    -1,   510,    -1,   497,
     754,   756,    -1,  1481,    -1,   750,    -1,    -1,   754,    -1,
      -1,   490,   757,    -1,   759,   160,   758,    -1,   757,   656,
     759,   160,   758,    -1,  1463,    -1,  1203,    -1,  1469,    -1,
      64,    -1,   539,    -1,    88,    -1,    90,    -1,    89,    -1,
      54,    -1,   477,    -1,   556,    -1,    75,    -1,   105,    -1,
     327,    -1,   345,    -1,   456,   755,   756,    -1,   204,   762,
     135,   763,    -1,    -1,   101,    -1,   764,    -1,    84,   768,
     769,    -1,   765,    -1,   764,   656,   765,    -1,   766,   160,
     767,    -1,  1481,    -1,   661,  1483,    -1,   370,    -1,   473,
      -1,   758,    -1,   770,    -1,   769,   656,   770,    -1,   766,
     160,   771,    -1,    64,    -1,   539,    -1,    88,    -1,    90,
      -1,    89,    -1,    54,    -1,   477,    -1,   556,    -1,    75,
      -1,   105,    -1,   327,    -1,   345,    -1,   461,    -1,  1481,
      -1,   772,   656,  1481,    -1,    -1,    -1,   125,   774,  1176,
      -1,   778,    -1,   780,    -1,   776,    -1,   797,    -1,   815,
      -1,   817,    -1,   812,    -1,   782,    -1,   784,    -1,   785,
      -1,   786,    -1,   787,    -1,   789,    -1,    -1,   226,   777,
     792,   154,   226,    -1,    -1,   779,   669,    -1,    -1,   463,
     781,  1176,    -1,    -1,   783,   821,    -1,   264,  1482,    -1,
     253,  1482,    -1,   378,  1481,    -1,    -1,   183,   790,  1481,
     242,   788,   791,    -1,    66,  1481,    -1,    -1,   356,   195,
      -1,   195,    -1,  1481,    -1,   791,   656,  1481,    -1,    -1,
      -1,    -1,   793,  1176,   794,   564,   740,   795,   796,    -1,
      -1,   151,   792,    -1,   150,   740,    -1,   798,    -1,   801,
      -1,    -1,    -1,    52,   799,  1176,   800,   803,   811,   154,
      52,    -1,    -1,    52,   802,   804,   811,   154,    52,    -1,
     805,    -1,   803,   805,    -1,   808,    -1,   804,   808,    -1,
      -1,    -1,   627,   806,  1176,   807,   564,   740,    -1,    -1,
      -1,   627,   809,  1176,   810,   564,   740,    -1,    -1,   150,
     740,    -1,    -1,  1482,   663,   813,   821,   814,    -1,    -1,
    1482,    -1,    -1,  1482,   663,   816,   819,   814,    -1,    -1,
     818,   819,    -1,    -1,    30,   820,   741,   739,   154,    -1,
     286,   740,   154,   286,    -1,    -1,    -1,   629,   822,  1176,
     823,   143,   740,   154,   629,    -1,    -1,    -1,   451,   740,
     603,   824,  1176,   825,   154,   451,    -1,    29,    -1,     8,
      -1,   238,    -1,   604,    -1,   130,    -1,   855,   857,    -1,
     855,    56,   852,   836,    -1,   855,     6,   852,   831,   840,
      -1,    -1,   609,   280,   208,  1481,    -1,   855,     6,   852,
     843,    -1,   855,   144,   852,   843,    -1,   856,   835,   846,
      -1,   856,   835,   849,    -1,     6,   853,    -1,     6,   854,
      -1,    -1,   837,   838,    -1,   839,    -1,   838,   839,    -1,
     838,   656,   839,    -1,   858,    -1,   859,    -1,   860,    -1,
      -1,   841,    -1,   842,    -1,   841,   842,    -1,   841,   656,
     842,    -1,   858,    -1,   859,    -1,   860,    -1,   861,    -1,
     864,    -1,   866,    -1,   867,    -1,   865,    -1,    -1,   844,
      -1,   845,    -1,   844,   845,    -1,   844,   656,   845,    -1,
     858,    -1,   859,    -1,   860,    -1,   866,    -1,   867,    -1,
      -1,   847,    -1,   848,    -1,   847,   848,    -1,   847,   656,
     848,    -1,   858,    -1,   862,    -1,   863,    -1,   864,    -1,
     866,    -1,   867,    -1,   865,    -1,    -1,   850,    -1,   851,
      -1,   850,   851,    -1,   850,   656,   851,    -1,   858,    -1,
     866,    -1,   867,    -1,   110,  1478,    -1,   593,  1478,    -1,
     434,  1478,    -1,  1481,    -1,  1481,    -1,   428,    -1,   430,
      -1,   363,     4,    -1,   234,  1353,   868,    -1,    24,  1353,
     868,    -1,   316,  1353,   868,    -1,   178,  1353,   868,    -1,
     594,  1353,   868,    -1,   435,  1353,   868,    -1,   360,  1353,
    1296,    -1,    77,  1353,  1478,    -1,  1398,   158,  1353,   943,
      -1,   623,    -1,   366,    -1,  1298,    -1,  1476,    -1,   654,
     870,    -1,   936,   875,   872,    -1,   269,  1473,    -1,   654,
     269,  1473,   655,    -1,   949,   655,   936,   875,   872,    -1,
      -1,   875,   925,   655,   871,  1574,    -1,    -1,    -1,  1443,
     928,   925,   873,  1571,    -1,    -1,  1443,   928,   654,   925,
     655,   874,  1574,    -1,   876,    -1,    -1,   877,    -1,    -1,
     396,   879,   878,   882,    -1,    -1,    -1,   396,   881,   882,
      -1,    46,   883,   893,   894,   901,    -1,   885,   257,   886,
     654,   887,   655,    -1,    -1,   885,   212,   884,   891,    -1,
     425,   891,    -1,   425,   890,    -1,   274,   891,    -1,   274,
     890,    -1,    -1,   271,    -1,    -1,    11,   160,  1296,    -1,
      -1,   888,    -1,   889,    -1,   888,   656,   889,    -1,  1481,
      -1,    72,   654,   887,   655,    -1,   654,  1172,   899,  1173,
     655,    -1,   654,  1172,   899,  1173,   655,    -1,    -1,   397,
    1296,    -1,    -1,    -1,   543,    46,   885,   212,   892,   895,
     900,    -1,    -1,   543,    46,   885,   257,   886,   654,   897,
     655,   896,   900,    -1,   898,    -1,   897,   656,   898,    -1,
    1481,    -1,  1179,    -1,    -1,   542,  1296,    -1,    -1,   654,
     902,   655,    -1,   903,    -1,   902,   656,   903,    -1,    -1,
     396,   904,   905,   906,   922,   917,    -1,  1481,    -1,    -1,
      -1,   614,   266,   563,   907,   909,    -1,    -1,   614,   245,
     908,   910,    -1,   320,    -1,   912,    -1,   912,    -1,   654,
     911,   655,    -1,   912,    -1,   911,   656,   912,    -1,    -1,
      -1,   654,   913,   915,   914,   655,    -1,   916,    -1,   915,
     656,   916,    -1,   320,    -1,  1179,    -1,    -1,   654,   918,
     655,    -1,   919,    -1,   918,   656,   919,    -1,    -1,   543,
     920,   921,   922,    -1,  1483,    -1,    -1,   923,    -1,   923,
     924,    -1,   924,    -1,   552,  1353,  1483,    -1,  1398,   158,
    1353,   943,    -1,   360,  1353,  1296,    -1,   315,  1353,  1298,
      -1,   334,  1353,  1298,    -1,   111,   136,  1353,  1478,    -1,
     232,   136,  1353,  1478,    -1,    77,  1353,  1478,    -1,    -1,
      -1,   481,   926,  1166,  1170,   927,   947,    -1,    -1,    19,
      -1,    -1,   930,    -1,   931,    -1,   930,   931,    -1,   942,
      -1,   941,    -1,    -1,   933,    -1,   934,    -1,   934,   933,
      -1,   558,    -1,    -1,   226,  1182,   172,    -1,    -1,   938,
      -1,   939,    -1,   939,   937,    -1,   939,    -1,   939,   938,
      -1,   939,   656,   938,    -1,   158,  1353,   943,    -1,   315,
    1353,  1297,    -1,   334,  1353,  1297,    -1,    26,  1353,  1295,
      -1,   399,  1353,  1478,    -1,    77,  1353,  1478,    -1,    25,
    1353,  1297,    -1,   391,  1353,  1295,    -1,   391,  1353,   125,
      -1,   529,  1353,  1295,    -1,   529,  1353,   125,    -1,   530,
    1353,  1295,    -1,   530,  1353,   125,    -1,   531,  1353,  1295,
      -1,   531,  1353,   125,    -1,    60,  1353,  1295,    -1,   555,
    1353,  1295,    -1,   129,  1353,  1295,    -1,   471,  1353,   945,
      -1,    -1,   598,  1353,   940,   654,  1421,   655,    -1,   941,
      -1,   942,    -1,   239,  1353,   946,    -1,   111,   136,  1353,
    1478,    -1,   232,   136,  1353,  1478,    -1,   552,  1481,    -1,
     536,   139,    -1,   536,   325,    -1,    85,  1353,  1478,    -1,
     256,  1353,  1295,    -1,   995,   986,  1353,   988,    -1,   995,
      70,  1353,   994,    -1,  1483,    -1,  1483,    -1,   125,    -1,
     186,    -1,   148,    -1,    82,    -1,   436,    -1,    80,    -1,
     573,    -1,   574,    -1,   575,    -1,   576,    -1,   577,    -1,
     578,    -1,    76,    -1,   365,    -1,   185,    -1,   260,    -1,
    1290,    -1,  1165,  1169,    -1,   538,    -1,   431,    -1,   123,
      -1,   243,    -1,   950,    -1,   951,    -1,   950,   656,   951,
      -1,   952,    -1,   953,    -1,   958,   954,    -1,   958,  1012,
      -1,  1018,  1047,  1031,   654,  1045,   655,  1032,    -1,  1028,
    1021,  1047,  1030,   654,  1045,   655,  1033,    -1,  1029,  1021,
    1047,  1030,   654,  1045,   655,  1034,    -1,   956,  1019,  1047,
    1031,   654,  1045,   655,  1032,    -1,   956,   191,   257,  1047,
     654,  1045,   655,  1012,    -1,   956,   955,    -1,    -1,   955,
      -1,    61,   654,  1176,   655,    -1,    -1,   957,    -1,    87,
    1047,    -1,    -1,  1472,   959,   960,   980,    -1,   968,   978,
     974,    -1,   969,   979,   974,    -1,   188,   970,   974,    -1,
      38,    -1,    38,   977,    -1,    43,    -1,    42,    -1,   964,
     977,   998,    -1,   964,   998,    -1,   965,   977,   999,    -1,
     965,   999,    -1,    33,   977,    -1,    33,    -1,   966,   977,
     998,    -1,   967,   977,   999,    -1,   616,   977,    -1,   641,
     978,   974,    -1,   115,    -1,   568,   972,    -1,   565,   972,
      -1,   112,   972,    -1,   569,    -1,    40,   978,    -1,   963,
      -1,   321,    -1,   282,    -1,   285,   616,    -1,   285,   966,
     998,    -1,   571,   998,    -1,   562,   978,   998,    -1,   323,
     998,    -1,   283,   998,    -1,   123,   970,   974,    -1,   371,
     970,   974,    -1,   186,   970,   974,    -1,    -1,   159,   961,
     654,  1049,   655,   998,    -1,    -1,   490,   962,   654,  1049,
     655,   998,    -1,   285,   998,    -1,   486,    -1,   202,    -1,
     201,    -1,   404,    -1,   342,    -1,   273,    -1,   341,    -1,
     405,    -1,   343,    -1,    59,    -1,   351,    -1,   348,    59,
      -1,   964,   620,    -1,   617,    -1,   348,   617,    -1,   372,
      -1,   351,   617,    -1,   348,    59,   620,    -1,   351,   620,
      -1,   243,    -1,   570,    -1,   502,    -1,   322,    -1,    32,
      -1,   431,    -1,   142,    -1,   142,   408,    -1,    -1,   977,
      -1,   971,    -1,   654,   369,   656,   369,   655,    -1,    -1,
     654,   369,   655,    -1,    -1,   654,   655,    -1,   654,   369,
     655,    -1,    -1,   975,    -1,   975,   976,    -1,   976,    -1,
     498,    -1,   602,    -1,   642,    -1,   654,   284,   655,    -1,
     654,   589,   655,    -1,   654,   122,   655,    -1,   654,   369,
     655,    -1,    -1,   977,    -1,    -1,   971,    -1,    -1,   981,
      -1,   981,   982,    -1,   982,    -1,   368,    -1,  1182,   368,
      -1,   125,   985,    -1,   375,   604,   984,    -1,    25,    -1,
     486,   125,   615,    -1,  1011,   257,    -1,  1024,    -1,  1024,
     257,    -1,    77,  1478,    -1,    70,   992,    -1,    74,   125,
      -1,    74,   186,    -1,    74,   148,    -1,    74,    82,    -1,
     536,   125,    -1,   536,   139,    -1,   536,   325,    -1,   960,
     993,    -1,   364,   973,    -1,   984,    -1,  1462,    -1,    59,
     490,    -1,    58,    -1,  1483,    -1,    33,    -1,   987,    -1,
     125,    -1,    -1,   986,   988,    -1,  1483,    -1,    33,    -1,
     990,    -1,   125,    -1,  1483,    -1,    -1,    70,   994,    -1,
     992,    -1,   125,    -1,    -1,   125,    -1,    21,    -1,    33,
      21,    -1,    21,    33,    -1,   596,    -1,   596,    33,    -1,
      33,   596,    -1,    -1,   996,    -1,   997,    -1,    47,    -1,
     986,   987,   999,    -1,    33,    -1,    33,   986,   987,    -1,
      -1,    33,    -1,    -1,   654,  1296,  1001,   655,    -1,    20,
      -1,   131,    -1,   464,    -1,    -1,  1002,    -1,  1002,  1003,
      -1,  1003,    -1,  1296,    -1,  1005,  1004,    -1,  1006,    -1,
    1007,   656,  1006,    -1,  1005,   647,  1005,    -1,  1007,    -1,
    1008,    -1,    -1,   267,  1009,    -1,    -1,   412,    -1,   437,
    1473,  1013,  1015,  1016,    -1,    -1,   654,  1014,   655,    -1,
    1014,   656,  1481,    -1,  1481,    -1,    -1,   312,   196,    -1,
     312,   395,    -1,   312,   499,    -1,    -1,   375,   604,  1017,
      -1,   375,   130,  1017,    -1,   375,   604,  1017,   375,   130,
    1017,    -1,   375,   130,  1017,   375,   604,  1017,    -1,   459,
      -1,    50,    -1,   490,   368,    -1,   365,     5,    -1,   490,
     125,    -1,  1020,    -1,   412,   257,    -1,  1024,  1021,    -1,
     257,    -1,   232,    -1,    -1,  1020,    -1,   255,    -1,   232,
      -1,   231,    -1,    -1,  1024,    -1,  1027,    -1,  1025,    -1,
    1026,    -1,  1026,  1027,    -1,  1027,  1026,    -1,   599,    -1,
      67,    -1,   197,    -1,   508,    -1,    -1,  1030,    -1,  1030,
    1038,    -1,    -1,  1035,    -1,    -1,  1037,    -1,    -1,  1036,
      -1,  1041,    -1,  1035,  1041,    -1,  1042,    -1,  1036,  1042,
      -1,  1043,    -1,  1037,  1043,    -1,   610,  1044,    -1,   587,
    1044,    -1,   644,    -1,   643,    -1,   256,  1353,  1295,    -1,
      77,  1478,    -1,  1039,    -1,  1040,    -1,  1038,    -1,  1040,
      -1,  1040,    -1,   630,   394,  1476,    -1,    45,    -1,   474,
      -1,   212,    -1,  1045,   656,  1046,  1288,    -1,  1046,  1288,
      -1,  1481,    -1,  1481,   654,   369,   655,    -1,    -1,  1472,
      -1,    -1,   662,  1481,    -1,  1460,    -1,  1049,   656,  1460,
      -1,    -1,    13,  1088,   554,  1473,  1517,  1051,  1063,    -1,
      -1,    13,   108,  1062,  1052,   930,    -1,    13,   108,  1481,
     605,   111,   136,   347,    -1,    -1,    13,   414,   720,  1053,
     721,    -1,    -1,    13,   198,   720,  1054,   721,    -1,    -1,
      13,  1597,  1592,  1055,  1599,    -1,    -1,    13,  1592,  1056,
    1599,    -1,    -1,    13,  1592,   167,   720,  1057,  1059,  1060,
     710,   715,  1061,    -1,    13,   552,   832,    -1,    13,   280,
     208,   834,    -1,    13,   552,   829,    -1,    13,   552,   828,
      -1,    13,   488,  1483,   380,   654,   704,   655,    -1,    13,
     607,   719,  1058,    -1,  1484,   399,   175,    -1,  1058,   656,
    1484,   399,   175,    -1,    -1,   375,   476,   708,    -1,   714,
      -1,   375,   476,   708,   714,    -1,    -1,   447,   572,   720,
      -1,    -1,   143,   716,    -1,    -1,  1481,    -1,    -1,   138,
     552,    -1,   229,   552,    -1,  1078,   876,    -1,  1078,  1067,
      -1,  1067,    -1,   877,    -1,  1069,    -1,   144,   396,  1328,
    1076,    -1,   432,   396,  1126,  1068,    -1,    -1,   379,   396,
    1126,  1068,  1064,  1126,    -1,    15,   396,  1126,  1068,    -1,
      -1,    61,   396,  1068,  1065,  1121,    -1,    -1,   449,   396,
    1126,  1068,  1066,  1113,    -1,    68,   396,  1126,  1296,    -1,
     585,   396,  1068,    -1,  1072,    -1,   169,   396,  1077,   630,
     554,  1473,   879,    -1,   446,   398,   879,    -1,    12,    -1,
    1076,    -1,    -1,     6,   396,  1126,  1070,  1071,    -1,    -1,
     654,   902,   655,    -1,   397,  1296,    -1,    -1,   448,   396,
    1126,  1073,  1074,    -1,    -1,    -1,  1076,  1075,   242,   654,
     902,   655,    -1,  1077,    -1,  1076,   656,  1077,    -1,  1481,
      -1,  1080,    -1,  1078,   656,  1080,    -1,     6,  1087,    -1,
    1079,   952,  1090,    -1,     6,   953,    -1,  1079,   654,   949,
     655,    -1,    -1,    56,  1087,  1472,  1081,   958,  1090,    -1,
      -1,    -1,   338,  1087,  1472,  1082,   960,   980,  1083,  1090,
      -1,   144,  1087,  1472,  1089,    -1,   144,   191,   257,  1472,
      -1,   144,   412,   257,    -1,   144,  1020,  1472,    -1,   137,
     255,    -1,   152,   255,    -1,    13,  1087,  1472,   490,   125,
    1462,    -1,    13,   232,  1481,  1039,    -1,    13,  1087,  1472,
     144,   125,    -1,   447,  1091,  1473,    -1,    94,   572,   986,
     988,   993,    -1,   937,    -1,   190,    -1,  1281,    -1,  1085,
      -1,  1086,    -1,    -1,  1086,    -1,  1085,    -1,  1086,  1085,
      -1,  1085,  1086,    -1,    11,  1353,   125,    -1,    11,  1353,
    1481,    -1,   279,  1353,   125,    -1,   279,  1353,  1481,    -1,
      -1,    73,    -1,    -1,   227,    -1,    -1,   459,    -1,    50,
      -1,    -1,     8,  1481,    -1,   185,    -1,    -1,   572,    -1,
     160,    -1,    19,    -1,    -1,   528,   500,  1103,  1093,  1106,
    1098,    -1,   535,   500,  1103,    -1,   528,   580,  1095,    -1,
      -1,  1096,    -1,  1097,    -1,  1096,   656,  1097,    -1,   630,
      86,   503,    -1,   429,   377,    -1,   429,   635,    -1,  1099,
    1100,  1101,  1102,    -1,    -1,   607,   160,  1478,    -1,    -1,
     399,   160,  1478,    -1,    -1,   126,   160,  1478,    -1,    -1,
     401,   160,  1478,    -1,    -1,  1104,    -1,  1105,    -1,  1104,
     656,  1105,    -1,   524,    -1,   443,    -1,    -1,   603,  1107,
      -1,   687,    -1,  1107,   656,   687,    -1,   515,   160,  1478,
      -1,   513,   160,  1478,    -1,   514,    -1,    -1,    60,  1518,
    1109,  1322,  1110,    -1,    -1,   424,    -1,   177,    -1,    -1,
     449,  1126,  1518,  1112,  1322,  1113,    -1,    -1,  1114,    -1,
    1115,    -1,  1115,  1114,    -1,   424,    -1,   177,    -1,   608,
      -1,    -1,    15,  1126,  1518,  1117,  1322,    -1,    34,  1478,
      -1,    -1,    61,  1518,  1120,  1322,  1121,    -1,    -1,  1122,
      -1,  1123,    -1,  1123,  1122,    -1,   424,    -1,   181,    -1,
     324,    -1,   177,    -1,    57,    -1,   192,   605,    -1,    -1,
     379,  1126,  1518,  1125,  1322,  1517,    -1,    -1,   367,    -1,
     276,    -1,    -1,   447,  1518,  1128,  1130,    -1,   447,   607,
     719,  1129,    -1,  1484,   572,  1484,    -1,  1129,   656,  1484,
     572,  1484,    -1,  1131,    -1,  1130,   656,  1131,    -1,  1473,
    1517,   572,  1473,    -1,    -1,    48,   232,  1133,  1134,   245,
    1138,    -1,  1135,    -1,  1137,    -1,  1136,    -1,  1135,   656,
    1136,    -1,  1473,  1147,    -1,  1473,  1145,  1147,    -1,  1481,
      -1,   125,    -1,    -1,   275,   232,   242,    48,  1140,  1141,
      -1,  1144,    -1,  1142,    -1,  1143,    -1,  1142,   656,  1143,
      -1,  1473,  1147,  1150,    -1,  1473,  1145,  1147,  1150,    -1,
      -1,   396,   879,  1146,   654,  1068,   655,    -1,    -1,  1148,
    1149,    -1,    -1,  1020,   654,  1263,   655,    -1,    -1,   227,
     263,    -1,  1152,    -1,   481,  1155,    -1,   654,  1153,   655,
    1574,    -1,   481,  1157,    -1,   654,  1153,   655,    -1,   481,
    1242,    -1,   654,  1154,   655,    -1,    -1,  1157,  1156,  1571,
      -1,    -1,    -1,  1158,  1166,  1170,  1159,  1160,    -1,  1161,
    1169,    -1,  1162,    -1,  1284,  1290,    -1,  1309,    -1,  1165,
      -1,  1309,  1165,    -1,  1165,  1309,    -1,    -1,    -1,   195,
     604,  1163,  1368,  1370,  1371,  1369,  1372,  1088,  1473,   490,
    1364,  1164,  1273,  1284,  1294,    -1,   195,  1222,  1273,  1278,
    1275,  1284,  1290,  1301,    -1,   195,   145,  1273,  1290,    -1,
     192,  1473,  1271,    -1,    -1,  1167,    -1,  1167,  1168,    -1,
    1168,    -1,  1588,    -1,   521,    -1,   518,    -1,    -1,   192,
     604,  1517,    -1,   279,   245,   492,   336,  1517,    -1,  1170,
     656,  1171,    -1,  1171,    -1,   649,    -1,  1172,  1467,  1173,
      -1,  1172,  1176,  1173,  1174,    -1,    -1,    -1,    -1,    19,
    1481,    -1,    19,  1478,    -1,  1481,    -1,  1478,    -1,    -1,
     654,   655,    -1,  1176,  1180,  1176,    -1,  1176,   639,  1176,
      -1,  1176,  1181,  1176,    -1,   363,  1176,    -1,  1177,   250,
     584,    -1,  1177,   250,  1182,   584,    -1,  1177,   250,   180,
      -1,  1177,   250,  1182,   180,    -1,  1177,   250,   600,    -1,
    1177,   250,  1182,   600,    -1,  1177,    -1,  1177,   250,   368,
      -1,  1177,   250,  1182,   368,    -1,  1177,   161,  1178,    -1,
    1177,  1184,  1178,    -1,  1177,  1184,  1185,   654,  1583,   655,
      -1,  1178,    -1,  1179,   245,   654,  1583,   655,    -1,  1179,
    1182,   245,   654,  1583,   655,    -1,  1179,   245,   654,  1176,
     655,    -1,  1179,   245,   654,  1176,   656,  1215,   655,    -1,
    1179,  1182,   245,   654,  1176,   655,    -1,  1179,  1182,   245,
     654,  1176,   656,  1215,   655,    -1,  1179,    31,  1179,    17,
    1178,    -1,  1179,  1182,    31,  1179,    17,  1178,    -1,  1179,
     506,   269,  1179,    -1,  1179,   269,  1186,  1277,    -1,  1179,
    1182,   269,  1186,  1277,    -1,  1179,   438,  1179,    -1,  1179,
    1182,   438,  1179,    -1,  1179,    -1,  1179,   645,  1179,    -1,
    1179,   646,  1179,    -1,  1179,   493,  1179,    -1,  1179,   494,
    1179,    -1,  1179,   648,  1179,    -1,  1179,   647,  1179,    -1,
    1179,   648,   241,  1176,  1267,    -1,  1179,   647,   241,  1176,
    1267,    -1,  1179,   649,  1179,    -1,  1179,   650,  1179,    -1,
    1179,   651,  1179,    -1,  1179,   141,  1179,    -1,  1179,   339,
    1179,    -1,  1179,   652,  1179,    -1,  1186,    -1,   386,    -1,
     383,    -1,    17,    -1,    16,    -1,   363,    -1,   362,    -1,
     657,    -1,   362,    -1,   160,    -1,   199,    -1,   210,    -1,
     261,    -1,   288,    -1,   353,    -1,    12,    -1,    18,    -1,
    1469,    -1,  1187,    -1,  1188,    -1,  1191,    -1,  1189,    -1,
    1186,    70,  1483,    -1,  1463,    -1,  1461,    -1,  1203,    -1,
    1199,    -1,  1186,   385,  1186,    -1,   648,  1186,    -1,   647,
    1186,    -1,   653,  1186,    -1,  1183,  1186,    -1,   654,  1583,
     655,    -1,   654,  1176,   655,    -1,   654,  1176,   656,  1215,
     655,    -1,   472,   654,  1176,   656,  1215,   655,    -1,   172,
     654,  1583,   655,    -1,   658,  1481,  1176,   659,    -1,   312,
    1216,     9,   654,  1179,  1193,   655,    -1,    33,  1186,    -1,
      53,   654,  1176,    19,  1213,   655,    -1,    52,  1218,  1220,
    1219,   154,    -1,    94,   654,  1176,   656,  1213,   655,    -1,
      94,   654,  1176,   610,   987,   655,    -1,   357,   654,  1473,
     655,    -1,   103,   654,  1473,   655,    -1,   125,   654,  1469,
     655,    -1,   614,   654,  1470,   655,    -1,   241,  1176,  1267,
     648,  1176,    -1,    59,   654,  1215,   655,    -1,    59,   654,
    1215,   610,   987,   655,    -1,   102,  1175,    -1,   115,   654,
    1176,   655,    -1,   120,   654,  1176,   655,    -1,   222,   654,
    1176,   655,    -1,   238,   654,  1176,   656,  1176,   656,  1176,
     656,  1176,   655,    -1,   241,   654,  1176,   656,  1176,   655,
      -1,   241,   654,  1176,   656,  1176,   656,  1215,   655,    -1,
     265,   654,  1176,   656,  1176,   655,    -1,   332,   654,  1176,
     655,    -1,   340,   654,  1176,   655,    -1,   466,   654,  1176,
     656,  1176,   655,    -1,   479,   654,  1176,   655,    -1,   568,
     654,  1176,   655,    -1,   565,   654,  1176,   655,    -1,   565,
     654,  1176,   656,  1176,   655,    -1,   583,   654,  1176,   655,
      -1,   583,   654,   262,  1176,   195,  1176,   655,    -1,   583,
     654,   579,  1176,   195,  1176,   655,    -1,   583,   654,    44,
    1176,   195,  1176,   655,    -1,   583,   654,   262,   195,  1176,
     655,    -1,   583,   654,   579,   195,  1176,   655,    -1,   583,
     654,    44,   195,  1176,   655,    -1,   583,   654,  1176,   195,
    1176,   655,    -1,   607,   654,   655,    -1,   641,   654,  1176,
     655,    -1,     7,   654,  1176,   656,  1176,   655,    -1,     7,
     654,  1176,   656,   241,  1176,  1267,   655,    -1,   100,  1175,
      -1,   106,   973,    -1,   113,   654,  1176,   656,   241,  1176,
    1267,   655,    -1,   114,   654,  1176,   656,   241,  1176,  1267,
     655,    -1,   179,   654,  1267,   195,  1176,   655,    -1,   203,
     654,  1269,   656,  1176,   655,    -1,   984,    -1,   407,   654,
    1179,   245,  1176,   655,    -1,   540,   654,  1176,   656,  1176,
     655,    -1,   540,   654,  1176,   656,   241,  1176,  1267,   655,
      -1,   544,   654,  1176,   656,  1176,   656,  1176,   655,    -1,
     544,   654,  1176,   656,  1176,   655,    -1,   544,   654,  1176,
     195,  1176,   192,  1176,   655,    -1,   544,   654,  1176,   195,
    1176,   655,    -1,   550,   973,    -1,   566,   654,  1268,   656,
    1176,   656,  1176,   655,    -1,   567,   654,  1268,   656,  1176,
     656,  1176,   655,    -1,   611,  1175,    -1,   613,   973,    -1,
     612,   973,    -1,    21,   654,  1176,   655,    -1,    58,   654,
    1176,   655,    -1,    68,   654,  1215,   655,    -1,    71,   654,
    1176,   655,    -1,   108,   654,   655,    -1,   226,   654,  1176,
     656,  1176,   656,  1176,   655,    -1,   193,   654,  1176,   656,
    1176,   655,    -1,   193,   654,  1176,   656,  1176,   656,  1176,
     655,    -1,   328,   654,  1176,   655,    -1,   339,   654,  1176,
     656,  1176,   655,    -1,   374,   654,  1176,   655,    -1,   399,
     654,  1176,   655,    -1,   421,   654,  1176,   655,    -1,   451,
     654,  1176,   656,  1176,   655,    -1,   452,   654,  1176,   656,
    1176,   656,  1176,   655,    -1,   464,   654,  1176,   655,    -1,
     473,   654,   655,    -1,   585,   654,  1176,   656,  1176,   655,
      -1,   625,   654,  1176,   655,    -1,   625,   654,  1176,   656,
    1176,   655,    -1,   626,   654,  1176,  1010,   655,    -1,   626,
     654,  1176,    19,    59,  1000,  1010,   655,    -1,   626,   654,
    1176,    19,    33,  1000,   655,    -1,   626,   654,  1176,   656,
    1295,   656,  1295,   656,  1295,   655,    -1,  1190,    -1,    91,
     654,  1176,   656,  1176,   655,    -1,   201,   654,  1215,   655,
      -1,   273,   654,  1215,   655,    -1,   341,   654,  1215,   655,
      -1,   342,   654,  1215,   655,    -1,   343,   654,  1215,   655,
      -1,   404,   654,  1176,   656,  1176,   655,    -1,   405,   654,
    1215,   655,    -1,    -1,  1476,   654,  1192,  1196,   655,    -1,
    1481,   662,  1481,   654,  1214,   655,    -1,  1194,  1195,    -1,
     245,    42,   336,    -1,    -1,   245,   349,   259,   336,    -1,
      -1,   630,   422,   174,    -1,    -1,  1197,    -1,  1198,    -1,
    1197,   656,  1198,    -1,  1172,  1176,  1173,  1174,    -1,    27,
     654,  1211,   655,    -1,    27,   654,   140,  1211,   655,    -1,
      36,   654,  1211,   655,    -1,    37,   654,  1211,   655,    -1,
      39,   654,  1211,   655,    -1,    95,   654,  1272,   649,   655,
      -1,    95,   654,  1211,   655,    -1,    -1,    -1,    95,   654,
     140,  1200,  1215,  1201,   655,    -1,   335,   654,  1211,   655,
      -1,   335,   654,   140,  1211,   655,    -1,   317,   654,  1211,
     655,    -1,   317,   654,   140,  1211,   655,    -1,   534,   654,
    1211,   655,    -1,   619,   654,  1211,   655,    -1,   533,   654,
    1211,   655,    -1,   621,   654,  1211,   655,    -1,   545,   654,
    1211,   655,    -1,   545,   654,   140,  1211,   655,    -1,    -1,
     209,   654,  1206,  1202,  1215,  1208,  1207,   655,    -1,    -1,
     661,  1204,  1205,    -1,  1483,   491,  1176,    -1,  1483,    -1,
     661,  1503,  1483,  1048,    -1,    -1,   140,    -1,    -1,   483,
    1460,    -1,    -1,    -1,   384,    46,  1209,  1210,    -1,  1210,
     656,  1468,  1288,    -1,  1468,  1288,    -1,    -1,  1272,  1212,
    1176,    -1,    33,   978,    -1,    59,   978,   998,    -1,   351,
     978,    -1,   498,    -1,   498,   243,    -1,   602,    -1,   602,
     243,    -1,   115,    -1,   568,   972,    -1,   112,   972,    -1,
     123,   970,    -1,    -1,  1215,    -1,  1176,    -1,  1215,   656,
    1176,    -1,  1217,    -1,   654,  1217,   655,    -1,  1469,    -1,
    1217,   656,  1469,    -1,    -1,  1176,    -1,    -1,   150,  1176,
      -1,   627,  1176,   564,  1176,    -1,  1220,   627,  1176,   564,
    1176,    -1,  1236,    -1,  1225,    -1,  1224,    -1,  1221,    -1,
     658,  1481,  1221,   659,    -1,  1223,    -1,  1224,   656,  1223,
      -1,  1221,  1233,  1221,    -1,  1221,   537,  1236,    -1,    -1,
    1221,  1233,  1221,   375,  1226,  1176,    -1,    -1,  1221,   537,
    1236,   375,  1227,  1176,    -1,    -1,  1221,  1233,  1221,   610,
    1228,   654,  1266,   655,    -1,  1221,   349,   254,  1236,    -1,
      -1,  1221,   265,  1252,   254,  1221,   375,  1229,  1176,    -1,
      -1,  1221,   265,  1252,   254,  1236,  1230,   610,   654,  1266,
     655,    -1,  1221,   349,   265,  1252,   254,  1236,    -1,    -1,
    1221,   466,  1252,   254,  1221,   375,  1231,  1176,    -1,    -1,
    1221,   466,  1252,   254,  1236,  1232,   610,   654,  1266,   655,
      -1,  1221,   349,   466,  1252,   254,  1236,    -1,   254,    -1,
     235,   254,    -1,    98,   254,    -1,    -1,  1235,    -1,   396,
     654,  1266,   655,   879,    -1,    -1,  1237,  1473,  1234,  1271,
    1261,    -1,  1251,  1250,  1247,    -1,   654,  1250,  1238,   655,
    1271,    -1,  1245,  1575,    -1,    -1,    -1,  1238,   598,  1579,
    1239,  1580,  1240,  1575,    -1,  1242,    -1,    -1,    -1,  1243,
    1586,  1170,  1244,   947,  1169,    -1,    -1,  1250,  1246,  1224,
      -1,    -1,    -1,  1248,  1166,  1170,  1249,   947,    -1,    -1,
     481,    -1,    -1,   387,    -1,    -1,   192,   254,    -1,   192,
     384,    46,    -1,   192,   208,    46,    -1,   190,    -1,   227,
      -1,    -1,  1254,  1020,  1253,  1256,   654,  1265,   655,    -1,
      -1,   609,  1020,  1253,  1257,   654,  1263,   655,    -1,  1255,
      -1,  1258,  1255,    -1,    -1,    -1,  1260,  1258,    -1,    -1,
    1262,  1259,    -1,    -1,  1265,    -1,  1481,    -1,   412,    -1,
    1264,    -1,  1265,   656,  1264,    -1,  1481,    -1,  1266,   656,
    1481,    -1,  1268,    -1,   116,    -1,   117,    -1,   118,    -1,
     119,    -1,   219,    -1,   220,    -1,   221,    -1,   330,    -1,
     331,    -1,   478,    -1,   640,    -1,   120,    -1,   625,    -1,
     222,    -1,   332,    -1,   340,    -1,   421,    -1,   479,    -1,
     328,    -1,   641,    -1,   115,    -1,   568,    -1,   565,    -1,
     112,    -1,    -1,    19,    -1,   160,    -1,    -1,  1270,  1481,
      -1,    -1,    12,    -1,    -1,    -1,   628,  1274,  1176,    -1,
      -1,    -1,   213,  1276,  1176,    -1,   165,  1186,    -1,    -1,
      -1,   208,    46,  1279,  1280,    -1,  1279,   656,  1468,  1288,
      -1,  1468,  1288,    -1,    -1,   631,    -1,   632,    -1,   384,
      46,  1282,    -1,  1282,   656,  1283,    -1,  1283,    -1,  1470,
    1288,    -1,    -1,  1285,    -1,    -1,   384,    46,  1286,  1287,
      -1,  1287,   656,  1468,  1288,    -1,  1468,  1288,    -1,    -1,
      20,    -1,   131,    -1,    -1,  1291,    -1,    -1,  1291,    -1,
     270,  1292,    -1,  1293,    -1,  1293,   656,  1293,    -1,  1293,
     373,  1293,    -1,  1481,    -1,  1461,    -1,   589,    -1,   284,
      -1,   369,    -1,    -1,   270,  1293,    -1,   369,    -1,   215,
      -1,   284,    -1,   589,    -1,   122,    -1,   187,    -1,   369,
      -1,   215,    -1,   284,    -1,   589,    -1,  1299,    -1,   369,
      -1,   589,    -1,   284,    -1,   122,    -1,   187,    -1,   369,
      -1,   589,    -1,   284,    -1,  1299,    -1,  1300,    -1,   122,
      -1,   187,    -1,    -1,    -1,   414,    14,  1302,   654,  1303,
     655,    -1,    -1,  1304,    -1,  1304,   656,  1304,    -1,   369,
      -1,    -1,  1306,  1307,    -1,  1307,   656,  1308,    -1,  1308,
      -1,   661,  1483,    -1,  1483,    -1,    -1,   242,  1310,  1311,
      -1,    -1,    -1,   388,  1480,  1312,   989,  1313,  1444,  1447,
      -1,   146,  1480,    -1,  1305,    -1,    -1,   143,  1315,  1215,
      -1,    -1,   144,  1329,  1518,  1327,  1328,  1317,  1322,  1517,
    1089,    -1,    -1,   144,   484,  1318,  1322,    -1,    -1,    -1,
     144,   232,  1481,   375,  1473,  1517,  1319,  1320,  1084,    -1,
     144,   108,  1327,  1481,    -1,   144,   198,  1327,  1481,   662,
    1481,    -1,   144,   198,  1327,  1481,    -1,   144,   414,  1327,
     720,    -1,   144,   607,   719,  1550,    -1,    -1,   144,   622,
    1327,  1321,  1322,  1089,    -1,   144,   167,  1327,   720,    -1,
     144,   582,  1327,   720,    -1,   144,   552,   855,  1330,    -1,
     144,   280,   208,   856,  1330,    -1,   144,   488,  1327,  1483,
      -1,  1323,    -1,  1322,   656,  1323,    -1,  1473,    -1,  1473,
    1234,    -1,  1326,    -1,  1325,   656,  1326,    -1,  1474,    -1,
      -1,   226,   172,    -1,    -1,   190,    -1,    -1,   558,    -1,
      -1,  1331,    -1,  1332,    -1,  1331,  1332,    -1,  1330,   656,
    1332,    -1,   866,    -1,   867,    -1,    -1,    -1,   238,  1334,
    1339,  1370,  1371,  1369,  1088,  1341,  1335,  1343,  1359,    -1,
      -1,    -1,   452,  1337,  1340,  1341,  1338,  1343,    -1,    -1,
     287,    -1,   128,    -1,   216,    -1,  1368,    -1,   128,    -1,
     242,  1342,    -1,  1342,    -1,  1324,    -1,  1346,    -1,   654,
     655,  1346,    -1,   654,  1345,   655,  1346,    -1,    -1,   490,
    1344,  1350,    -1,  1345,   656,  1466,    -1,  1466,    -1,   614,
    1349,    -1,   615,  1349,    -1,    -1,   925,  1347,  1571,    -1,
      -1,   654,   925,   655,  1348,  1574,    -1,  1349,   656,  1354,
      -1,  1354,    -1,  1350,   656,  1351,    -1,  1351,    -1,  1470,
    1352,  1358,    -1,   160,    -1,   491,    -1,    -1,  1352,    -1,
      -1,   654,  1355,  1356,   655,    -1,    -1,  1357,    -1,  1357,
     656,  1358,    -1,  1358,    -1,  1176,    -1,   125,    -1,    -1,
      -1,   375,   147,  1360,   257,   604,  1366,    -1,    -1,    -1,
     604,  1362,  1368,  1370,  1371,  1369,  1372,  1088,  1222,   490,
    1364,  1363,  1273,  1284,  1294,    -1,  1364,   656,  1365,    -1,
    1365,    -1,  1470,  1352,  1358,    -1,  1366,   656,  1367,    -1,
    1367,    -1,  1470,  1352,  1358,    -1,    -1,   287,    -1,    -1,
     423,  1297,    -1,    -1,    63,    -1,    -1,   426,    -1,    -1,
     557,  1297,    -1,    -1,   130,  1374,  1382,  1375,    -1,    -1,
     195,  1473,  1234,  1376,  1273,  1284,  1294,    -1,    -1,  1379,
    1377,   195,  1222,  1273,    -1,    -1,   195,  1325,  1378,   610,
    1222,  1273,    -1,  1380,    -1,  1379,   656,  1380,    -1,  1481,
    1381,    -1,  1481,   662,  1481,  1381,    -1,    -1,   662,   649,
      -1,    -1,  1383,  1382,    -1,   424,    -1,   287,    -1,   227,
      -1,    -1,   585,  1386,  1385,  1323,  1517,    -1,    -1,   554,
      -1,    -1,  1388,    -1,  1389,    -1,  1388,   656,  1389,    -1,
      96,    -1,   325,    -1,    41,   248,    -1,    92,   549,    -1,
     392,   182,    -1,   249,    -1,   548,    -1,   507,    -1,    12,
      -1,    -1,   192,   422,   369,    -1,    -1,   495,  1392,  1393,
      -1,   109,  1404,    -1,  1400,   551,  1399,  1404,    -1,  1400,
     581,  1399,  1404,    -1,   166,  1399,  1404,    -1,   554,   532,
    1399,  1404,    -1,   378,   551,  1399,  1404,    -1,   403,    -1,
     158,   944,  1396,    -1,   158,    12,  1396,    -1,  1400,    72,
    1401,  1473,  1399,  1404,    -1,  1397,   281,    -1,   500,   218,
      -1,    -1,    34,   166,  1402,  1403,  1394,  1289,    -1,    -1,
     440,   166,  1402,  1403,  1395,  1289,    -1,  1022,  1401,  1473,
    1399,  1273,    -1,  1398,   157,    -1,   413,    -1,    95,   654,
     649,   655,   624,    -1,    95,   654,   649,   655,   163,    -1,
     624,  1289,    -1,   163,  1289,    -1,   418,    -1,   417,  1387,
    1390,  1289,    -1,  1502,   532,  1404,    -1,  1400,   416,    -1,
     520,    -1,  1502,   618,  1404,    -1,   986,  1404,    -1,    71,
    1404,    -1,   207,    -1,   207,   192,  1484,    -1,    97,   108,
     935,  1481,    -1,    97,   554,  1473,    -1,    97,   622,  1473,
      -1,    97,   484,  1473,    -1,   309,   532,    -1,   500,   532,
      -1,    97,   414,   720,    -1,    97,   198,   720,    -1,    97,
     582,   720,    -1,   414,   532,  1404,    -1,   198,   532,  1404,
      -1,   414,    69,   720,    -1,   198,    69,   720,    -1,    97,
     167,   720,    -1,   532,    -1,   344,    -1,   281,    -1,   309,
      -1,    33,    -1,    -1,   536,    -1,    -1,  1401,  1481,    -1,
      -1,   196,    -1,   195,    -1,   245,    -1,    -1,   245,  1478,
      -1,    -1,   195,  1297,    -1,    -1,   269,  1478,    -1,   628,
    1176,    -1,    -1,  1409,  1473,  1406,  1411,    -1,    -1,  1409,
    1410,  1407,  1408,    -1,  1151,    -1,  1333,    -1,  1336,    -1,
    1361,    -1,  1373,    -1,   131,    -1,   132,    -1,    -1,   177,
      -1,   397,    -1,   193,   160,  1483,    -1,    -1,  1460,    -1,
    1481,    -1,    -1,   189,  1126,  1413,  1414,    -1,    -1,    -1,
    1518,  1415,  1421,  1416,  1417,    -1,  1419,    -1,    -1,   630,
     429,   279,    -1,    -1,   192,  1418,   176,    -1,  1419,   656,
    1420,    -1,  1420,    -1,   162,   281,    -1,   158,   281,    -1,
     200,   281,    -1,   501,   281,    -1,    33,   281,    -1,   439,
     281,    -1,   422,    48,    -1,   218,    -1,   413,    -1,   281,
      -1,   532,    -1,   133,    -1,   457,    -1,    -1,  1322,    -1,
      -1,   455,  1423,  1424,    -1,  1424,   656,  1425,    -1,  1425,
      -1,    -1,   500,  1426,  1427,    -1,   309,    -1,   422,    48,
      -1,    -1,    12,    -1,    -1,   420,  1429,  1430,    -1,  1397,
     281,  1431,    -1,   572,  1478,    -1,    29,  1176,    -1,   258,
    1433,  1176,    -1,    -1,    85,    -1,   422,    -1,   609,  1481,
      -1,    -1,    -1,    -1,    -1,   275,  1440,  1436,  1442,  1441,
     233,  1480,  1437,  1443,   242,   554,  1473,  1234,  1438,   989,
    1439,  1450,  1444,  1447,  1451,  1453,  1456,    -1,   111,    -1,
     638,    -1,    -1,   276,    -1,    -1,    83,    -1,   287,    -1,
      -1,   452,    -1,   227,    -1,    -1,    72,  1445,    -1,  1445,
    1446,    -1,  1446,    -1,   560,    46,  1460,    -1,   382,   153,
      46,  1460,    -1,   153,    46,  1460,    -1,   164,    46,  1460,
      -1,    -1,   272,  1448,    -1,  1448,  1449,    -1,  1449,    -1,
     560,    46,  1460,    -1,   526,    46,  1460,    -1,    -1,   470,
     224,    46,  1460,    -1,    -1,   227,   369,  1452,    -1,   272,
      -1,   470,    -1,    -1,   654,  1454,   655,    -1,   654,   655,
      -1,  1454,   656,  1455,    -1,  1455,    -1,  1470,    -1,   661,
    1483,    -1,    -1,   490,  1457,    -1,  1457,   656,  1458,    -1,
    1458,    -1,  1470,  1352,  1172,  1358,  1173,    -1,   561,    -1,
     350,    -1,   592,   561,    -1,  1459,  1479,    -1,  1479,    -1,
     215,    -1,    35,    -1,   393,    -1,  1463,    -1,   648,  1464,
      -1,   647,  1464,    -1,  1459,    -1,  1464,    -1,  1465,    -1,
     368,    -1,   180,    -1,   584,    -1,   215,    -1,    35,    -1,
     592,   215,    -1,   592,    35,    -1,   369,    -1,   284,    -1,
     589,    -1,   122,    -1,   187,    -1,   115,   561,    -1,   568,
     561,    -1,   565,   561,    -1,  1470,    -1,  1467,    -1,  1481,
     662,   649,    -1,  1481,   662,  1481,   662,   649,    -1,  1176,
      -1,  1481,    -1,  1471,    -1,  1481,    -1,  1471,    -1,  1481,
     662,  1481,    -1,   662,  1481,   662,  1481,    -1,  1481,   662,
    1481,   662,  1481,    -1,  1481,    -1,  1481,   662,  1481,   662,
    1481,    -1,  1481,   662,  1481,    -1,   662,  1481,    -1,  1481,
      -1,  1481,   662,  1481,    -1,   662,  1481,    -1,  1481,  1381,
      -1,  1481,   662,  1481,  1381,    -1,  1481,    -1,   223,    -1,
     225,    -1,  1478,    -1,   561,    -1,   561,    -1,   561,    -1,
    1476,    -1,  1485,    -1,  1476,    -1,  1486,    -1,  1481,    -1,
    1478,    -1,   268,    -1,  1483,    -1,  1483,   661,  1483,    -1,
     102,  1175,    -1,  1486,    -1,    21,    -1,    28,    -1,    30,
      -1,    47,    -1,    48,    -1,    58,    -1,    60,    -1,    66,
      -1,    77,    -1,    79,    -1,    91,    -1,   121,    -1,   143,
      -1,   154,    -1,   170,    -1,   189,    -1,   193,    -1,   211,
      -1,   214,    -1,   217,    -1,   240,    -1,   643,    -1,   259,
      -1,   365,    -1,   378,    -1,   380,    -1,   390,    -1,   394,
      -1,   406,    -1,   409,    -1,   446,    -1,   449,    -1,   455,
      -1,   458,    -1,   467,    -1,   475,    -1,   480,    -1,   488,
      -1,   498,    -1,   504,    -1,   500,    -1,   505,    -1,   528,
      -1,   535,    -1,   585,    -1,   644,    -1,   596,    -1,   597,
      -1,   634,    -1,   637,    -1,   605,    -1,     5,    -1,     7,
      -1,     8,    -1,     9,    -1,    10,    -1,    11,    -1,    14,
      -1,    18,    -1,    23,    -1,    25,    -1,    24,    -1,    26,
      -1,    27,    -1,    34,    -1,    38,    -1,    41,    -1,    43,
      -1,    42,    -1,    45,    -1,    51,    -1,    54,    -1,    55,
      -1,    57,    -1,    62,    -1,    65,    -1,    64,    -1,    68,
      -1,    69,    -1,    71,    -1,    75,    -1,    74,    -1,    72,
      -1,    76,    -1,    78,    -1,    80,    -1,    81,    -1,    82,
      -1,    83,    -1,    85,    -1,    86,    -1,    88,    -1,    90,
      -1,    89,    -1,    92,    -1,    96,    -1,    99,    -1,   101,
      -1,   103,    -1,   105,    -1,   107,    -1,   111,    -1,   110,
      -1,   112,    -1,   115,    -1,   120,    -1,   126,    -1,   127,
      -1,   129,    -1,   133,    -1,   135,    -1,   136,    -1,   137,
      -1,   138,    -1,   139,    -1,   146,    -1,   147,    -1,   148,
      -1,   155,    -1,   159,    -1,   158,    -1,   157,    -1,   162,
      -1,   163,    -1,   165,    -1,   167,    -1,   166,    -1,   168,
      -1,   169,    -1,   174,    -1,   175,    -1,   176,    -1,   177,
      -1,   178,    -1,   182,    -1,   181,    -1,   194,    -1,   152,
      -1,   196,    -1,   184,    -1,   185,    -1,   186,    -1,   200,
      -1,   202,    -1,   201,    -1,   203,    -1,   207,    -1,   205,
      -1,   212,    -1,   218,    -1,   222,    -1,   224,    -1,   228,
      -1,   230,    -1,   244,    -1,   229,    -1,   231,    -1,   234,
      -1,   248,    -1,   249,    -1,   251,    -1,   252,    -1,   239,
      -1,   256,    -1,   260,    -1,   263,    -1,   266,    -1,   267,
      -1,   273,    -1,   274,    -1,   276,    -1,   278,    -1,   280,
      -1,   281,    -1,   315,    -1,   309,    -1,   311,    -1,   293,
      -1,   297,    -1,   294,    -1,   295,    -1,   310,    -1,   296,
      -1,   299,    -1,   291,    -1,   298,    -1,   292,    -1,   307,
      -1,   301,    -1,   300,    -1,   302,    -1,   303,    -1,   304,
      -1,   305,    -1,   306,    -1,   289,    -1,   313,    -1,   314,
      -1,   316,    -1,   318,    -1,   319,    -1,   324,    -1,   325,
      -1,   326,    -1,   327,    -1,   328,    -1,   329,    -1,   332,
      -1,   333,    -1,   334,    -1,   338,    -1,   336,    -1,   340,
      -1,   341,    -1,   342,    -1,   343,    -1,   344,    -1,   345,
      -1,   347,    -1,   346,    -1,   348,    -1,   351,    -1,   352,
      -1,   356,    -1,   355,    -1,   357,    -1,   358,    -1,   359,
      -1,   366,    -1,   360,    -1,   361,    -1,   370,    -1,   372,
      -1,   373,    -1,   374,    -1,   376,    -1,   377,    -1,   391,
      -1,   392,    -1,   395,    -1,   398,    -1,   397,    -1,   399,
      -1,   400,    -1,   401,    -1,   402,    -1,   403,    -1,   404,
      -1,   405,    -1,   410,    -1,   411,    -1,   413,    -1,   415,
      -1,   416,    -1,   417,    -1,   418,    -1,   419,    -1,   421,
      -1,   422,    -1,   424,    -1,   428,    -1,   432,    -1,   433,
      -1,   435,    -1,   434,    -1,   436,    -1,   439,    -1,   440,
      -1,   441,    -1,   442,    -1,   443,    -1,   445,    -1,   448,
      -1,   450,    -1,   453,    -1,   457,    -1,   460,    -1,   461,
      -1,   462,    -1,   464,    -1,   468,    -1,   469,    -1,   470,
      -1,   473,    -1,   471,    -1,   472,    -1,   474,    -1,   476,
      -1,   477,    -1,   479,    -1,   484,    -1,   486,    -1,   485,
      -1,   487,    -1,   499,    -1,   492,    -1,   496,    -1,   501,
      -1,   503,    -1,   506,    -1,   507,    -1,   513,    -1,   514,
      -1,   515,    -1,   518,    -1,   517,    -1,   520,    -1,   521,
      -1,   524,    -1,   527,    -1,   529,    -1,   530,    -1,   531,
      -1,   532,    -1,   536,    -1,   538,    -1,   539,    -1,   540,
      -1,   541,    -1,   543,    -1,   542,    -1,   546,    -1,   547,
      -1,   548,    -1,   549,    -1,   556,    -1,   551,    -1,   555,
      -1,   552,    -1,   558,    -1,   559,    -1,   562,    -1,   563,
      -1,   580,    -1,   581,    -1,   565,    -1,   566,    -1,   567,
      -1,   568,    -1,   573,    -1,   574,    -1,   575,    -1,   576,
      -1,   578,    -1,   577,    -1,   586,    -1,   587,    -1,   588,
      -1,   198,    -1,   590,    -1,   591,    -1,   594,    -1,   593,
      -1,   600,    -1,   603,    -1,   607,    -1,   608,    -1,   618,
      -1,   622,    -1,   615,    -1,   624,    -1,   623,    -1,   625,
      -1,   633,    -1,   626,    -1,   636,    -1,   638,    -1,   641,
      -1,    -1,   490,  1488,  1489,    -1,    -1,  1505,  1490,  1495,
      -1,    -1,   580,  1491,  1508,    -1,   171,  1478,    -1,    -1,
    1501,  1492,  1493,    -1,    -1,  1504,  1494,  1495,    -1,   580,
    1508,    -1,    -1,   656,  1496,    -1,    -1,  1497,  1499,    -1,
      -1,  1496,   656,  1498,  1499,    -1,    -1,  1501,  1500,  1504,
      -1,  1505,    -1,   205,    -1,   276,    -1,   487,    -1,    -1,
     205,    -1,   276,    -1,   487,    -1,    -1,   205,   662,    -1,
     276,   662,    -1,   487,   662,    -1,  1507,  1352,  1514,    -1,
      -1,  1507,  1352,  1506,  1514,    -1,   661,  1483,  1352,  1176,
      -1,   661,   661,  1503,  1507,  1352,  1514,    -1,   986,   991,
      -1,   346,  1352,  1176,    -1,   346,   988,   993,    -1,   399,
    1352,  1513,    -1,   399,   192,  1484,  1352,  1513,    -1,  1481,
      -1,  1481,   662,  1481,    -1,   125,   662,  1481,    -1,  1509,
      -1,  1510,    -1,  1509,   656,  1510,    -1,  1510,   656,  1509,
      -1,  1511,    -1,   251,   267,  1512,    -1,   429,   377,    -1,
     429,   635,    -1,   429,   590,    -1,   429,    78,    -1,   450,
     429,    -1,   485,    -1,   561,    -1,   399,   654,   561,   655,
      -1,   374,   654,   561,   655,    -1,  1176,    -1,   125,    -1,
     375,    -1,    12,    -1,    33,    -1,    -1,   279,  1518,  1516,
    1519,  1517,    -1,    -1,   623,    -1,   623,  1295,    -1,   366,
      -1,   554,    -1,   551,    -1,  1520,    -1,  1519,   656,  1520,
      -1,  1473,  1271,  1521,    -1,   429,    -1,   635,    -1,   287,
     635,    -1,   429,   276,    -1,    -1,   601,  1523,  1518,    -1,
     211,  1473,   378,  1271,    -1,   211,  1475,    66,    -1,    -1,
     211,  1475,   429,  1525,  1526,  1273,  1290,    -1,  1527,    -1,
    1481,  1528,    -1,   185,    -1,   356,    -1,   185,    -1,   356,
      -1,   411,    -1,   260,    -1,    -1,  1530,  1529,   654,  1357,
     655,    -1,   160,    -1,   199,    -1,   261,    -1,   210,    -1,
     288,    -1,    -1,   465,   719,  1532,  1533,    -1,  1538,   375,
    1537,  1549,   195,  1551,    -1,  1538,   375,   198,  1549,   195,
    1551,    -1,  1538,   375,   414,  1549,   195,  1551,    -1,    12,
    1539,   656,   206,   381,   195,  1551,    -1,   419,   375,  1484,
     195,  1551,    -1,    -1,   206,   719,  1535,  1536,    -1,  1538,
     375,  1537,  1549,   572,  1551,  1556,  1557,    -1,  1538,   375,
     198,  1549,   572,  1551,  1556,  1557,    -1,  1538,   375,   414,
    1549,   572,  1551,  1556,  1557,    -1,   419,   375,  1484,   572,
    1551,  1558,    -1,    -1,   554,    -1,  1540,    -1,    12,  1539,
      -1,    -1,   413,    -1,  1541,    -1,  1540,   656,  1541,    -1,
      -1,   481,  1542,  1553,    -1,    -1,   238,  1543,  1553,    -1,
      -1,   604,  1544,  1553,    -1,    -1,   437,  1545,  1553,    -1,
     130,    -1,   606,    -1,   232,    -1,    13,    -1,    97,    -1,
     144,    -1,   170,    -1,   445,    -1,   496,    -1,   415,    -1,
     184,    -1,   206,   381,    -1,   495,   109,    -1,   546,    -1,
      97,   558,   551,    -1,   279,   551,    -1,   453,   500,    -1,
     453,    65,    -1,    97,   622,    -1,   495,   622,    -1,    97,
     469,    -1,    13,   469,    -1,    97,   607,    -1,   167,    -1,
     582,    -1,    97,   552,    -1,    -1,    17,    -1,  1548,  1546,
    1547,    -1,  1548,    -1,   541,   561,    -1,   252,   561,    -1,
      62,   561,    -1,   649,    -1,  1481,   662,   649,    -1,   649,
     662,   649,    -1,  1473,    -1,  1484,    -1,  1550,   656,  1484,
      -1,  1552,    -1,  1551,   656,  1552,    -1,  1484,   224,    46,
     561,    -1,  1484,   224,    46,   399,   561,    -1,  1484,   224,
     630,  1483,    -1,  1484,   224,   630,  1483,    19,  1478,    -1,
    1484,    -1,    -1,   654,  1554,   655,    -1,  1554,   656,  1555,
      -1,  1555,    -1,  1481,    -1,    -1,   454,  1547,    -1,   454,
     525,    -1,   454,   636,    -1,   454,   361,    -1,    -1,   630,
    1559,    -1,    -1,   630,   206,   381,    -1,  1559,  1560,    -1,
    1560,    -1,   206,   381,    -1,   314,  1295,    -1,   318,  1295,
      -1,   313,  1295,    -1,   319,  1295,    -1,    -1,    30,  1562,
    1563,    -1,    -1,   633,    -1,    -1,    17,   365,    55,    -1,
      17,    55,    -1,    -1,   444,    -1,   365,   444,    -1,    -1,
     475,    -1,    79,  1563,  1564,  1565,    -1,   467,  1563,  1564,
    1565,    -1,   467,  1563,   572,  1566,  1481,    -1,   475,  1481,
      -1,   444,   475,  1481,    -1,    -1,  1572,    -1,    -1,   598,
    1579,  1573,  1152,    -1,    -1,  1572,    -1,  1576,    -1,    -1,
    1576,    -1,    -1,  1577,  1578,    -1,  1285,  1289,    -1,  1291,
      -1,    -1,   140,    -1,    12,    -1,   481,  1241,    -1,   654,
    1154,   655,    -1,  1580,  1575,    -1,    -1,  1581,   598,  1579,
    1582,  1580,  1575,    -1,  1584,  1581,  1585,    -1,    -1,    -1,
      -1,  1587,    -1,  1587,  1588,    -1,  1588,    -1,   537,    -1,
     216,    -1,   140,    -1,   522,    -1,   516,    -1,   517,    -1,
     519,    -1,    12,    -1,  1594,  1590,    -1,  1593,  1591,    -1,
    1595,  1592,  1599,    -1,  1599,    -1,  1611,    -1,  1622,    -1,
    1616,    -1,   706,    -1,  1599,    -1,  1611,    -1,  1622,    -1,
    1616,    -1,  1615,    -1,   706,    -1,  1593,    -1,  1594,    -1,
      -1,   127,   160,  1484,    -1,  1596,    -1,  1596,  1597,    -1,
    1597,    -1,   386,   452,    -1,    11,   160,   591,    -1,    11,
     160,   326,    -1,    11,   160,   559,    -1,    -1,   523,   480,
     127,    -1,   523,   480,   244,    -1,    -1,  1598,   622,  1473,
    1600,  1601,    19,  1603,    -1,    -1,   654,  1602,   655,    -1,
    1481,    -1,  1602,   656,  1481,    -1,    -1,  1604,  1605,  1610,
      -1,    -1,  1608,  1606,  1571,    -1,   654,  1607,   655,  1574,
      -1,  1608,    -1,   654,  1607,   655,    -1,    -1,   481,  1609,
    1157,    -1,    -1,   630,    61,   381,    -1,   630,    51,    61,
     381,    -1,   630,   276,    61,   381,    -1,    -1,    -1,    -1,
     582,  1172,   720,   826,   827,   375,  1172,  1612,  1473,   192,
    1172,  1613,   149,   472,  1614,   775,    -1,    10,  1172,   198,
    1481,   462,   948,   505,  1478,    -1,  1172,   198,  1481,   462,
     948,   505,  1478,    -1,    -1,    -1,    -1,    -1,    -1,  1172,
     198,   720,   654,  1617,   731,   655,  1618,   462,  1619,   983,
    1620,   722,  1621,   775,    -1,    -1,    -1,    -1,    -1,   414,
    1172,   720,  1623,   654,  1624,   735,   655,  1625,   722,  1626,
     775,    -1,   637,  1629,  1628,  1630,    -1,   637,   154,  1628,
    1632,    -1,   637,   409,  1628,    -1,   637,    79,  1628,  1631,
      -1,   637,   467,  1628,    -1,   637,   433,    -1,  1460,    -1,
    1460,   656,  1460,    -1,  1460,   656,  1460,   656,  1295,    -1,
      30,    -1,   528,    -1,    -1,   254,    -1,   460,    -1,    -1,
     376,   400,    -1,    -1,    -1,   547,  1633,  1634,    -1,    -1,
     192,   329,    -1,   240,   402,  1481,   505,  1478,    -1,   597,
     402,  1481,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1996,  1996,  2009,  2008,  2033,  2040,  2042,  2046,  2047,
    2052,  2053,  2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,
    2062,  2063,  2064,  2065,  2066,  2067,  2068,  2069,  2070,  2071,
    2072,  2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,  2081,
    2082,  2083,  2084,  2085,  2086,  2087,  2088,  2089,  2090,  2091,
    2092,  2093,  2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,
    2102,  2103,  2107,  2117,  2118,  2122,  2142,  2149,  2160,  2159,
    2170,  2172,  2176,  2177,  2181,  2194,  2193,  2213,  2212,  2230,
    2231,  2235,  2239,  2243,  2247,  2252,  2256,  2260,  2265,  2278,
    2283,  2287,  2291,  2295,  2299,  2303,  2308,  2312,  2317,  2348,
    2353,  2360,  2363,  2365,  2366,  2370,  2384,  2388,  2404,  2408,
    2421,  2420,  2466,  2504,  2465,  2517,  2522,  2516,  2530,  2535,
    2528,  2543,  2548,  2541,  2555,  2554,  2567,  2566,  2574,  2578,
    2582,  2586,  2593,  2594,  2598,  2599,  2603,  2607,  2611,  2615,
    2619,  2623,  2627,  2631,  2638,  2651,  2652,  2656,  2660,  2664,
    2668,  2672,  2677,  2681,  2689,  2688,  2720,  2719,  2726,  2733,
    2734,  2740,  2746,  2756,  2762,  2768,  2770,  2777,  2778,  2782,
    2788,  2797,  2798,  2806,  2806,  2861,  2862,  2863,  2864,  2865,
    2866,  2867,  2868,  2869,  2870,  2871,  2872,  2873,  2878,  2892,
    2906,  2925,  2926,  2930,  2931,  2936,  2938,  2940,  2942,  2944,
    2946,  2948,  2954,  2955,  2956,  2960,  2964,  2972,  2971,  2984,
    2986,  2989,  2991,  2995,  2999,  3006,  3008,  3012,  3013,  3018,
    3037,  3067,  3069,  3073,  3074,  3078,  3107,  3108,  3109,  3110,
    3114,  3115,  3119,  3120,  3125,  3128,  3155,  3154,  3238,  3255,
    3254,  3329,  3328,  3401,  3402,  3407,  3409,  3414,  3437,  3448,
    3452,  3474,  3475,  3479,  3483,  3496,  3502,  3508,  3517,  3532,
    3558,  3564,  3565,  3571,  3574,  3578,  3586,  3606,  3608,  3626,
    3632,  3634,  3636,  3638,  3640,  3642,  3644,  3646,  3648,  3650,
    3652,  3654,  3659,  3675,  3691,  3692,  3697,  3703,  3712,  3718,
    3727,  3735,  3764,  3773,  3775,  3784,  3789,  3795,  3804,  3812,
    3814,  3816,  3818,  3820,  3822,  3824,  3826,  3828,  3830,  3832,
    3834,  3836,  3841,  3861,  3885,  3887,  3886,  3893,  3894,  3895,
    3896,  3897,  3898,  3899,  3900,  3901,  3902,  3903,  3904,  3905,
    3910,  3909,  3920,  3920,  3977,  3976,  4033,  4033,  4055,  4114,
    4164,  4189,  4188,  4214,  4237,  4239,  4240,  4244,  4262,  4283,
    4292,  4328,  4283,  4357,  4359,  4360,  4364,  4365,  4370,  4381,
    4369,  4432,  4431,  4445,  4446,  4450,  4451,  4456,  4465,  4455,
    4514,  4523,  4513,  4567,  4580,  4585,  4584,  4622,  4623,  4628,
    4627,  4661,  4661,  4680,  4679,  4729,  4746,  4755,  4745,  4809,
    4818,  4808,  4858,  4860,  4865,  4867,  4869,  4886,  4891,  4897,
    4904,  4905,  4913,  4919,  4928,  4934,  4940,  4941,  4945,  4945,
    4950,  4951,  4952,  4956,  4957,  4958,  4961,  4963,  4967,  4968,
    4969,  4973,  4974,  4975,  4976,  4977,  4978,  4979,  4980,  4983,
    4985,  4989,  4990,  4991,  4995,  4996,  4997,  4998,  4999,  5002,
    5004,  5008,  5009,  5010,  5014,  5015,  5016,  5017,  5018,  5019,
    5020,  5023,  5025,  5029,  5030,  5031,  5035,  5036,  5037,  5042,
    5050,  5058,  5066,  5078,  5090,  5095,  5100,  5108,  5116,  5124,
    5132,  5140,  5148,  5156,  5169,  5182,  5196,  5201,  5214,  5215,
    5266,  5267,  5270,  5285,  5303,  5308,  5306,  5313,  5315,  5314,
    5318,  5317,  5323,  5360,  5361,  5366,  5365,  5384,  5403,  5402,
    5419,  5423,  5431,  5430,  5433,  5435,  5437,  5439,  5444,  5445,
    5451,  5452,  5469,  5470,  5474,  5475,  5479,  5498,  5508,  5519,
    5528,  5529,  5545,  5547,  5546,  5551,  5549,  5560,  5561,  5565,
    5583,  5599,  5600,  5616,  5631,  5653,  5654,  5659,  5658,  5682,
    5692,  5714,  5713,  5731,  5730,  5750,  5772,  5776,  5805,  5817,
    5818,  5823,  5834,  5822,  5859,  5860,  5864,  5877,  5898,  5911,
    5937,  5938,  5943,  5942,  5979,  5984,  5985,  5989,  5990,  5994,
    5996,  6002,  6004,  6006,  6008,  6010,  6012,  6022,  6037,  6021,
    6051,  6052,  6056,  6057,  6061,  6062,  6066,  6067,  6071,  6072,
    6076,  6077,  6081,  6085,  6086,  6089,  6091,  6095,  6096,  6100,
    6101,  6102,  6106,  6111,  6116,  6121,  6126,  6131,  6136,  6141,
    6156,  6162,  6177,  6182,  6197,  6203,  6221,  6226,  6231,  6236,
    6241,  6247,  6246,  6272,  6273,  6274,  6279,  6284,  6289,  6291,
    6293,  6295,  6301,  6309,  6327,  6344,  6370,  6388,  6389,  6390,
    6391,  6392,  6393,  6394,  6395,  6396,  6397,  6398,  6399,  6400,
    6404,  6405,  6406,  6410,  6411,  6415,  6416,  6417,  6418,  6423,
    6430,  6431,  6435,  6436,  6440,  6441,  6448,  6453,  6459,  6465,
    6479,  6498,  6504,  6506,  6510,  6514,  6515,  6519,  6524,  6523,
    6546,  6547,  6548,  6549,  6554,  6558,  6563,  6568,  6572,  6577,
    6582,  6588,  6593,  6599,  6603,  6608,  6613,  6631,  6633,  6635,
    6651,  6653,  6658,  6663,  6675,  6680,  6685,  6690,  6692,  6694,
    6696,  6698,  6700,  6702,  6704,  6707,  6706,  6711,  6710,  6714,
    6716,  6725,  6726,  6727,  6733,  6734,  6735,  6736,  6737,  6741,
    6745,  6746,  6750,  6751,  6755,  6756,  6757,  6758,  6759,  6763,
    6764,  6765,  6766,  6767,  6771,  6776,  6778,  6784,  6785,  6787,
    6792,  6802,  6803,  6807,  6808,  6809,  6817,  6818,  6822,  6823,
    6827,  6828,  6829,  6833,  6834,  6835,  6836,  6839,  6840,  6844,
    6845,  6849,  6850,  6854,  6855,  6859,  6860,  6861,  6862,  6863,
    6864,  6870,  6876,  6885,  6894,  6895,  6908,  6914,  6920,  6926,
    6932,  6937,  6942,  6951,  6972,  6980,  6981,  6986,  6987,  6991,
    6999,  7003,  7004,  7008,  7009,  7013,  7022,  7026,  7027,  7031,
    7039,  7040,  7044,  7045,  7049,  7050,  7055,  7056,  7060,  7067,
    7076,  7081,  7089,  7090,  7091,  7092,  7093,  7094,  7099,  7107,
    7108,  7113,  7112,  7125,  7126,  7130,  7133,  7134,  7135,  7136,
    7140,  7148,  7155,  7156,  7160,  7170,  7171,  7175,  7176,  7179,
    7181,  7185,  7197,  7198,  7202,  7209,  7222,  7223,  7225,  7227,
    7233,  7238,  7244,  7250,  7257,  7267,  7268,  7269,  7270,  7271,
    7275,  7279,  7280,  7284,  7285,  7289,  7290,  7294,  7295,  7296,
    7300,  7301,  7305,  7309,  7316,  7320,  7324,  7331,  7335,  7339,
    7343,  7356,  7368,  7369,  7373,  7374,  7378,  7379,  7383,  7384,
    7388,  7389,  7393,  7394,  7398,  7399,  7403,  7404,  7408,  7409,
    7413,  7415,  7416,  7420,  7421,  7425,  7429,  7430,  7443,  7444,
    7445,  7449,  7450,  7454,  7460,  7474,  7475,  7479,  7480,  7484,
    7485,  7493,  7492,  7539,  7538,  7552,  7564,  7563,  7582,  7581,
    7600,  7599,  7618,  7612,  7632,  7631,  7664,  7669,  7674,  7679,
    7684,  7691,  7698,  7703,  7711,  7712,  7713,  7714,  7718,  7719,
    7731,  7732,  7736,  7737,  7740,  7742,  7750,  7758,  7760,  7762,
    7763,  7771,  7772,  7777,  7786,  7784,  7798,  7812,  7811,  7825,
    7823,  7837,  7844,  7855,  7856,  7884,  7891,  7895,  7900,  7899,
    7915,  7917,  7922,  7930,  7929,  7945,  7949,  7948,  7960,  7961,
    7965,  7980,  7981,  7985,  7994,  7998,  8003,  8009,  8008,  8019,
    8028,  8018,  8043,  8052,  8061,  8070,  8079,  8085,  8091,  8100,
    8109,  8118,  8146,  8167,  8177,  8181,  8186,  8187,  8190,  8192,
    8193,  8194,  8195,  8198,  8203,  8214,  8219,  8230,  8231,  8235,
    8236,  8240,  8241,  8242,  8246,  8247,  8252,  8260,  8261,  8262,
    8263,  8268,  8267,  8296,  8306,  8323,  8326,  8333,  8337,  8344,
    8348,  8352,  8359,  8364,  8367,  8374,  8377,  8384,  8387,  8394,
    8397,  8405,  8408,  8415,  8419,  8426,  8430,  8437,  8438,  8463,
    8464,  8465,  8470,  8475,  8483,  8482,  8494,  8495,  8496,  8501,
    8500,  8522,  8523,  8527,  8528,  8532,  8533,  8534,  8539,  8538,
    8560,  8569,  8568,  8595,  8596,  8600,  8601,  8605,  8606,  8607,
    8608,  8609,  8610,  8615,  8614,  8637,  8638,  8639,  8644,  8643,
    8649,  8656,  8661,  8669,  8670,  8674,  8689,  8688,  8701,  8702,
    8706,  8707,  8711,  8721,  8731,  8732,  8737,  8736,  8747,  8748,
    8752,  8753,  8757,  8767,  8778,  8777,  8785,  8785,  8796,  8797,
    8802,  8803,  8822,  8842,  8843,  8847,  8852,  8857,  8862,  8870,
    8869,  8893,  8908,  8893,  8915,  8916,  8920,  8921,  8922,  8923,
    8924,  8932,  8962,  8931,  8974,  8981,  8986,  9002,  9004,  9015,
    9016,  9020,  9021,  9049,  9079,  9081,  9091,  9109,  9110,  9111,
    9129,  9136,  9161,  9167,  9173,  9174,  9175,  9176,  9177,  9181,
    9182,  9190,  9241,  9248,  9291,  9297,  9303,  9309,  9315,  9321,
    9327,  9333,  9337,  9343,  9349,  9355,  9361,  9367,  9371,  9377,
    9387,  9393,  9401,  9407,  9417,  9423,  9432,  9442,  9448,  9458,
    9464,  9473,  9477,  9483,  9489,  9495,  9501,  9507,  9513,  9519,
    9525,  9531,  9537,  9543,  9549,  9555,  9561,  9565,  9566,  9570,
    9571,  9575,  9576,  9580,  9581,  9585,  9586,  9587,  9588,  9589,
    9590,  9594,  9595,  9599,  9600,  9601,  9602,  9603,  9604,  9616,
    9617,  9618,  9619,  9620,  9626,  9630,  9636,  9642,  9648,  9654,
    9656,  9663,  9670,  9676,  9717,  9726,  9733,  9741,  9747,  9754,
    9760,  9772,  9784,  9798,  9805,  9821,  9827,  9833,  9841,  9847,
    9853,  9859,  9865,  9880,  9892,  9898,  9904,  9910,  9916,  9922,
    9928,  9934,  9940,  9946,  9952,  9958,  9964,  9970,  9976,  9982,
    9988,  9996, 10017, 10024, 10030, 10037, 10044, 10051, 10058, 10064,
   10070, 10075, 10081, 10088, 10094, 10100, 10106, 10112, 10118, 10136,
   10142, 10148, 10155, 10162, 10177, 10183, 10189, 10195, 10201, 10208,
   10214, 10220, 10226, 10232, 10238, 10246, 10259, 10265, 10271, 10277,
   10283, 10291, 10297, 10309, 10315, 10321, 10329, 10339, 10345, 10361,
   10367, 10374, 10381, 10388, 10395, 10402, 10406, 10426, 10425, 10498,
   10538, 10540, 10545, 10546, 10550, 10551, 10555, 10556, 10560, 10567,
   10575, 10601, 10607, 10613, 10619, 10625, 10631, 10640, 10647, 10649,
   10646, 10656, 10667, 10673, 10679, 10685, 10691, 10697, 10703, 10709,
   10715, 10722, 10721, 10741, 10740, 10755, 10766, 10774, 10790, 10791,
   10796, 10801, 10804, 10807, 10806, 10823, 10825, 10831, 10830, 10847,
   10849, 10851, 10853, 10855, 10857, 10859, 10861, 10863, 10865, 10867,
   10872, 10873, 10877, 10884, 10892, 10893, 10897, 10904, 10912, 10913,
   10917, 10918, 10922, 10930, 10941, 10942, 10951, 10962, 10963, 10969,
   10970, 10990, 10992, 10996, 10994, 11011, 11009, 11027, 11025, 11032,
   11041, 11039, 11057, 11056, 11066, 11077, 11075, 11094, 11093, 11104,
   11115, 11116, 11117, 11125, 11126, 11130, 11145, 11145, 11160, 11200,
   11273, 11284, 11289, 11281, 11308, 11328, 11336, 11328, 11345, 11344,
   11367, 11384, 11367, 11391, 11395, 11421, 11422, 11427, 11430, 11431,
   11432, 11436, 11437, 11442, 11441, 11447, 11446, 11454, 11455, 11458,
   11460, 11460, 11464, 11464, 11469, 11470, 11474, 11476, 11481, 11482,
   11486, 11497, 11510, 11511, 11512, 11513, 11514, 11515, 11516, 11517,
   11518, 11519, 11520, 11521, 11525, 11526, 11527, 11528, 11529, 11530,
   11531, 11532, 11533, 11537, 11538, 11539, 11540, 11543, 11545, 11546,
   11550, 11551, 11559, 11561, 11565, 11567, 11566, 11580, 11583, 11582,
   11597, 11603, 11618, 11620, 11624, 11626, 11631, 11632, 11652, 11683,
   11687, 11688, 11692, 11705, 11707, 11712, 11711, 11746, 11748, 11753,
   11754, 11755, 11760, 11766, 11770, 11771, 11775, 11782, 11789, 11796,
   11806, 11833, 11837, 11843, 11849, 11859, 11863, 11873, 11874, 11875,
   11876, 11877, 11878, 11882, 11883, 11884, 11885, 11886, 11890, 11891,
   11892, 11893, 11894, 11898, 11899, 11900, 11901, 11905, 11910, 11911,
   11914, 11917, 11916, 11950, 11951, 11955, 11963, 11976, 11976, 11986,
   11987, 11991, 12010, 12050, 12049, 12062, 12070, 12061, 12072, 12084,
   12096, 12095, 12113, 12112, 12129, 12128, 12139, 12140, 12139, 12157,
   12164, 12185, 12206, 12218, 12223, 12222, 12232, 12238, 12245, 12250,
   12255, 12265, 12266, 12270, 12281, 12294, 12295, 12299, 12310, 12311,
   12315, 12316, 12324, 12325, 12328, 12330, 12333, 12334, 12335, 12339,
   12340, 12348, 12356, 12347, 12366, 12373, 12365, 12383, 12395, 12396,
   12409, 12413, 12414, 12430, 12431, 12435, 12444, 12445, 12446, 12448,
   12447, 12458, 12459, 12463, 12464, 12466, 12465, 12469, 12468, 12474,
   12475, 12479, 12480, 12484, 12494, 12495, 12499, 12500, 12505, 12504,
   12518, 12519, 12523, 12528, 12536, 12537, 12545, 12547, 12547, 12555,
   12563, 12554, 12585, 12586, 12590, 12598, 12599, 12603, 12613, 12614,
   12618, 12619, 12623, 12624, 12628, 12629, 12633, 12634, 12641, 12640,
   12656, 12655, 12669, 12668, 12680, 12679, 12693, 12694, 12698, 12711,
   12727, 12728, 12732, 12733, 12737, 12738, 12739, 12744, 12743, 12766,
   12768, 12771, 12773, 12776, 12777, 12780, 12784, 12788, 12792, 12796,
   12800, 12804, 12808, 12812, 12820, 12823, 12833, 12832, 12847, 12854,
   12862, 12870, 12878, 12886, 12894, 12901, 12903, 12905, 12914, 12918,
   12923, 12922, 12928, 12927, 12932, 12941, 12948, 12953, 12955, 12957,
   12959, 12961, 12969, 12980, 12988, 12990, 12992, 13000, 13007, 13014,
   13024, 13031, 13037, 13046, 13054, 13062, 13066, 13070, 13077, 13084,
   13090, 13097, 13104, 13109, 13114, 13122, 13124, 13126, 13131, 13132,
   13135, 13137, 13141, 13142, 13146, 13147, 13151, 13152, 13156, 13157,
   13161, 13162, 13165, 13167, 13174, 13185, 13184, 13200, 13199, 13206,
   13207, 13208, 13209, 13210, 13214, 13215, 13220, 13224, 13230, 13236,
   13258, 13259, 13260, 13275, 13274, 13287, 13296, 13286, 13298, 13302,
   13303, 13315, 13314, 13336, 13337, 13342, 13344, 13346, 13348, 13350,
   13352, 13354, 13356, 13358, 13360, 13362, 13364, 13366, 13371, 13372,
   13377, 13376, 13386, 13387, 13391, 13391, 13393, 13394, 13398, 13399,
   13404, 13403, 13414, 13418, 13422, 13434, 13444, 13445, 13446, 13452,
   13464, 13476, 13486, 13496, 13463, 13504, 13505, 13509, 13510, 13514,
   13515, 13527, 13531, 13532, 13533, 13536, 13538, 13542, 13543, 13547,
   13552, 13559, 13564, 13571, 13573, 13577, 13578, 13582, 13587, 13595,
   13596, 13599, 13601, 13609, 13611, 13615, 13616, 13617, 13621, 13623,
   13628, 13629, 13638, 13639, 13643, 13644, 13648, 13668, 13692, 13704,
   13715, 13734, 13742, 13754, 13769, 13790, 13791, 13792, 13801, 13802,
   13803, 13804, 13819, 13825, 13831, 13837, 13843, 13874, 13907, 13917,
   13927, 13933, 13942, 13954, 13960, 13966, 13982, 13983, 13987, 13996,
   14012, 14016, 14067, 14071, 14089, 14093, 14199, 14224, 14255, 14256,
   14272, 14282, 14286, 14292, 14298, 14308, 14314, 14323, 14333, 14334,
   14364, 14377, 14393, 14409, 14426, 14427, 14438, 14439, 14450, 14451,
   14452, 14456, 14483, 14516, 14531, 14532, 14533, 14534, 14535, 14536,
   14537, 14538, 14539, 14540, 14541, 14542, 14543, 14544, 14545, 14546,
   14547, 14548, 14549, 14550, 14551, 14552, 14553, 14554, 14555, 14556,
   14557, 14558, 14559, 14560, 14561, 14562, 14563, 14564, 14565, 14566,
   14567, 14568, 14569, 14570, 14571, 14572, 14573, 14574, 14575, 14576,
   14577, 14578, 14579, 14580, 14581, 14582, 14592, 14593, 14594, 14595,
   14596, 14597, 14598, 14599, 14600, 14601, 14602, 14603, 14604, 14605,
   14606, 14607, 14608, 14609, 14610, 14611, 14612, 14613, 14614, 14615,
   14616, 14617, 14618, 14619, 14620, 14621, 14622, 14623, 14624, 14625,
   14626, 14627, 14628, 14629, 14630, 14631, 14632, 14633, 14634, 14635,
   14636, 14637, 14642, 14643, 14644, 14645, 14646, 14647, 14648, 14649,
   14650, 14651, 14652, 14653, 14654, 14655, 14656, 14657, 14658, 14659,
   14660, 14661, 14662, 14663, 14664, 14665, 14666, 14667, 14668, 14669,
   14670, 14671, 14672, 14673, 14674, 14675, 14676, 14677, 14678, 14679,
   14680, 14681, 14682, 14683, 14684, 14685, 14686, 14687, 14688, 14689,
   14690, 14691, 14692, 14693, 14694, 14695, 14696, 14697, 14698, 14699,
   14700, 14701, 14702, 14703, 14704, 14705, 14706, 14707, 14708, 14709,
   14710, 14711, 14712, 14713, 14714, 14715, 14716, 14717, 14718, 14719,
   14720, 14721, 14722, 14723, 14724, 14725, 14726, 14727, 14728, 14729,
   14730, 14731, 14732, 14733, 14734, 14735, 14736, 14737, 14738, 14739,
   14740, 14741, 14742, 14743, 14744, 14745, 14746, 14747, 14748, 14749,
   14750, 14751, 14752, 14753, 14754, 14755, 14756, 14757, 14758, 14759,
   14760, 14761, 14762, 14763, 14764, 14765, 14766, 14767, 14768, 14769,
   14770, 14771, 14772, 14773, 14774, 14775, 14776, 14777, 14778, 14779,
   14780, 14781, 14782, 14783, 14784, 14785, 14786, 14787, 14788, 14789,
   14790, 14791, 14792, 14793, 14794, 14795, 14796, 14797, 14798, 14799,
   14800, 14801, 14802, 14803, 14804, 14805, 14806, 14807, 14808, 14809,
   14810, 14811, 14812, 14813, 14814, 14815, 14816, 14817, 14818, 14819,
   14820, 14821, 14822, 14823, 14824, 14825, 14826, 14827, 14828, 14829,
   14830, 14831, 14832, 14833, 14834, 14835, 14836, 14837, 14838, 14839,
   14840, 14841, 14842, 14843, 14844, 14845, 14846, 14847, 14848, 14849,
   14850, 14851, 14852, 14853, 14854, 14855, 14856, 14857, 14858, 14859,
   14860, 14861, 14862, 14863, 14864, 14865, 14866, 14867, 14868, 14869,
   14870, 14871, 14872, 14873, 14874, 14875, 14876, 14877, 14878, 14879,
   14880, 14881, 14882, 14883, 14884, 14885, 14886, 14887, 14888, 14889,
   14890, 14891, 14892, 14893, 14894, 14895, 14896, 14897, 14898, 14899,
   14900, 14901, 14902, 14903, 14904, 14905, 14906, 14907, 14908, 14909,
   14910, 14911, 14912, 14924, 14923, 14943, 14942, 14949, 14948, 14957,
   14965, 14964, 14975, 14974, 14980, 14988, 14990, 14995, 14995, 15004,
   15003, 15017, 15016, 15021, 15025, 15026, 15027, 15031, 15032, 15033,
   15034, 15038, 15039, 15040, 15041, 15046, 15072, 15071, 15171, 15182,
   15195, 15211, 15224, 15246, 15281, 15323, 15351, 15397, 15411, 15412,
   15413, 15414, 15418, 15436, 15454, 15455, 15459, 15460, 15461, 15462,
   15466, 15467, 15485, 15499, 15500, 15501, 15507, 15513, 15525, 15524,
   15544, 15547, 15551, 15565, 15572, 15573, 15577, 15578, 15582, 15595,
   15596, 15597, 15602, 15607, 15606, 15626, 15642, 15659, 15658, 15697,
   15698, 15702, 15703, 15707, 15708, 15709, 15710, 15712, 15711, 15725,
   15726, 15727, 15728, 15729, 15735, 15735, 15740, 15745, 15755, 15765,
   15769, 15778, 15778, 15783, 15789, 15800, 15811, 15819, 15821, 15825,
   15832, 15839, 15841, 15845, 15846, 15851, 15850, 15854, 15853, 15857,
   15856, 15860, 15859, 15862, 15863, 15864, 15865, 15866, 15867, 15868,
   15869, 15870, 15871, 15872, 15873, 15874, 15875, 15876, 15877, 15878,
   15879, 15880, 15881, 15882, 15883, 15884, 15885, 15886, 15887, 15891,
   15892, 15896, 15897, 15901, 15911, 15921, 15934, 15949, 15962, 15975,
   15987, 15992, 16000, 16005, 16013, 16031, 16051, 16063, 16076, 16085,
   16089, 16093, 16094, 16098, 16125, 16127, 16131, 16135, 16139, 16146,
   16147, 16151, 16152, 16156, 16157, 16161, 16162, 16168, 16174, 16180,
   16190, 16189, 16199, 16200, 16205, 16206, 16207, 16212, 16213, 16214,
   16218, 16219, 16223, 16235, 16244, 16254, 16263, 16277, 16278, 16283,
   16282, 16298, 16299, 16300, 16304, 16305, 16309, 16309, 16333, 16334,
   16338, 16339, 16340, 16344, 16348, 16355, 16358, 16356, 16372, 16379,
   16400, 16424, 16426, 16430, 16431, 16435, 16436, 16444, 16445, 16446,
   16447, 16453, 16459, 16469, 16471, 16473, 16478, 16479, 16480, 16481,
   16482, 16486, 16487, 16488, 16489, 16490, 16491, 16501, 16502, 16507,
   16520, 16533, 16535, 16537, 16542, 16547, 16549, 16551, 16557, 16558,
   16560, 16566, 16565, 16583, 16584, 16588, 16593, 16601, 16601, 16627,
   16626, 16643, 16647, 16652, 16657, 16656, 16668, 16669, 16671, 16673,
   16691, 16697, 16702, 16684, 16765, 16783, 16808, 16840, 16845, 16853,
   16876, 16804, 16942, 16962, 16975, 16985, 16941, 17006, 17010, 17014,
   17018, 17022, 17026, 17033, 17040, 17047, 17057, 17058, 17062, 17063,
   17064, 17068, 17069, 17074, 17076, 17075, 17081, 17082, 17086, 17096
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYSE_SYM", "ANALYZE_SYM",
  "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC", "ASCII_SYM",
  "ASENSITIVE_SYM", "AT_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC",
  "AVG_ROW_LENGTH", "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM",
  "BETWEEN_SYM", "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND",
  "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM",
  "BOOL_SYM", "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM",
  "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM",
  "CATALOG_NAME_SYM", "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET",
  "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CI_ON_SUCCESS_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM",
  "CLUSTERING_SYM", "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM",
  "COLUMNS", "COLUMN_SYM", "COLUMN_FORMAT_SYM", "COLUMN_NAME_SYM",
  "COMFORT_SYM", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM",
  "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT",
  "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE",
  "CURRENT_SYM", "CURRENT_USER", "CURRVAL_SYM", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "CYCLE_SYM", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFAULT_AUTH_SYM", "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM",
  "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXECUTE_SYM",
  "EXECUTED_GTID_SET", "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXPIRE_SYM",
  "EXPORT_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FORCE_SYM", "FOREIGN", "FOR_SYM", "FORMAT_SYM", "FOUND_SYM", "FROM",
  "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM",
  "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM",
  "GT_SYM", "HANDLER_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INCREMENT_SYM", "INDEXES",
  "INDEX_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM",
  "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM",
  "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING",
  "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_AUTO_POSITION_SYM",
  "MASTER_BIND_SYM", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_RETRY_COUNT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM",
  "MINVALUE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM", "MODIFIES_SYM",
  "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT",
  "MULTIPOLYGON", "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM",
  "NE", "NEG", "NEW_SYM", "NEXT_SYM", "NEXTVAL_SYM", "NOCACHE_SYM",
  "NOCYCLE_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM", "NOT_SYM",
  "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG", "NULL_SYM",
  "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM",
  "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM", "PARTIAL",
  "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD",
  "PHASE_SYM", "PLUGIN_DIR_SYM", "PLUGIN_SYM", "PLUGINS_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUEUE_ON_PK_SYM", "QUICK",
  "RANGE_SYM", "RB_ON_FAIL_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SEQUENCE_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET",
  "SET_VAR", "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS",
  "SQL_BEFORE_GTIDS", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_FILTERS_SYM",
  "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM",
  "TABLE_NAME_SYM", "TARGET_AFFECT_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TOKU_UNCOMPRESSED_SYM",
  "TOKU_ZLIB_SYM", "TOKU_QUICKLZ_SYM", "TOKU_LZMA_SYM", "TOKU_FAST_SYM",
  "TOKU_SMALL_SYM", "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM",
  "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM",
  "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM",
  "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM", "WHERE",
  "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM",
  "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR",
  "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "INVISIBLE_SYM", "VISIBLE_SYM",
  "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'", "'^'", "'~'", "'('",
  "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'", "'.'", "':'", "$accept",
  "query", "@1", "opt_end_of_input", "verb_clause", "statement",
  "deallocate", "deallocate_or_drop", "prepare", "prepare_src", "execute",
  "@2", "execute_using", "execute_var_list", "execute_var_ident", "help",
  "@3", "change", "@4", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "master_file_def", "create",
  "@5", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15",
  "opt_sequence", "sequence_defs", "sequence_def", "server_def",
  "server_options_list", "server_option", "event_tail", "@16",
  "ev_schedule_time", "@17", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "@18", "ev_sql_stmt_inner", "clear_privileges", "sp_name",
  "sp_a_chistics", "sp_c_chistics", "sp_chistic", "sp_c_chistic",
  "sp_suid", "call", "@19", "opt_sp_cparam_list", "opt_sp_cparams",
  "sp_cparams", "sp_fdparam_list", "sp_fdparams", "sp_init_param",
  "sp_fdparam", "sp_pdparam_list", "sp_pdparams", "sp_pdparam",
  "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1", "sp_decls", "sp_decl",
  "@20", "@21", "@22", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "@23", "sp_proc_stmt", "sp_proc_stmt_if", "@24",
  "sp_proc_stmt_statement", "@25", "sp_proc_stmt_return", "@26",
  "sp_proc_stmt_unlabeled", "@27", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch", "@28",
  "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list", "sp_if",
  "@29", "@30", "@31", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "@32", "@33", "searched_case_stmt", "@34",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "@35", "@36", "searched_when_clause", "@37", "@38",
  "else_clause_opt", "sp_labeled_control", "@39", "sp_opt_label",
  "sp_labeled_block", "@40", "sp_unlabeled_block", "@41",
  "sp_block_content", "@42", "sp_unlabeled_control", "@43", "@44", "@45",
  "@46", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "@47", "change_ts_options", "change_ts_option", "tablespace_option_list",
  "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "ts_wait", "size_number", "create2", "create2a", "@48",
  "create3", "@49", "@50", "opt_create_partitioning", "opt_partitioning",
  "partitioning", "@51", "have_partitioning", "partition_entry", "@52",
  "partition", "part_type_def", "@53", "opt_linear", "opt_key_algo",
  "part_field_list", "part_field_item_list", "part_field_item",
  "part_column_list", "part_func", "sub_part_func", "opt_num_parts",
  "opt_sub_part", "@54", "@55", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "@56", "part_name",
  "opt_part_values", "@57", "@58", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "@59", "@60",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "@61", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "@62", "@63", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "@64", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "@65", "type", "@66", "@67", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "float_options", "precision", "type_datetime_precision",
  "func_datetime_precision", "field_options", "field_opt_list",
  "field_option", "field_length", "opt_field_length", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "@68", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique_combo_clustering",
  "unique_combo_clustering", "unique_opt_clustering", "unique",
  "clustering", "fulltext", "spatial", "init_key_options", "key_alg",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "key_using_alg", "visibility", "all_key_opt", "normal_key_opt",
  "spatial_key_opt", "fulltext_key_opt", "btree_or_rtree", "key_list",
  "key_part", "opt_ident", "opt_component", "string_list", "alter", "@69",
  "@70", "@71", "@72", "@73", "@74", "@75", "alter_user_list",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "@76", "@77", "@78",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "@79", "add_part_extra", "reorg_partition_rule", "@80",
  "reorg_parts_rule", "@81", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "@82", "@83", "@84",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "@85", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_connection_opts",
  "slave_user_name_opt", "slave_user_pass_opt", "slave_plugin_auth_opt",
  "slave_plugin_dir_opt", "opt_slave_thread_option_list",
  "slave_thread_option_list", "slave_thread_option", "slave_until",
  "slave_until_opts", "checksum", "@86", "opt_checksum_type", "repair",
  "@87", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "@88", "binlog_base64_event", "check", "@89",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "@90", "opt_no_write_to_binlog", "rename", "@91", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "@92",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "@93",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "@94", "cache_keys_spec", "@95",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "@96",
  "select_part2", "@97", "@98", "select_part3", "select_into",
  "select_update", "@99", "@100", "select_from", "select_options",
  "select_option_list", "select_option", "select_lock_type",
  "select_item_list", "select_item", "remember_name", "remember_end",
  "select_alias", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "simple_expr", "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@101", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "@102", "@103", "@104", "variable", "@105", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause", "@106",
  "gorder_list", "in_sum_expr", "@107", "cast_type", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "@108", "@109", "@110", "@111",
  "@112", "@113", "@114", "normal_join", "opt_use_partition",
  "use_partition", "table_factor", "@115", "select_derived_union", "@116",
  "@117", "select_init2_derived", "select_part2_derived", "@118", "@119",
  "select_derived", "@120", "select_derived2", "@121", "@122",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "@123",
  "@124", "index_hints_list", "opt_index_hints_list", "@125",
  "opt_key_definition", "@126", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "@127", "having_clause", "@128", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "@129", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_analyse_clause", "@130",
  "opt_procedure_analyse_params", "procedure_analyse_param",
  "select_var_list_init", "@131", "select_var_list", "select_var_ident",
  "into", "@132", "into_destination", "@133", "@134", "do", "@135", "drop",
  "@136", "@137", "@138", "@139", "@140", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "force_drop", "opt_temporary",
  "drop_ts_options_list", "drop_ts_options", "drop_ts_option", "insert",
  "@141", "@142", "replace", "@143", "@144", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "@145", "fields", "insert_values", "@146", "@147", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "@148", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "@149", "update", "@150", "@151", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority",
  "opt_queue_on_pk", "opt_ci_on_success", "opt_rb_on_fail",
  "opt_target_affect_row", "delete", "@152", "single_multi", "@153",
  "@154", "@155", "table_wild_list", "table_wild_one", "opt_wild",
  "opt_delete_options", "opt_delete_option", "truncate", "@156",
  "opt_table_sym", "opt_profile_defs", "profile_defs", "profile_def",
  "opt_profile_args", "show", "@157", "show_param", "@158", "@159",
  "show_engine_param", "master_or_binary", "opt_storage", "opt_db",
  "opt_full", "from_or_in", "binlog_in", "binlog_from", "wild_and_where",
  "describe", "@160", "@161", "explanable_command", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "@162",
  "flush_options", "@163", "@164", "opt_flush_lock", "@165",
  "flush_options_list", "flush_option", "opt_table_list", "reset", "@166",
  "reset_options", "reset_option", "@167", "slave_reset_options", "purge",
  "@168", "purge_options", "purge_option", "kill", "kill_option", "use",
  "load", "@169", "@170", "@171", "@172", "data_or_xml", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
  "field_term", "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys_nonewline",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "@173", "start_option_value_list", "@174", "@175", "@176",
  "start_option_value_list_following_option_type", "@177",
  "option_value_list_continued", "option_value_list", "@178", "@179",
  "option_value", "@180", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "@181", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "@182", "opt_wait",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "@183", "handler", "@184", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "@185",
  "handler_rkey_mode", "revoke", "@186", "revoke_command", "grant", "@187",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "@188", "@189", "@190",
  "@191", "opt_and", "require_list", "require_list_element", "grant_ident",
  "user_list", "grant_list", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "require_clause", "grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin", "@192",
  "opt_work", "opt_chain", "opt_release", "opt_savepoint", "commit",
  "rollback", "savepoint", "release", "union_clause", "union_list", "@193",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "@194",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "@195", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "@196",
  "view_list_opt", "view_list", "view_select", "@197", "view_select_aux",
  "@198", "create_view_select_paren", "create_view_select", "@199",
  "view_check_option", "trigger_tail", "@200", "@201", "@202", "udf_tail",
  "sf_tail", "@203", "@204", "@205", "@206", "@207", "sp_tail", "@208",
  "@209", "@210", "@211", "xa", "xid", "begin_or_start",
  "opt_join_or_resume", "opt_one_phase", "opt_suspend", "@212",
  "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   124,    38,    45,    43,    42,
      47,    37,    94,   126,    40,    41,    44,    33,   123,   125,
      59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   664,   665,   666,   665,   665,   667,   667,   668,   668,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   670,   671,   671,   672,   673,   673,   675,   674,
     676,   676,   677,   677,   678,   680,   679,   682,   681,   683,
     683,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   684,   685,   685,   685,   686,   687,   687,   687,   687,
     689,   688,   690,   691,   688,   692,   693,   688,   694,   695,
     688,   696,   697,   688,   698,   688,   699,   688,   688,   688,
     688,   688,   700,   700,   701,   701,   702,   702,   702,   702,
     702,   702,   702,   702,   703,   704,   704,   705,   705,   705,
     705,   705,   705,   705,   707,   706,   709,   708,   708,   710,
     710,   710,   710,   711,   711,   712,   712,   713,   713,   714,
     714,   715,   715,   717,   716,   718,   718,   718,   718,   718,
     718,   718,   718,   718,   718,   718,   718,   718,   719,   720,
     720,   721,   721,   722,   722,   723,   723,   723,   723,   723,
     723,   723,   724,   724,   724,   725,   725,   727,   726,   728,
     728,   729,   729,   730,   730,   731,   731,   732,   732,   733,
     734,   735,   735,   736,   736,   737,   738,   738,   738,   738,
     739,   739,   740,   740,   741,   741,   743,   742,   742,   744,
     742,   745,   742,   746,   746,   747,   747,   748,   749,   749,
     750,   751,   751,   752,   752,   752,   752,   752,   753,   754,
     754,   755,   755,   756,   756,   757,   757,   758,   758,   758,
     759,   759,   759,   759,   759,   759,   759,   759,   759,   759,
     759,   759,   760,   761,   762,   762,   763,   763,   764,   764,
     765,   766,   766,   767,   767,   768,   769,   769,   770,   771,
     771,   771,   771,   771,   771,   771,   771,   771,   771,   771,
     771,   771,   772,   772,   773,   774,   773,   775,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,
     777,   776,   779,   778,   781,   780,   783,   782,   784,   785,
     786,   788,   787,   789,   790,   790,   790,   791,   791,   793,
     794,   795,   792,   796,   796,   796,   797,   797,   799,   800,
     798,   802,   801,   803,   803,   804,   804,   806,   807,   805,
     809,   810,   808,   811,   811,   813,   812,   814,   814,   816,
     815,   818,   817,   820,   819,   821,   822,   823,   821,   824,
     825,   821,   826,   826,   827,   827,   827,   828,   829,   830,
     831,   831,   832,   832,   833,   834,   835,   835,   837,   836,
     838,   838,   838,   839,   839,   839,   840,   840,   841,   841,
     841,   842,   842,   842,   842,   842,   842,   842,   842,   843,
     843,   844,   844,   844,   845,   845,   845,   845,   845,   846,
     846,   847,   847,   847,   848,   848,   848,   848,   848,   848,
     848,   849,   849,   850,   850,   850,   851,   851,   851,   852,
     853,   854,   855,   856,   857,   857,   857,   858,   859,   860,
     861,   862,   863,   864,   865,   866,   867,   867,   868,   868,
     869,   869,   869,   869,   870,   871,   870,   872,   873,   872,
     874,   872,   875,   876,   876,   878,   877,   879,   881,   880,
     882,   883,   884,   883,   883,   883,   883,   883,   885,   885,
     886,   886,   887,   887,   888,   888,   889,   890,   891,   892,
     893,   893,   894,   895,   894,   896,   894,   897,   897,   898,
     899,   900,   900,   901,   901,   902,   902,   904,   903,   905,
     906,   907,   906,   908,   906,   909,   909,   910,   910,   911,
     911,   913,   914,   912,   915,   915,   916,   916,   917,   917,
     918,   918,   920,   919,   921,   922,   922,   923,   923,   924,
     924,   924,   924,   924,   924,   924,   924,   926,   927,   925,
     928,   928,   929,   929,   930,   930,   931,   931,   932,   932,
     933,   933,   934,   935,   935,   936,   936,   937,   937,   938,
     938,   938,   939,   939,   939,   939,   939,   939,   939,   939,
     939,   939,   939,   939,   939,   939,   939,   939,   939,   939,
     939,   940,   939,   939,   939,   939,   939,   939,   939,   939,
     939,   939,   939,   941,   942,   943,   944,   945,   945,   945,
     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,
     946,   946,   946,   947,   947,   948,   948,   948,   948,   949,
     950,   950,   951,   951,   952,   952,   953,   953,   953,   953,
     953,   953,   954,   954,   955,   956,   956,   957,   959,   958,
     960,   960,   960,   960,   960,   960,   960,   960,   960,   960,
     960,   960,   960,   960,   960,   960,   960,   960,   960,   960,
     960,   960,   960,   960,   960,   960,   960,   960,   960,   960,
     960,   960,   960,   960,   960,   961,   960,   962,   960,   960,
     960,   963,   963,   963,   963,   963,   963,   963,   963,   964,
     965,   965,   966,   966,   967,   967,   967,   967,   967,   968,
     968,   968,   968,   968,   969,   969,   969,   970,   970,   970,
     971,   972,   972,   973,   973,   973,   974,   974,   975,   975,
     976,   976,   976,   977,   977,   977,   977,   978,   978,   979,
     979,   980,   980,   981,   981,   982,   982,   982,   982,   982,
     982,   982,   982,   982,   982,   982,   982,   982,   982,   982,
     982,   982,   982,   983,   984,   985,   985,   986,   986,   987,
     987,   988,   988,   989,   989,   990,   990,   991,   991,   992,
     993,   993,   994,   994,   995,   995,   996,   996,   996,   997,
     997,   997,   998,   998,   998,   998,   998,   998,   998,   999,
     999,  1001,  1000,  1002,  1002,  1003,  1004,  1004,  1004,  1004,
    1005,  1006,  1007,  1007,  1008,  1009,  1009,  1010,  1010,  1011,
    1011,  1012,  1013,  1013,  1014,  1014,  1015,  1015,  1015,  1015,
    1016,  1016,  1016,  1016,  1016,  1017,  1017,  1017,  1017,  1017,
    1018,  1019,  1019,  1020,  1020,  1021,  1021,  1022,  1022,  1022,
    1023,  1023,  1024,  1024,  1025,  1025,  1025,  1026,  1027,  1028,
    1029,  1030,  1031,  1031,  1032,  1032,  1033,  1033,  1034,  1034,
    1035,  1035,  1036,  1036,  1037,  1037,  1038,  1038,  1039,  1039,
    1040,  1040,  1040,  1041,  1041,  1042,  1043,  1043,  1044,  1044,
    1044,  1045,  1045,  1046,  1046,  1047,  1047,  1048,  1048,  1049,
    1049,  1051,  1050,  1052,  1050,  1050,  1053,  1050,  1054,  1050,
    1055,  1050,  1056,  1050,  1057,  1050,  1050,  1050,  1050,  1050,
    1050,  1050,  1058,  1058,  1059,  1059,  1059,  1059,  1060,  1060,
    1061,  1061,  1062,  1062,  1063,  1063,  1063,  1063,  1063,  1063,
    1063,  1063,  1063,  1063,  1064,  1063,  1063,  1065,  1063,  1066,
    1063,  1063,  1063,  1063,  1063,  1067,  1068,  1068,  1070,  1069,
    1071,  1071,  1071,  1073,  1072,  1074,  1075,  1074,  1076,  1076,
    1077,  1078,  1078,  1079,  1080,  1080,  1080,  1081,  1080,  1082,
    1083,  1080,  1080,  1080,  1080,  1080,  1080,  1080,  1080,  1080,
    1080,  1080,  1080,  1080,  1080,  1080,  1080,  1080,  1084,  1084,
    1084,  1084,  1084,  1085,  1085,  1086,  1086,  1087,  1087,  1088,
    1088,  1089,  1089,  1089,  1090,  1090,  1090,  1091,  1091,  1091,
    1091,  1093,  1092,  1092,  1094,  1095,  1095,  1096,  1096,  1097,
    1097,  1097,  1098,  1099,  1099,  1100,  1100,  1101,  1101,  1102,
    1102,  1103,  1103,  1104,  1104,  1105,  1105,  1106,  1106,  1107,
    1107,  1107,  1107,  1107,  1109,  1108,  1110,  1110,  1110,  1112,
    1111,  1113,  1113,  1114,  1114,  1115,  1115,  1115,  1117,  1116,
    1118,  1120,  1119,  1121,  1121,  1122,  1122,  1123,  1123,  1123,
    1123,  1123,  1123,  1125,  1124,  1126,  1126,  1126,  1128,  1127,
    1127,  1129,  1129,  1130,  1130,  1131,  1133,  1132,  1134,  1134,
    1135,  1135,  1136,  1137,  1138,  1138,  1140,  1139,  1141,  1141,
    1142,  1142,  1143,  1144,  1146,  1145,  1148,  1147,  1149,  1149,
    1150,  1150,  1151,  1152,  1152,  1153,  1153,  1154,  1154,  1156,
    1155,  1158,  1159,  1157,  1160,  1160,  1161,  1161,  1161,  1161,
    1161,  1163,  1164,  1162,  1165,  1165,  1165,  1166,  1166,  1167,
    1167,  1168,  1168,  1168,  1169,  1169,  1169,  1170,  1170,  1170,
    1171,  1171,  1172,  1173,  1174,  1174,  1174,  1174,  1174,  1175,
    1175,  1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,
    1176,  1176,  1177,  1177,  1177,  1177,  1177,  1177,  1178,  1178,
    1178,  1178,  1178,  1178,  1178,  1178,  1178,  1178,  1178,  1178,
    1178,  1178,  1179,  1179,  1179,  1179,  1179,  1179,  1179,  1179,
    1179,  1179,  1179,  1179,  1179,  1179,  1179,  1180,  1180,  1181,
    1181,  1182,  1182,  1183,  1183,  1184,  1184,  1184,  1184,  1184,
    1184,  1185,  1185,  1186,  1186,  1186,  1186,  1186,  1186,  1186,
    1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,
    1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,  1186,
    1186,  1186,  1186,  1186,  1186,  1187,  1187,  1187,  1187,  1187,
    1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,
    1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,  1187,
    1187,  1187,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,
    1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,  1188,
    1188,  1188,  1188,  1188,  1189,  1189,  1189,  1189,  1189,  1189,
    1189,  1189,  1189,  1189,  1189,  1189,  1189,  1189,  1189,  1189,
    1189,  1189,  1189,  1189,  1189,  1189,  1189,  1189,  1189,  1190,
    1190,  1190,  1190,  1190,  1190,  1190,  1190,  1192,  1191,  1191,
    1193,  1193,  1194,  1194,  1195,  1195,  1196,  1196,  1197,  1197,
    1198,  1199,  1199,  1199,  1199,  1199,  1199,  1199,  1200,  1201,
    1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,  1199,
    1199,  1202,  1199,  1204,  1203,  1205,  1205,  1205,  1206,  1206,
    1207,  1207,  1208,  1209,  1208,  1210,  1210,  1212,  1211,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1214,  1214,  1215,  1215,  1216,  1216,  1217,  1217,  1218,  1218,
    1219,  1219,  1220,  1220,  1221,  1221,  1222,  1223,  1223,  1224,
    1224,  1225,  1225,  1226,  1225,  1227,  1225,  1228,  1225,  1225,
    1229,  1225,  1230,  1225,  1225,  1231,  1225,  1232,  1225,  1225,
    1233,  1233,  1233,  1234,  1234,  1235,  1237,  1236,  1236,  1236,
    1238,  1239,  1240,  1238,  1241,  1243,  1244,  1242,  1246,  1245,
    1248,  1249,  1247,  1250,  1251,  1252,  1252,  1253,  1253,  1253,
    1253,  1254,  1254,  1256,  1255,  1257,  1255,  1258,  1258,  1259,
    1260,  1259,  1262,  1261,  1263,  1263,  1264,  1264,  1265,  1265,
    1266,  1266,  1267,  1267,  1267,  1267,  1267,  1267,  1267,  1267,
    1267,  1267,  1267,  1267,  1268,  1268,  1268,  1268,  1268,  1268,
    1268,  1268,  1268,  1269,  1269,  1269,  1269,  1270,  1270,  1270,
    1271,  1271,  1272,  1272,  1273,  1274,  1273,  1275,  1276,  1275,
    1277,  1277,  1278,  1278,  1279,  1279,  1280,  1280,  1280,  1281,
    1282,  1282,  1283,  1284,  1284,  1286,  1285,  1287,  1287,  1288,
    1288,  1288,  1289,  1289,  1290,  1290,  1291,  1292,  1292,  1292,
    1293,  1293,  1293,  1293,  1293,  1294,  1294,  1295,  1295,  1295,
    1295,  1295,  1295,  1296,  1296,  1296,  1296,  1296,  1297,  1297,
    1297,  1297,  1297,  1298,  1298,  1298,  1298,  1299,  1300,  1300,
    1301,  1302,  1301,  1303,  1303,  1303,  1304,  1306,  1305,  1307,
    1307,  1308,  1308,  1310,  1309,  1312,  1313,  1311,  1311,  1311,
    1315,  1314,  1317,  1316,  1318,  1316,  1319,  1320,  1316,  1316,
    1316,  1316,  1316,  1316,  1321,  1316,  1316,  1316,  1316,  1316,
    1316,  1322,  1322,  1323,  1324,  1325,  1325,  1326,  1327,  1327,
    1328,  1328,  1329,  1329,  1330,  1330,  1331,  1331,  1331,  1332,
    1332,  1334,  1335,  1333,  1337,  1338,  1336,  1339,  1339,  1339,
    1339,  1340,  1340,  1341,  1341,  1342,  1343,  1343,  1343,  1344,
    1343,  1345,  1345,  1346,  1346,  1347,  1346,  1348,  1346,  1349,
    1349,  1350,  1350,  1351,  1352,  1352,  1353,  1353,  1355,  1354,
    1356,  1356,  1357,  1357,  1358,  1358,  1359,  1360,  1359,  1362,
    1363,  1361,  1364,  1364,  1365,  1366,  1366,  1367,  1368,  1368,
    1369,  1369,  1370,  1370,  1371,  1371,  1372,  1372,  1374,  1373,
    1376,  1375,  1377,  1375,  1378,  1375,  1379,  1379,  1380,  1380,
    1381,  1381,  1382,  1382,  1383,  1383,  1383,  1385,  1384,  1386,
    1386,  1387,  1387,  1388,  1388,  1389,  1389,  1389,  1389,  1389,
    1389,  1389,  1389,  1389,  1390,  1390,  1392,  1391,  1393,  1393,
    1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,
    1394,  1393,  1395,  1393,  1393,  1393,  1393,  1393,  1393,  1393,
    1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,
    1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,  1393,
    1393,  1393,  1393,  1393,  1393,  1396,  1396,  1396,  1397,  1397,
    1398,  1398,  1399,  1399,  1400,  1400,  1401,  1401,  1402,  1402,
    1403,  1403,  1404,  1404,  1404,  1406,  1405,  1407,  1405,  1408,
    1408,  1408,  1408,  1408,  1409,  1409,  1410,  1410,  1410,  1410,
    1411,  1411,  1411,  1413,  1412,  1415,  1416,  1414,  1414,  1417,
    1417,  1418,  1417,  1419,  1419,  1420,  1420,  1420,  1420,  1420,
    1420,  1420,  1420,  1420,  1420,  1420,  1420,  1420,  1421,  1421,
    1423,  1422,  1424,  1424,  1426,  1425,  1425,  1425,  1427,  1427,
    1429,  1428,  1430,  1431,  1431,  1432,  1433,  1433,  1433,  1434,
    1436,  1437,  1438,  1439,  1435,  1440,  1440,  1441,  1441,  1442,
    1442,  1442,  1443,  1443,  1443,  1444,  1444,  1445,  1445,  1446,
    1446,  1446,  1446,  1447,  1447,  1448,  1448,  1449,  1449,  1450,
    1450,  1451,  1451,  1452,  1452,  1453,  1453,  1453,  1454,  1454,
    1455,  1455,  1456,  1456,  1457,  1457,  1458,  1459,  1459,  1459,
    1459,  1460,  1460,  1460,  1461,  1462,  1462,  1462,  1463,  1463,
    1463,  1463,  1463,  1463,  1463,  1463,  1463,  1463,  1464,  1464,
    1464,  1464,  1464,  1465,  1465,  1465,  1466,  1466,  1467,  1467,
    1468,  1469,  1469,  1470,  1470,  1471,  1471,  1471,  1472,  1472,
    1472,  1472,  1473,  1473,  1473,  1474,  1474,  1475,  1476,  1476,
    1477,  1478,  1479,  1480,  1481,  1481,  1482,  1482,  1483,  1483,
    1483,  1484,  1484,  1484,  1485,  1485,  1485,  1485,  1485,  1485,
    1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,
    1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,
    1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,
    1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,  1485,
    1485,  1485,  1485,  1485,  1485,  1485,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,  1486,
    1486,  1486,  1486,  1488,  1487,  1490,  1489,  1491,  1489,  1489,
    1492,  1489,  1494,  1493,  1493,  1495,  1495,  1497,  1496,  1498,
    1496,  1500,  1499,  1499,  1501,  1501,  1501,  1502,  1502,  1502,
    1502,  1503,  1503,  1503,  1503,  1504,  1506,  1505,  1505,  1505,
    1505,  1505,  1505,  1505,  1505,  1507,  1507,  1507,  1508,  1508,
    1508,  1508,  1509,  1510,  1511,  1511,  1512,  1512,  1512,  1512,
    1513,  1513,  1513,  1514,  1514,  1514,  1514,  1514,  1516,  1515,
    1517,  1517,  1517,  1517,  1518,  1518,  1519,  1519,  1520,  1521,
    1521,  1521,  1521,  1523,  1522,  1524,  1524,  1525,  1524,  1526,
    1526,  1527,  1527,  1528,  1528,  1528,  1528,  1529,  1528,  1530,
    1530,  1530,  1530,  1530,  1532,  1531,  1533,  1533,  1533,  1533,
    1533,  1535,  1534,  1536,  1536,  1536,  1536,  1537,  1537,  1538,
    1538,  1539,  1539,  1540,  1540,  1542,  1541,  1543,  1541,  1544,
    1541,  1545,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,
    1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1541,  1546,
    1546,  1547,  1547,  1548,  1548,  1548,  1549,  1549,  1549,  1549,
    1550,  1550,  1551,  1551,  1552,  1552,  1552,  1552,  1552,  1553,
    1553,  1554,  1554,  1555,  1556,  1556,  1556,  1556,  1556,  1557,
    1557,  1558,  1558,  1559,  1559,  1560,  1560,  1560,  1560,  1560,
    1562,  1561,  1563,  1563,  1564,  1564,  1564,  1565,  1565,  1565,
    1566,  1566,  1567,  1568,  1568,  1569,  1570,  1571,  1571,  1573,
    1572,  1574,  1574,  1574,  1575,  1575,  1577,  1576,  1578,  1578,
    1579,  1579,  1579,  1580,  1580,  1581,  1582,  1581,  1583,  1584,
    1585,  1586,  1586,  1587,  1587,  1588,  1588,  1588,  1588,  1588,
    1588,  1588,  1588,  1589,  1589,  1589,  1590,  1590,  1590,  1590,
    1590,  1591,  1591,  1591,  1591,  1591,  1591,  1592,  1592,  1593,
    1594,  1595,  1595,  1595,  1596,  1597,  1597,  1597,  1598,  1598,
    1598,  1600,  1599,  1601,  1601,  1602,  1602,  1604,  1603,  1606,
    1605,  1605,  1607,  1607,  1609,  1608,  1610,  1610,  1610,  1610,
    1612,  1613,  1614,  1611,  1615,  1615,  1617,  1618,  1619,  1620,
    1621,  1616,  1623,  1624,  1625,  1626,  1622,  1627,  1627,  1627,
    1627,  1627,  1627,  1628,  1628,  1628,  1629,  1629,  1630,  1630,
    1630,  1631,  1631,  1632,  1633,  1632,  1634,  1634,  1635,  1636
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     4,     1,     2,     0,     4,
       0,     2,     3,     1,     2,     0,     3,     0,     5,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       3,     1,     0,     1,     3,     1,     3,     3,     3,     3,
       0,     7,     0,     0,     8,     0,     0,    15,     0,     0,
      15,     0,     0,    15,     0,     6,     0,     3,     4,     4,
       3,     2,     0,     1,     1,     2,     2,     2,     3,     3,
       2,     1,     1,     1,    10,     1,     3,     2,     2,     2,
       2,     2,     2,     2,     0,    13,     0,     6,     2,     0,
       1,     3,     1,     0,     2,     0,     2,     0,     1,     3,
       4,     0,     2,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       1,     0,     2,     0,     2,     2,     2,     2,     2,     3,
       3,     1,     1,     1,     2,     3,     3,     0,     4,     0,
       3,     0,     1,     3,     1,     0,     1,     3,     1,     0,
       3,     0,     1,     3,     1,     4,     0,     1,     1,     1,
       0,     3,     2,     3,     0,     3,     0,     5,     5,     0,
       7,     0,     6,     1,     1,     1,     3,     1,     1,     1,
       3,     0,     1,     1,     1,     1,     2,     1,     3,     1,
       1,     0,     1,     0,     2,     3,     5,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     4,     0,     1,     1,     3,     1,     3,
       3,     1,     2,     1,     1,     1,     1,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     0,     0,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     5,     0,     2,     0,     3,     0,     2,     2,     2,
       2,     0,     6,     2,     0,     2,     1,     1,     3,     0,
       0,     0,     7,     0,     2,     2,     1,     1,     0,     0,
       8,     0,     6,     1,     2,     1,     2,     0,     0,     6,
       0,     0,     6,     0,     2,     0,     5,     0,     1,     0,
       5,     0,     2,     0,     5,     4,     0,     0,     8,     0,
       0,     8,     1,     1,     1,     1,     1,     2,     4,     5,
       0,     4,     4,     4,     3,     3,     2,     2,     0,     2,
       1,     2,     3,     1,     1,     1,     0,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     0,
       1,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     0,     1,     1,     2,     3,     1,     1,     1,     2,
       2,     2,     1,     1,     1,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     4,     1,     1,     1,     1,
       2,     3,     2,     4,     5,     0,     5,     0,     0,     5,
       0,     7,     1,     0,     1,     0,     4,     0,     0,     3,
       5,     6,     0,     4,     2,     2,     2,     2,     0,     1,
       0,     3,     0,     1,     1,     3,     1,     4,     5,     5,
       0,     2,     0,     0,     7,     0,    10,     1,     3,     1,
       1,     0,     2,     0,     3,     1,     3,     0,     6,     1,
       0,     0,     5,     0,     4,     1,     1,     1,     3,     1,
       3,     0,     0,     5,     1,     3,     1,     1,     0,     3,
       1,     3,     0,     4,     1,     0,     1,     2,     1,     3,
       4,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     0,     1,     1,     2,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     0,     6,     1,     1,     3,     4,     4,     2,     2,
       2,     3,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     2,     2,     7,     8,     8,     8,
       8,     2,     0,     1,     4,     0,     1,     2,     0,     4,
       3,     3,     3,     1,     2,     1,     1,     3,     2,     3,
       2,     2,     1,     3,     3,     2,     3,     1,     2,     2,
       2,     1,     2,     1,     1,     1,     2,     3,     2,     3,
       2,     2,     3,     3,     3,     0,     6,     0,     6,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     1,     2,     1,     2,     3,     2,     1,
       1,     1,     1,     1,     1,     1,     2,     0,     1,     1,
       5,     0,     3,     0,     2,     3,     0,     1,     2,     1,
       1,     1,     1,     3,     3,     3,     3,     0,     1,     0,
       1,     0,     1,     2,     1,     1,     2,     2,     3,     1,
       3,     2,     1,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     2,     1,     1,
       1,     1,     1,     0,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     0,     1,     1,     2,     2,     1,
       2,     2,     0,     1,     1,     1,     3,     1,     3,     0,
       1,     0,     4,     1,     1,     1,     0,     1,     2,     1,
       1,     2,     1,     3,     3,     1,     1,     0,     2,     0,
       1,     5,     0,     3,     3,     1,     0,     2,     2,     2,
       0,     3,     3,     6,     6,     1,     1,     2,     2,     2,
       1,     2,     2,     1,     1,     0,     1,     1,     1,     1,
       0,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     0,     1,     2,     0,     1,     0,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     1,     1,
       3,     2,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     4,     2,     1,     4,     0,     1,     0,     2,     1,
       3,     0,     7,     0,     5,     7,     0,     5,     0,     5,
       0,     5,     0,     4,     0,    10,     3,     4,     3,     3,
       7,     4,     3,     5,     0,     3,     1,     4,     0,     3,
       0,     2,     0,     1,     0,     2,     2,     2,     2,     1,
       1,     1,     4,     4,     0,     6,     4,     0,     5,     0,
       6,     4,     3,     1,     7,     3,     1,     1,     0,     5,
       0,     3,     2,     0,     5,     0,     0,     6,     1,     3,
       1,     1,     3,     2,     3,     2,     4,     0,     6,     0,
       0,     8,     4,     4,     3,     3,     2,     2,     6,     4,
       5,     3,     5,     1,     1,     1,     1,     1,     0,     1,
       1,     2,     2,     3,     3,     3,     3,     0,     1,     0,
       1,     0,     1,     1,     0,     2,     1,     0,     1,     1,
       1,     0,     6,     3,     3,     0,     1,     1,     3,     3,
       2,     2,     4,     0,     3,     0,     3,     0,     3,     0,
       3,     0,     1,     1,     3,     1,     1,     0,     2,     1,
       3,     3,     3,     1,     0,     5,     0,     1,     1,     0,
       6,     0,     1,     1,     2,     1,     1,     1,     0,     5,
       2,     0,     5,     0,     1,     1,     2,     1,     1,     1,
       1,     1,     2,     0,     6,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     4,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     1,     0,     6,     1,     1,
       1,     3,     3,     4,     0,     6,     0,     2,     0,     4,
       0,     2,     1,     2,     4,     2,     3,     2,     3,     0,
       3,     0,     0,     5,     2,     1,     2,     1,     1,     2,
       2,     0,     0,    16,     8,     4,     3,     0,     1,     2,
       1,     1,     1,     1,     0,     3,     5,     3,     1,     1,
       3,     4,     0,     0,     0,     2,     2,     1,     1,     0,
       2,     3,     3,     3,     2,     3,     4,     3,     4,     3,
       4,     1,     3,     4,     3,     3,     6,     1,     5,     6,
       5,     7,     6,     8,     5,     6,     4,     4,     5,     3,
       4,     1,     3,     3,     3,     3,     3,     3,     5,     5,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     3,     2,     2,     2,     2,     3,     3,
       5,     6,     4,     4,     7,     2,     6,     5,     6,     6,
       4,     4,     4,     4,     5,     4,     6,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     8,     8,     6,     6,
       1,     6,     6,     8,     8,     6,     8,     6,     2,     8,
       8,     2,     2,     2,     4,     4,     4,     4,     3,     8,
       6,     8,     4,     6,     4,     4,     4,     6,     8,     4,
       3,     6,     4,     6,     5,     8,     7,    10,     1,     6,
       4,     4,     4,     4,     4,     6,     4,     0,     5,     6,
       2,     3,     0,     4,     0,     3,     0,     1,     1,     3,
       4,     4,     5,     4,     4,     4,     5,     4,     0,     0,
       7,     4,     5,     4,     5,     4,     4,     4,     4,     4,
       5,     0,     8,     0,     3,     3,     1,     4,     0,     1,
       0,     2,     0,     0,     4,     4,     2,     0,     3,     2,
       3,     2,     1,     2,     1,     2,     1,     2,     2,     2,
       0,     1,     1,     3,     1,     3,     1,     3,     0,     1,
       0,     2,     4,     5,     1,     1,     1,     1,     4,     1,
       3,     3,     3,     0,     6,     0,     6,     0,     8,     4,
       0,     8,     0,    10,     6,     0,     8,     0,    10,     6,
       1,     2,     2,     0,     1,     5,     0,     5,     3,     5,
       2,     0,     0,     7,     1,     0,     0,     6,     0,     3,
       0,     0,     5,     0,     1,     0,     1,     0,     2,     3,
       3,     1,     1,     0,     7,     0,     7,     1,     2,     0,
       0,     2,     0,     2,     0,     1,     1,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     1,
       0,     2,     0,     1,     0,     0,     3,     0,     0,     3,
       2,     0,     0,     4,     4,     2,     0,     1,     1,     3,
       3,     1,     2,     0,     1,     0,     4,     4,     2,     0,
       1,     1,     0,     1,     0,     1,     2,     1,     3,     3,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     0,     6,     0,     1,     3,     1,     0,     2,     3,
       1,     2,     1,     0,     3,     0,     0,     7,     2,     1,
       0,     3,     0,     9,     0,     4,     0,     0,     9,     4,
       6,     4,     4,     4,     0,     6,     4,     4,     4,     5,
       4,     1,     3,     1,     2,     1,     3,     1,     0,     2,
       0,     1,     0,     1,     0,     1,     1,     2,     3,     1,
       1,     0,     0,    11,     0,     0,     6,     0,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     3,     4,     0,
       3,     3,     1,     2,     2,     0,     3,     0,     5,     3,
       1,     3,     1,     3,     1,     1,     0,     1,     0,     4,
       0,     1,     3,     1,     1,     1,     0,     0,     6,     0,
       0,    15,     3,     1,     3,     3,     1,     3,     0,     1,
       0,     2,     0,     1,     0,     1,     0,     2,     0,     4,
       0,     7,     0,     5,     0,     6,     1,     3,     2,     4,
       0,     2,     0,     2,     1,     1,     1,     0,     5,     0,
       1,     0,     1,     1,     3,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     0,     3,     0,     3,     2,     4,
       4,     3,     4,     4,     1,     3,     3,     6,     2,     2,
       0,     6,     0,     6,     5,     2,     1,     5,     5,     2,
       2,     1,     4,     3,     2,     1,     3,     2,     2,     1,
       3,     4,     3,     3,     3,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       0,     1,     0,     2,     0,     1,     1,     1,     0,     2,
       0,     2,     0,     2,     2,     0,     4,     0,     4,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     3,
       0,     1,     1,     0,     4,     0,     0,     5,     1,     0,
       3,     0,     3,     3,     1,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     1,     1,     1,     1,     0,     1,
       0,     3,     3,     1,     0,     3,     1,     2,     0,     1,
       0,     3,     3,     2,     2,     3,     0,     1,     1,     2,
       0,     0,     0,     0,    22,     1,     1,     0,     1,     0,
       1,     1,     0,     1,     1,     0,     2,     2,     1,     3,
       4,     3,     3,     0,     2,     2,     1,     3,     3,     0,
       4,     0,     3,     1,     1,     0,     3,     2,     3,     1,
       1,     2,     0,     2,     3,     1,     5,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     2,     2,     2,     1,     1,     3,     5,
       1,     1,     1,     1,     1,     3,     4,     5,     1,     5,
       3,     2,     1,     3,     2,     2,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     0,     3,     0,     3,     2,
       0,     3,     0,     3,     2,     0,     2,     0,     2,     0,
       4,     0,     3,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     2,     2,     2,     3,     0,     4,     4,     6,
       2,     3,     3,     3,     5,     1,     3,     3,     1,     1,
       3,     3,     1,     3,     2,     2,     2,     2,     2,     1,
       1,     4,     4,     1,     1,     1,     1,     1,     0,     5,
       0,     1,     2,     1,     1,     1,     1,     3,     3,     1,
       1,     2,     2,     0,     3,     4,     3,     0,     7,     1,
       2,     1,     1,     1,     1,     1,     1,     0,     5,     1,
       1,     1,     1,     1,     0,     4,     6,     6,     6,     7,
       5,     0,     4,     8,     8,     8,     6,     0,     1,     1,
       2,     0,     1,     1,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     0,
       1,     3,     1,     2,     2,     2,     1,     3,     3,     1,
       1,     3,     1,     3,     4,     5,     4,     6,     1,     0,
       3,     3,     1,     1,     0,     2,     2,     2,     2,     0,
       2,     0,     3,     2,     1,     2,     2,     2,     2,     2,
       0,     3,     0,     1,     0,     3,     2,     0,     1,     2,
       0,     1,     4,     4,     5,     2,     3,     0,     1,     0,
       4,     0,     1,     1,     0,     1,     0,     2,     2,     1,
       0,     1,     1,     2,     3,     2,     0,     6,     3,     0,
       0,     0,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     2,     1,     2,     3,     3,     3,     0,     3,
       3,     0,     7,     0,     3,     1,     3,     0,     3,     0,
       3,     4,     1,     3,     0,     3,     0,     3,     4,     4,
       0,     0,     0,    16,     8,     7,     0,     0,     0,     0,
       0,    15,     0,     0,     0,     0,    12,     4,     4,     3,
       4,     3,     2,     1,     3,     5,     1,     1,     0,     1,
       1,     0,     2,     0,     0,     3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2679,  1115,  2610,     0,     0,     0,     0,     0,     0,
    2612,   126,    63,  1758,  1874,  1875,  1650,  1682,     2,     0,
    1115,   284,   188,     0,    75,  1691,     0,  1926,     0,     0,
    1115,   498,     0,  1920,     0,     0,  1115,  1694,  1910,   261,
     188,  2612,     0,  1161,  2413,  1796,     0,     0,     0,  1779,
       0,  2493,  1739,     0,     0,     0,     0,     3,     8,    19,
       0,    39,    24,    29,    14,    18,    13,    52,    46,    26,
      37,    10,    54,    55,    16,    43,    11,    12,    15,    35,
      42,    36,    38,    50,  1152,    22,    23,    30,    44,    59,
      20,    56,    53,    21,  1876,    25,    45,    40,    32,    60,
      33,    51,    34,    58,    28,    47,    27,     9,    17,    48,
      49,    41,    61,    31,    57,     0,   962,     0,     0,  1040,
       0,     0,     0,     0,   188,     0,   942,  2677,  2678,  2679,
    1117,  1116,     0,  2612,  2031,  1100,  1126,  2096,  2097,  2098,
    2099,  2100,  2101,  2102,  2103,  2045,  2104,  2106,  2105,  2107,
    2108,  2046,  2047,  2109,  2110,  2111,  2113,  2112,  2114,  2048,
    2049,  2115,  2116,  2117,  2118,  2050,  2051,  2119,  2121,  2120,
    2052,  2122,  2123,  2124,  2127,  2126,  2125,  2128,  2053,  2129,
    2054,  2130,  2131,  2132,  2133,  2134,  2135,  2136,  2138,  2137,
    2055,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2147,  2146,
    2148,  2149,  2150,  2056,  2151,  2152,  2153,  2154,  2155,  2156,
    2157,  2158,  2159,  2057,  2160,  2161,  2162,  2182,  2058,  2163,
    2166,  2165,  2164,  2167,  2168,  2169,  2171,  2170,  2172,  2173,
    2059,  2174,  2175,  2176,  2177,  2178,  2180,  2179,  2184,  2185,
    2186,  2060,  2061,  2181,  2183,  2393,  2187,  2189,  2188,  2190,
    2192,  2191,  2062,  2193,  2063,  2064,  2194,  2195,  2028,  2196,
    2029,  2197,  2200,  2198,  2201,  2202,  2207,  2065,  2199,  2203,
    2204,  2205,  2206,  2208,  2067,  2209,  2210,  2211,  2212,  2213,
    2214,  2215,  2216,  2217,  2218,  2240,  2229,  2231,  2222,  2224,
    2225,  2227,  2223,  2230,  2228,  2234,  2233,  2235,  2236,  2237,
    2238,  2239,  2232,  2220,  2226,  2221,  2241,  2242,  2219,  2243,
    2244,  2245,  2246,  2247,  2248,  2249,  2250,  2251,  2252,  2253,
    2254,  2256,  2255,  2257,  2258,  2259,  2260,  2261,  2262,  2264,
    2263,  2265,  2266,  2267,  2269,  2268,  2270,  2271,  2272,  2274,
    2275,  2068,  2273,  2276,  2277,  2278,  2279,  2280,  2281,  2069,
    2070,  2071,  2282,  2283,  2072,  2284,  2286,  2285,  2287,  2288,
    2289,  2290,  2291,  2292,  2293,  2073,  2074,  2294,  2295,  2296,
    2297,  2298,  2299,  2300,  2301,  2302,  2303,  2304,  2305,  2306,
    2307,  2309,  2308,  2310,  2311,  2312,  2313,  2314,  2315,  2316,
    2075,  2317,  2076,  2318,  2319,  2077,  2320,  2078,  2321,  2322,
    2323,  2324,  2079,  2325,  2326,  2327,  2329,  2330,  2328,  2331,
    2080,  2332,  2333,  2334,  2081,  2335,  2337,  2336,  2338,  2082,
    2340,  2341,  2083,  2339,  2085,  2342,  2343,  2084,  2086,  2344,
    2345,  2346,  2347,  2348,  2350,  2349,  2351,  2352,  2353,  2354,
    2087,  2355,  2356,  2357,  2358,  2088,  2359,  2360,  2361,  2362,
    2363,  2365,  2364,  2366,  2367,  2368,  2369,  2371,  2373,  2372,
    2370,  2374,  2375,  2376,  2377,  2380,  2381,  2382,  2383,  2384,
    2385,  2386,  2387,  2389,  2388,  2378,  2379,  2089,  2390,  2391,
    2392,  2394,  2395,  2397,  2396,  2091,  2092,  2398,  2399,  2095,
    2400,  2401,  2404,  2402,  2403,  2406,  2405,  2407,  2409,  2408,
    2093,  2410,  2094,  2411,  2412,  2066,  2090,   207,  2034,   190,
    2035,  2044,     0,  2485,  2484,  1084,  1101,  2613,  2614,   888,
     593,   889,     0,   593,     0,   890,     0,   592,   887,   188,
    2679,   131,     0,   589,   590,     0,   881,   883,   884,   882,
       0,     0,  1772,     0,  1678,  1678,  1678,     0,     0,  1678,
    1654,  1678,     0,  1683,  1678,   188,  1678,     0,    68,  1883,
     285,     0,  2521,     0,     0,     0,  2027,     0,  1697,     0,
    1927,  1928,     0,  1935,     0,  1936,  1930,  2478,     0,     0,
       0,     0,     0,   188,  1118,     0,  1748,     0,   251,   260,
     262,   263,   259,  2514,  2614,  2625,  1153,  1159,  1177,     0,
    1854,   263,  1071,  1055,  1071,  1780,  1777,     0,     0,  1748,
    1929,  2736,     0,     0,     0,  2732,     0,  2737,     0,  1161,
       0,     0,     1,     5,     0,     0,  2177,  2061,  2286,  1867,
    1865,  2022,     0,   933,   963,     0,   938,     0,   936,  2040,
    2039,  2038,     0,   949,   948,   946,     0,   462,     0,     0,
       0,  2688,   940,  1098,  2611,     0,   209,     0,    77,     0,
       0,     0,  2617,     0,     0,     0,     0,     0,   130,     0,
       0,     0,   127,  1192,  1192,  2679,  2681,  2683,   593,   591,
       0,   885,   886,     0,     0,  1776,  1775,  1774,     0,  1772,
    2097,  2045,  2108,     0,  1995,     0,     0,     0,  1448,     0,
    2050,     0,  2122,  2124,  2055,     0,     0,  1199,  1199,  2143,
     753,     0,     0,     0,  2149,  2150,  2001,     0,     0,     0,
    1992,  2002,  2061,  2189,  2190,     0,  1994,  2195,     0,     0,
       0,     0,  2213,  1999,     0,     0,  2250,  2252,     0,     0,
    2257,  2258,  2259,  2260,  1978,  2270,  1254,     0,   753,  1991,
    1998,  2279,  1984,  2287,  2292,  2293,     0,  2302,     0,     0,
    2324,     0,  2330,  2328,  2334,     0,     0,  2362,     0,     0,
     753,  1977,  2380,  2381,  2382,  2383,     0,  1993,  2089,  2000,
       0,  2400,  1199,   753,   753,     0,     0,     0,  2407,  2409,
    2412,     0,     0,     0,  2649,  1253,     0,  1413,     0,  1330,
    1442,  1211,  1217,  1231,     0,  1246,  1264,  1265,  1267,  1368,
    1266,  1272,  1271,  1651,  1988,  1270,  1269,  1989,  1990,  1263,
    2012,  2034,  2011,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1684,     0,     0,  1664,  1678,    70,     0,     0,
       0,  2024,  1557,  2496,  2497,     0,    76,  1699,  1700,  1698,
    1752,     0,  1925,     0,  1939,     0,  1113,   508,   499,     0,
    1849,  1848,     0,  1921,  2626,     0,     0,  1089,  1702,  1749,
       0,  1701,  1916,     0,  1914,  1911,  1913,   252,     0,     0,
     282,     0,  2620,  2617,  2627,  2662,  2657,  2656,  2659,  2660,
    1183,  2661,  1182,  2658,  2655,  1192,  1178,  1180,  1181,   798,
       0,     0,     0,  2434,  2435,  2264,  2287,  2436,  2378,     0,
       0,  2455,  2414,  2420,  2415,     0,     0,   798,  1862,     0,
       0,  1862,     0,  1592,  1852,  1855,     0,  2438,  1829,   879,
     878,   877,  2439,  1848,     0,  1804,  1816,     0,  1781,  1821,
       0,  2440,     0,  1825,  1851,     0,  1592,  1862,     0,  1797,
       0,     0,     0,     0,   258,  1076,  1075,  1051,  1072,  1073,
       0,     0,  1054,  1056,  1057,  1053,     0,  2749,  2494,  1752,
    1983,  1982,  2032,  2733,  1981,  2741,  2743,  2729,  2731,  2738,
    1155,     0,  2631,     6,    62,     0,     0,  1880,  2686,  2687,
    2685,   814,     0,  1199,  2041,  2680,   191,   947,     0,   463,
     191,     0,     0,     0,     0,     0,   464,   465,   397,   951,
       0,  2480,   944,     0,     0,   943,  2688,     0,     0,  1128,
    1130,  1129,  1146,   211,   208,   189,     0,  1086,  1671,  1673,
    1103,  2616,     0,     0,  2618,  2622,  1252,  1251,     0,   124,
     129,     0,   112,     0,     0,  2588,   128,  2582,  2684,  1192,
    1192,  1192,  2676,     0,  2664,  2671,  2672,  2675,  2674,  2673,
    2670,     0,  2663,  2666,  2667,  2669,  2668,  2688,  2682,     0,
     891,   891,   891,     0,  1759,  1762,  1766,  1770,  1773,     0,
       0,  1562,  1285,  1562,  1562,  1562,  1449,     0,     0,     0,
       0,     0,     0,     0,     0,  1562,     0,  1324,  1297,     0,
       0,  1325,     0,     0,     0,  2003,     0,     0,     0,  2649,
       0,     0,     0,     0,  1418,     0,     0,     0,  2649,     0,
       0,     0,     0,     0,  1444,  1446,  2011,  1562,     0,     0,
    1562,     0,     0,     0,     0,     0,     0,  1204,   794,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1562,  1562,     0,     0,  1562,  1338,  2005,     0,
       0,     0,  2004,     0,     0,     0,  1997,  1996,  1979,     0,
    1341,  1343,  1342,     0,  1562,  1562,     0,     0,     0,  1275,
    1274,  1276,     0,     0,     0,     0,     0,     0,  1250,  1249,
    1248,  1247,     0,     0,     0,  1255,     0,  1256,  1257,     0,
    1258,  1259,  1260,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1277,     0,     0,     0,  1980,  1377,     0,  1679,
    1659,  1666,  1661,     0,  1684,  1662,  1655,  1670,   477,   476,
    1689,  1690,  1668,  1685,  1686,     0,  1667,  2580,  1663,     0,
    1680,     0,    69,     0,  1906,     0,     0,     0,  1902,  1904,
    1903,     0,     0,  1907,     0,  1905,  1884,  1888,  1894,  1885,
       0,     0,   283,   286,   288,     0,   291,  2531,  2546,  2547,
    2543,  2548,  2566,  2549,  2553,     0,  2545,  2537,     0,  2552,
       0,  2541,  2550,     0,  2535,     0,  2551,  2556,  2567,  2539,
    2544,  2522,     0,  2529,  2533,  1558,  1559,     0,  2495,     0,
    2023,  1753,  1754,     0,  1136,  1940,  1941,  1937,  1557,  2480,
    2486,     0,   509,     0,     0,   520,     0,     0,    65,    66,
       0,  1120,     0,  1119,  1123,  2480,     0,     0,  1705,  1695,
    1704,  1483,  1917,  1918,     0,   250,   275,   270,   278,   272,
     274,   273,   279,   280,   281,   276,   271,   277,   264,     0,
    2531,     0,  2515,     0,  2621,     0,  2623,  2640,  1160,  2628,
    1189,  1162,  1188,     0,  1179,   797,     0,  2419,   800,   802,
    1724,  1725,   801,   810,     0,   799,     0,     0,     0,  2441,
       0,   806,   808,   807,  2450,   805,     0,     0,  2425,  2446,
    1858,     0,     0,  1828,     0,   593,     0,     0,     0,     0,
       0,     0,     0,  1798,     0,     0,   636,     0,  1820,  1593,
    1856,  1857,  1862,     0,     0,  1862,     0,  1835,  1852,     0,
    1862,  1793,     0,     0,  1785,  1790,  1786,     0,  1792,  1791,
    1794,  1782,  1783,  1858,  1809,  1836,  1852,  1819,  1827,     0,
    1808,  1815,     0,  1824,  1852,  1852,  1862,  1862,  1077,     0,
    1060,  1061,     0,     0,  2480,  1754,     0,     0,  2730,  2744,
    2728,  2739,  2740,  2727,  1156,  2632,  1154,  2633,     0,     7,
       4,  1879,  1869,  1870,  1871,  1872,  1873,  1868,  1866,  1881,
    1882,   815,   814,   584,   587,   586,     0,     0,  2043,     0,
     939,     0,   451,   937,     0,     0,   429,   408,   429,   466,
       0,     0,  2483,  2481,   931,   954,     0,     0,   941,  1099,
       0,     0,   497,  1146,  1132,  1148,     0,   212,   214,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    78,    79,   101,  1088,  1087,     0,  1085,
    1111,  1110,  1108,     0,  1109,  1107,  1102,  1104,  1105,  2615,
    2619,   594,   814,   439,   132,     0,   400,     0,     0,     0,
       0,     0,   593,     0,     0,  2665,   110,   892,     0,     0,
       0,  1764,  1675,  1483,  1677,  2022,     0,     0,     0,  1768,
       0,     0,  1563,  1562,     0,  1427,     0,     0,     0,     0,
    1450,     0,     0,     0,     0,     0,     0,     0,  1398,     0,
    1427,  1200,     0,     0,   754,  1348,     0,     0,     0,     0,
       0,     0,  1533,  1534,  1535,  1536,  1544,  1537,  1538,  1539,
    1546,  1551,  1540,  1541,  1547,  1548,  1549,  1542,  1550,  1545,
    1543,  1552,     0,  1532,     0,     0,  1556,  1553,  1555,  1554,
       0,  1419,  1411,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1562,     0,     0,     0,  1562,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1360,     0,     0,
       0,     0,     0,  1562,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1320,     0,  2014,  2013,     0,     0,
       0,   847,     0,  1279,     0,  1278,  1495,     0,  2634,  2650,
       0,  2441,  1414,  1416,     0,  1202,  1201,  1203,  1214,  1207,
    1212,  1205,  1209,     0,  1261,  2103,  1215,     0,     0,  1243,
    2649,  1571,  1244,  1229,  1234,  1235,     0,  1232,  1233,     0,
    1237,     0,  1236,  1240,  1241,  1242,  1245,     0,     0,     0,
       0,  1268,  1273,  1443,  1192,  2015,     0,  2480,  1669,  1850,
    1687,  1726,     0,  1041,  1681,  1652,     0,    71,    73,  1899,
    1896,  1895,  1897,  1901,  1900,  1898,     0,  1908,  2149,  2380,
    2383,   295,     0,   268,   267,   269,   292,     0,     0,  2532,
    2530,  2564,  2563,  2568,     0,  2565,  2561,  2554,  2589,  2558,
       0,  2589,  2560,  2559,  2589,  2555,  2562,  2589,  2527,     0,
    1561,  2185,  2268,     0,  1564,  2499,  1755,  1750,  2748,     0,
    1938,     0,     0,     0,  2479,  2480,     0,  1192,   507,   506,
     505,   504,     0,   522,   502,   510,    67,     0,     0,  1922,
       0,     0,     0,     0,  1091,  1703,     0,     0,  1674,  1484,
    1919,  1915,  1912,     0,     0,  2530,     0,  2527,  2624,  2642,
    2641,  2629,  1192,  1583,  1193,  1193,  2011,  2457,     0,  2452,
    2451,     0,     0,     0,  2470,  2453,     0,     0,  2418,  2458,
    2459,  2462,     0,     0,     0,     0,     0,  2456,  2378,  2421,
    2422,     0,  2427,  2416,     0,     0,  1860,  1863,  1864,     0,
       0,  1844,  1838,  1837,  1834,  1832,  1839,  1833,  1847,  1846,
    1845,  1806,  1805,  1603,  1604,  1602,  1596,  1597,  1601,  1600,
    1801,  1853,  1843,  1841,  1830,  1862,  1842,  1840,  1787,  1788,
    1789,     0,  1592,     0,  1860,  1862,  1852,     0,  1862,  1862,
    1823,  1826,     0,  1063,  1074,  1059,  1058,  1778,  1750,  2734,
    2742,  2746,     0,  1592,  2639,  2637,   585,  1726,  1726,     0,
    2042,     0,     0,     0,     0,     0,     0,     0,   192,   201,
       0,     0,   406,   407,  1726,   405,   452,   453,   456,   457,
     458,     0,     0,     0,     0,     0,     0,     0,     0,   145,
     459,  1726,  1726,   402,   430,   431,   434,   435,   436,   437,
     438,   398,     0,   403,     0,   952,  1611,  1612,  1608,  1609,
    1607,  1610,  2482,   814,     0,   956,   958,  2689,  2690,  2691,
    1135,  1127,  1134,  1131,  1146,  1144,  1133,   874,   873,     0,
    1147,   210,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1672,  1112,
    1106,   125,   814,  1726,  1726,  1726,  1726,   404,   440,   441,
     444,   445,   446,   447,   450,   448,   449,     0,   142,     0,
       0,     0,   141,   143,     0,   113,   133,   134,     0,     0,
     416,     0,     0,  2583,     0,  2722,     0,     0,     0,   190,
     595,     0,     0,   893,     0,     0,     0,     0,     0,  1760,
       0,  2025,  1767,  1486,  1771,  1770,     0,  1344,     0,  1391,
       0,  1393,  1394,  1395,     0,     0,     0,     0,     0,  1345,
       0,  1295,  1346,  1347,     0,     0,     0,     0,  1397,     0,
    1291,   755,     0,     0,  1298,  1299,  1292,  1282,     0,     0,
    1370,     0,     0,  1300,     0,     0,     0,     0,     0,  1371,
    1445,     0,  1447,  2015,     0,  1403,  1352,  1305,     0,  1401,
       0,  1306,  1372,  1373,  1374,  1290,  1354,  1355,     0,  1376,
       0,  1356,     0,     0,  1359,     0,     0,  1308,  1407,  1405,
       0,     0,     0,     0,  1409,  1310,     0,     0,     0,  1309,
       0,     0,     0,     0,     0,     0,     0,  1312,     0,  1293,
    1406,  1408,  1362,     0,     0,     0,     0,     0,  1321,     0,
    2643,  1494,  2651,  1495,     0,     0,  2645,  2635,  2640,  2648,
    1283,     0,     0,  2016,  1208,  1213,  1206,  1210,  2649,     0,
       0,     0,     0,  1227,  1226,     0,     0,     0,  2649,  1571,
    1230,     0,     0,  1387,  1388,  1440,     0,  1660,  1656,  1688,
    1727,     0,  2581,  1043,  1042,  1665,     0,    74,     0,  1893,
    1909,  1886,     0,   287,   296,   289,   293,   294,   290,  2557,
       0,  2538,     0,  2542,  2536,  2540,     0,     0,  2528,     0,
    2534,  2509,  2503,  2510,  2512,  2506,  2511,  2513,  2504,  2505,
    2500,  2507,  1565,  1594,     0,  1039,  1137,  1139,  1140,  1138,
    1146,     0,     0,  2489,  2490,  2488,  2487,  1114,   512,     0,
    1628,  1629,  1614,  1615,  1613,  1616,   521,  1617,  1627,     0,
     533,     0,     0,     0,  1924,  1923,     0,  1121,  1124,     0,
    1096,  1095,  1097,  1090,  1092,  1093,   577,  1709,     0,     0,
       0,  1715,  1696,  1706,     0,     0,   265,     0,     0,     0,
       0,     0,     0,  1187,     0,  1486,  1643,  1163,  1184,  1165,
    1168,  1594,  1584,  1167,  1194,  1190,     0,   813,   812,   811,
     809,     0,     0,     0,     0,  2464,  2465,     0,     0,  2442,
    2443,  2444,     0,  2448,  2424,  2425,     0,  2426,     0,  2476,
    2477,  2474,  2475,  2473,  2447,  1859,     0,  1810,     0,  1831,
       0,     0,  1803,     0,  1822,  1784,  1812,  1802,  1564,  1852,
    1799,  1800,     0,  1083,     0,  1079,  1078,     0,  1052,  1065,
    1756,     0,     0,  2745,  1585,  2638,     0,     0,   935,   195,
     198,   196,     0,   197,     0,     0,   461,   460,     0,  1850,
     454,   149,   148,   150,   151,   153,   152,   147,   950,     0,
       0,     0,  1850,   432,   409,   410,   413,   414,   415,     0,
    1037,  1726,  1037,     0,  1726,  1726,  1037,  1726,     0,     0,
    1726,  1726,     0,     0,  1726,     0,     0,  1037,     0,  1726,
       0,  1024,     0,     0,  1726,  1726,  1726,  1726,  1726,  1037,
       0,     0,  1726,   497,  1726,     0,     0,  1047,     0,     0,
    1726,  1726,  1726,  1726,     0,     0,  1726,     0,  1726,   970,
    1023,   597,   623,   624,   932,   969,   971,   983,   493,     0,
    1001,  1026,  1027,  1025,     0,     0,     0,   159,  2693,     0,
    1524,   213,   102,   100,    82,  2030,    86,    88,    81,   106,
    1621,  1622,  1620,  1618,  1619,   107,    84,    85,    87,    91,
      90,    92,    93,    96,    97,    94,    89,    95,    83,    98,
     108,   109,    80,     0,     0,     0,     0,  1850,   442,   140,
       0,   137,   136,     0,   595,   135,     0,     0,  1726,   399,
     417,   418,   421,   422,   423,   424,   425,   428,   426,   427,
       0,  2584,  2586,     0,     0,   393,   392,     0,   154,  2716,
       0,     0,   675,   111,   493,   596,   599,   918,   920,   919,
     907,   906,   115,   118,   121,  1676,  1770,  1486,  1564,  2023,
    1504,  1503,     0,  1457,  1564,  1459,  1456,  1455,  1454,     0,
    1503,     0,  1769,     0,     0,  1392,  1428,     0,  1451,     0,
    1287,   767,   767,   751,  1436,   747,   767,  1432,   751,  1434,
       0,     0,     0,     0,     0,  1399,  1396,     0,     0,     0,
       0,     0,  1422,     0,     0,     0,  1294,     0,  1382,  1404,
    1402,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1410,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   836,   842,   845,
     846,   848,   840,     0,  1364,  1280,  1192,  2652,  2654,  1157,
       0,  2644,  2646,   927,  1415,     0,  1224,  1220,     0,  1218,
    1570,  1239,  1238,     0,     0,     0,  1228,  1193,  1378,  1192,
       0,  1441,  2017,  1657,   475,   635,  2480,    72,  1889,     0,
       0,  2593,     0,  2592,     0,  2576,  2579,  2022,     0,     0,
       0,     0,     0,  2498,  1595,  1751,     0,     0,  1146,  1150,
    2033,  1931,  2491,  2492,     0,   513,   514,   516,  1193,   530,
     508,     0,   500,   503,     0,   512,     0,  1125,  1094,  1177,
       0,  1728,  1713,  1720,  1714,     0,     0,     0,  1712,  2007,
    2006,  2013,  2627,     0,  1530,     0,     0,     0,     0,     0,
       0,  2630,  1557,  1564,  1171,  1564,  1637,     0,     0,  1164,
    1170,  1166,  1486,  1169,     0,  1191,  1198,  1197,  2008,  2015,
    2454,     0,     0,     0,     0,  2469,  2463,  2460,  2461,     0,
    2423,  2445,  2429,  2428,  2431,  2433,  1861,  1592,  1818,  1817,
    1599,  1598,  1795,  1592,  1814,  1862,     0,     0,     0,     0,
       0,  1067,     0,  1039,  2735,  2747,     0,   634,   633,   200,
     199,   205,   206,  1625,  1623,  1624,   467,   478,  1626,   479,
     455,   146,   468,   469,   433,     0,   411,   953,  1038,   925,
    1115,  1005,     0,   676,   925,   870,   875,   875,  1003,     0,
       0,     0,  1115,     0,     0,     0,     0,     0,  1115,     0,
       0,     0,  1726,     0,  1016,   965,     0,  1680,     0,     0,
       0,  1017,     0,     0,   966,  1726,     0,     0,     0,     0,
       0,     0,  1115,     0,     0,   495,     0,  1115,   497,  1050,
    1049,  1048,     0,  1115,  1115,     0,     0,     0,     0,   629,
     630,   628,     0,     0,   621,   598,   814,   967,   494,   968,
     675,     0,  1044,   672,   678,  2018,     0,   169,     0,     0,
     955,     0,   162,   160,   171,     0,     0,     0,  1527,     0,
    1528,  1525,  1526,     0,   103,   105,   474,   473,   472,   471,
     443,   139,   138,   114,     0,     0,     0,  1850,   419,  2585,
       0,     0,  2723,   396,   394,   395,     0,     0,   215,   657,
     658,   656,   655,     0,   482,     0,   480,     0,   492,     0,
     659,   660,   662,   663,  1942,   814,   600,     0,     0,     0,
       0,  1564,  1583,  2026,  1503,  1486,     0,     0,  1480,  1505,
       0,  1505,  1486,  1486,  1763,  1486,  1483,  1500,     0,  1322,
    1452,     0,     0,   768,  1429,   822,     0,  1438,     0,  1439,
     749,   748,  1431,  1433,  1437,  1435,  1286,  1296,  1369,  1289,
    1288,     0,     0,     0,  1328,  1350,     0,  1329,     0,  1420,
       0,     0,  1302,     0,  1304,     0,     0,  1384,  1353,  1375,
    1331,  1357,     0,  1307,  1281,     0,  1332,     0,  1337,  1335,
       0,  1311,     0,     0,  1318,     0,  1316,     0,  1317,     0,
    1319,  1361,  1363,     0,     0,   847,   833,   834,   835,     0,
     837,   839,   841,     0,     0,  1496,  2653,  1158,     0,     0,
    1417,  1216,     0,  1225,  1222,     0,  1219,  1194,  1389,  1379,
    1028,  1041,  1891,     0,  1887,   304,   299,   307,   301,   303,
     302,   308,   309,   310,   311,   305,   300,   306,   298,   297,
    2590,     0,  2601,     0,     0,     0,     0,     0,     0,  1566,
    1692,  1141,  1146,  1150,     0,  1142,  1942,   517,     0,     0,
       0,   537,     0,   535,   511,     0,  1122,  1192,  1710,  1722,
       0,  1730,     0,     0,  1707,  1717,     0,     0,     0,  1716,
     497,     0,   266,     0,  2520,     0,     0,     0,  1176,  1594,
    1748,  1572,     0,     0,  1649,     0,  1644,  2480,     0,  1196,
    1195,     0,  2472,  2471,  2467,  2466,  2468,  2449,     0,     0,
    1811,  1813,  1807,  1082,  1081,  1080,  1064,     0,     0,  1069,
    1757,  1486,  2010,  1586,  1589,   412,   677,   926,   988,     0,
       0,     0,   671,   925,   875,   891,   876,   925,   925,  1033,
    1034,     0,     0,     0,   608,   605,  1007,   617,   986,   977,
     987,   998,  1000,     0,   607,   631,     0,     0,   619,     0,
       0,  1014,  1015,  1041,   602,     0,     0,   651,   652,   650,
     625,   632,  1035,  1036,   603,   604,  1009,     0,  1579,  1581,
    1589,   610,   609,     0,   606,     0,   985,  1021,   993,     0,
     649,   642,   640,   637,   639,   638,   641,   643,   644,   645,
     646,   647,   648,   620,   612,   611,   614,   613,   616,   615,
     618,   982,     0,  1037,  1037,  1002,     0,  2021,     0,  1046,
    1004,     0,   664,   673,   665,     0,     0,   170,   158,     0,
       0,   957,   959,     0,     0,   960,  2695,     0,  2697,     0,
    1149,     0,    99,     0,     0,   401,   470,   420,  2587,     0,
     226,  1192,     0,     0,   216,   218,   219,     0,     0,     0,
     595,   675,  1944,  1943,   481,   580,   601,     0,     0,     0,
    1770,  1765,  1605,     0,  2634,  1498,     0,  1482,  1481,  1506,
       0,  1486,  1505,  1505,     0,  1462,  1461,  1460,  1557,  1488,
    1177,     0,  1453,     0,     0,     0,     0,   816,   827,   825,
     819,     0,   823,   824,  1430,     0,     0,  1400,     0,     0,
       0,  1423,     0,     0,     0,     0,     0,     0,     0,  1284,
       0,  1380,     0,     0,     0,     0,     0,     0,  1315,  1313,
    1314,   831,  1366,     0,   844,   838,   836,   843,     0,  1594,
    2634,   928,  1221,     0,  1390,  1658,  1030,  1029,  1653,     0,
       0,  2591,     0,  2526,  2578,  2577,  2594,  2594,  2594,  1735,
    1734,     0,  1733,     0,  1143,  1151,     0,   515,   518,     0,
     510,     0,   534,     0,   501,   578,     0,     0,     0,  1731,
    1719,  2631,  1708,  1711,  2015,  1485,  1531,     0,  2517,  2518,
    2516,  1175,  1752,     0,  1567,  1648,  1645,     0,  1638,  1640,
    1642,  1185,     0,  2009,  2430,  2432,  1066,     0,     0,  1062,
       0,     0,  1590,  1591,  1588,   990,     0,   925,   871,   891,
     872,     0,   891,   891,   909,   908,  1019,     0,     0,   976,
       0,  1103,     0,   981,   810,   626,  1013,   972,  1012,     0,
     627,     0,   974,     0,  1582,   496,   973,   995,   979,  1908,
    1006,  1045,   852,   743,   692,   683,   767,   686,   685,   729,
     751,   697,   747,   745,   715,   747,   747,   722,   721,   739,
     725,   705,   822,   822,   704,   742,   822,   726,   724,   728,
       0,   730,   747,   735,   723,   727,   744,   720,   717,   741,
     767,   751,   751,   701,   740,   822,     0,   733,   767,   771,
     703,   822,   829,     0,     0,   767,   769,  2020,   156,   161,
     172,   173,   945,  2694,     0,  2692,     0,  1145,  1529,   104,
       0,     0,   229,   227,   228,     0,   222,   224,   219,  2710,
       0,  2717,     0,     0,  2715,   483,   485,   493,   661,   581,
       0,     0,  1589,   923,     0,     0,     0,  1761,  2640,  1557,
    1490,  1486,  1458,  1486,  1469,     0,     0,  1486,  1465,  1463,
    1467,  1522,  1192,  1323,   765,   763,   766,   764,   818,   817,
     821,     0,   820,   829,   752,     0,  1326,  1327,  1351,     0,
    1421,  1412,  1349,     0,  1303,  1381,     0,     0,  1358,  1333,
    1336,  1334,  1339,  1340,     0,  1365,     0,  1184,  1184,   653,
    2647,  1223,  1032,  1031,  1892,  1890,     0,     0,  2599,  2599,
    2599,  2508,     0,  1736,     0,  1192,   523,     0,   540,   539,
     536,  1594,  1721,  1723,  1729,  1718,  2519,  1754,     0,  1568,
    1583,   803,  1641,     0,  2480,  1068,     0,     0,  1589,     0,
       0,   989,     0,     0,     0,     0,     0,     0,  1020,     0,
    1044,   978,   999,  1022,     0,   771,  1115,  1580,   994,   996,
    1091,     0,     0,   856,   691,   684,   702,   700,   756,   746,
       0,   756,   756,   711,   729,   706,     0,   822,   719,   710,
     731,   734,   736,   738,   756,     0,   822,   699,   698,   708,
     695,   756,   779,     0,     0,     0,     0,   775,     0,   850,
       0,     0,   679,   772,   774,     0,   782,     0,   732,   822,
     688,   830,   829,   690,   822,   829,   756,     0,   770,   756,
       0,   163,   961,   332,  2696,  2704,     0,  2706,  2699,   144,
    2714,  2724,   226,     0,     0,   167,     0,   217,   810,   220,
    2631,  1942,     0,   488,  2480,     0,   922,     0,  2480,  2480,
    1606,  1491,  1489,  1499,     0,  1454,  1486,  1486,     0,  1454,
       0,     0,     0,  1487,  1519,  1501,   828,   826,     0,  1424,
    1589,     0,  1383,  1385,   832,     0,  1497,   654,  2602,     0,
       0,  2598,  2596,     0,  2597,  2595,  2569,     0,  2524,  2525,
    2523,  1732,     0,  1693,     0,     0,   531,     0,     0,   565,
     579,  1750,  1576,  1589,     0,  1594,     0,  1646,  1639,  1186,
    1070,  1740,  1743,     0,  1587,   992,     0,   674,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1018,  1985,
    1008,   497,  1010,   975,     0,   980,   622,     0,   855,     0,
     860,   760,   761,   762,   712,   757,   759,     0,   714,   682,
     707,   737,   713,     0,   709,   696,   785,   789,   786,   788,
     787,   784,   795,   777,   796,     0,     0,   790,   791,   792,
     773,   781,   783,   776,   687,   689,   693,   694,   680,     0,
     681,  2019,     0,   165,   358,     0,   344,   330,     0,     0,
       0,   334,   174,   177,   175,     0,   176,   182,     0,   183,
     184,   185,   186,   187,   178,   356,   357,   181,   179,   180,
       0,  2036,     0,  2037,  1161,     0,     0,  2702,     0,  2698,
    2627,   193,   223,     0,     0,   159,   168,  2718,   793,   486,
     484,     0,  2627,   894,  1589,     0,   896,   898,     0,  1470,
       0,  1474,  1479,  1475,     0,  1466,  1464,     0,  1523,     0,
    1594,   750,     0,  1426,  1301,  1367,  2575,  2574,  2573,  2570,
       0,     0,     0,     0,     0,     0,  2600,  2604,  1737,  1483,
    1193,     0,   524,     0,   527,   529,   543,     0,  1726,     0,
       0,  1726,  1726,  1726,  1726,   558,   566,   568,     0,  1756,
    1577,  1578,     0,  1573,  1575,  1569,  1630,   804,  1945,     0,
    1564,     0,   991,     0,     0,   894,     0,     0,  1987,  1986,
     984,  1044,     0,   853,     0,   857,   858,   859,     0,   851,
     758,     0,   929,     0,   778,   780,   164,     0,   157,     0,
       0,   343,   346,     0,     0,   349,   339,   338,   340,     0,
     333,   332,   332,   386,   337,   383,   382,   375,  2705,     0,
    2631,     0,     0,     0,  2700,  2725,   225,  1192,   171,     0,
     490,   489,     0,  1726,   116,   895,   914,   912,   913,   900,
     921,   924,     0,   119,   897,   916,   904,   122,   899,   915,
     902,  1492,     0,     0,     0,     0,     0,  1511,  1512,     0,
       0,  1517,  1521,  1502,  1589,  2571,  2605,  2608,  2606,  2607,
    2609,  2603,     0,  1932,     0,   532,   525,     0,     0,   541,
       0,  1726,  1726,     0,     0,     0,     0,     0,   538,   567,
    1726,  1039,  1589,     0,  1174,     0,  1953,  1742,  1583,  1744,
       0,   894,   666,   896,   898,  1011,     0,   854,     0,     0,
     822,     0,   822,   166,   359,   370,   373,   365,   345,     0,
       0,     0,   335,   332,     0,   319,   317,   318,   324,   325,
     326,   327,   328,   329,   320,   323,   321,   322,   332,     0,
     234,     0,     0,  2703,  2701,     0,  2707,     0,   203,   202,
     194,     0,   332,  2711,     0,  2719,  2631,   911,     0,  1028,
     901,     0,  1028,   905,  1028,   903,  2634,  1471,     0,  1476,
       0,  1468,  1507,  1507,  1518,  1425,     0,   803,   519,   531,
     528,   551,   544,   547,     0,   576,     0,     0,   572,   573,
     571,   569,   562,     0,   560,     0,     0,  1574,  1631,     0,
       0,     0,     0,  1946,  1948,     0,  1647,  1605,   670,   669,
     667,   668,     0,   866,     0,   865,     0,   862,   861,   716,
     930,   718,     0,     0,   332,   366,     0,   341,     0,   350,
       0,     0,   232,   389,   387,   230,   377,   377,  2708,  2709,
     204,  2726,     0,   173,   193,   491,   910,   117,   917,   120,
     123,  1493,     0,     0,     0,  1515,  1513,     0,  1933,   526,
     551,     0,   549,     0,   545,   542,   546,   574,   575,     0,
     559,     0,   570,     0,     0,     0,     0,     0,     0,  1947,
       0,     0,  1954,  1956,  1741,   997,   868,   869,   867,     0,
       0,   367,   373,   363,   371,   332,     0,     0,   331,     0,
     385,   233,     0,     0,     0,   332,     0,   376,   378,   380,
       0,   155,  2720,  1473,  1478,     0,  1508,     0,     0,     0,
    1738,  1746,     0,  1959,   548,     0,   556,   552,   554,   557,
     565,   564,   561,     0,  1633,  1951,  1952,     0,  1949,     0,
       0,  1955,     0,     0,     0,   364,     0,     0,   362,   342,
     347,   332,   390,   332,   244,   243,     0,   236,   312,   384,
       0,   235,  2712,   332,  1510,  1509,  1524,     0,     0,     0,
       0,  1945,   550,     0,     0,   563,  1172,  1636,     0,  1634,
    1950,  1958,  1957,   864,   863,   368,     0,   332,     0,   332,
       0,   332,     0,     0,     0,     0,     0,   231,   332,  2721,
       0,     0,  1745,  1747,     0,  1953,   555,   553,  1564,  1632,
       0,     0,   360,   332,   348,   353,     0,     0,   239,   313,
     314,     0,   241,  2713,  1516,  1514,     0,  1961,  1583,  1635,
     332,   332,   349,   352,   391,   388,     0,   315,   237,   238,
     249,   248,     0,  1960,     0,  1965,  1605,   332,   332,   354,
     257,   255,   332,   245,   253,   247,     0,   254,     0,   242,
       0,     0,  1972,  1173,     0,   240,   256,   316,  1963,  1964,
    1962,  1967,     0,     0,  1969,  1970,     0,  1934,   246,  1971,
    1966,     0,  1973,  1975,     0,  1968,     0,  1192,  1974,     0,
    1193,  1976
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   624,  1480,    57,    58,    59,    60,    61,  1328,
      62,   837,  1252,  1787,  1788,    63,   567,    64,  1026,  1553,
    1554,  3003,  3004,  1555,    65,  2120,  1574,  2604,  3047,  4329,
    3048,  4332,  3049,  4334,  1572,   530,  2105,  2106,  2107,   531,
    2008,  2009,  1052,  3027,  2990,  3861,  2994,  4023,  4168,  4065,
    2035,  3375,  3862,  3863,  4032,   562,  2118,  1500,  4195,  1988,
    4320,  1989,    66,   656,  1024,  1526,  1527,  3393,  3394,  3673,
    3395,  3665,  3666,  3667,  3668,  4475,  4293,  4405,  4476,  4564,
    4606,  4612,  4526,  4622,  4623,  4624,  4610,   878,  4625,    67,
     590,   591,   880,  1358,  1801,  1359,    68,    69,   561,  1272,
    1273,  1274,  1275,  2298,  1802,  2293,  2294,  3178,  4527,  4608,
    4628,  4294,  4295,  4175,  4296,  4035,  4297,  4179,  4298,  4038,
    4299,  4300,  4301,  4302,  4467,  4303,  4174,  4519,  4290,  4291,
    4469,  4585,  4603,  4304,  4045,  4169,  4392,  4046,  4170,  4462,
    4286,  4463,  4514,  4581,  4287,  4393,  4517,  4396,  4305,  4311,
    4477,  4306,  4312,  4307,  4050,  4186,  4310,  4184,  4309,  4473,
    4472,  4560,  2627,  3026,   643,   644,   668,  2110,   645,  1040,
     997,  1502,  2021,  2022,  2484,  2485,  2609,  2610,  2611,  2013,
    2014,  2015,  2087,  2088,  2089,  1995,  1996,  1997,  1506,  1992,
    1993,   646,   998,  1008,  2016,  2017,  2018,  2615,  2091,  2092,
    2093,  2094,  1240,  1241,  2896,  2633,  3036,  3880,  3404,  4072,
    4326,  3037,  3038,  2978,  3323,  2045,    70,   579,   858,  1325,
    2351,  1326,  2353,  2794,  2795,  2796,  1848,  1849,  3756,  1853,
    2350,  3936,  4349,  4113,  4114,  2798,  4112,  2802,  3202,  3203,
    3511,  3758,  3939,  4354,  4248,  4435,  4352,  4431,  4353,  4433,
    4544,  4497,  4498,  4258,  4363,  4364,  4439,  4500,  4125,  4126,
    4127,  2371,  2809,  3761,  3680,  2081,  1492,  1493,   532,   533,
     534,   664,  2634,  2540,  2635,  2636,  3352,  2542,  2543,  2764,
    1415,  3343,  3310,  3737,  3033,  3039,  3040,  3041,  3042,  3043,
    3362,  3272,  2912,  2913,  2983,  3365,  3878,  3810,  3825,  3640,
    3641,  3642,  3643,  3644,  3645,  3646,  3079,  3080,  3077,  1101,
    3984,  3985,  3986,  3073,  3074,  3859,  3842,  3843,  3844,  3879,
     799,  4003,  3441,  1382,  1383,  3947,  1393,  1394,  2398,  1889,
    2399,  1496,  3442,  3443,  3444,  3853,  3134,  3734,  3140,  3141,
    3142,  2727,  2728,  2729,  2730,  2731,  2237,  3845,  3364,  3803,
    3977,  3980,  4159,  4387,  2914,  3273,  2915,  3277,   948,   535,
    3846,   537,   538,   539,  2916,  2917,  1587,  1588,  4204,  4213,
    4217,  4205,  4218,  4214,  4206,  4207,  4208,  4209,  4220,  4216,
    2640,  3681,  3682,  3266,  3150,  4161,    71,  2033,   991,  1000,
     996,  1016,   651,  1515,  1009,  2036,  2557,  3652,   633,  2544,
    3796,  3571,  3800,  2545,  3289,  2546,  3555,  3781,  2547,  3587,
    3798,  3974,  3290,  3291,  2548,  2549,  2550,  3570,  3581,  4151,
    3485,  3486,  3487,  2918,   125,  2285,  3360,  2962,    72,  1458,
      73,   962,   963,   964,  2448,  2449,  2881,  3259,  3549,   957,
     958,   959,  1963,  2446,    74,   659,  1559,    75,  1336,  2363,
    2364,  2365,    76,  1017,    77,    78,   660,  1566,  1567,  1568,
      79,  1321,   132,    80,   866,  1331,  1333,  1334,    81,   655,
    1018,  1019,  1020,  1021,  2041,    82,  1839,  2326,  2327,  2328,
    2329,  1523,  2559,  1524,  1525,  2050,  3195,    83,    84,   621,
    2245,   596,   884,   597,   598,  1883,  2387,  2388,  2389,  3230,
    4578,  3738,   895,   896,   897,  2839,  1371,  1372,  1373,  2394,
    2845,  1097,   800,   801,   802,   803,  1193,  1194,  3847,   804,
    1203,  1747,   805,   806,   807,   808,   809,   810,  1774,  3106,
    3107,  3461,  2272,  2273,  2274,   811,  2157,  3091,  2172,   812,
    1186,  1732,  1662,  3453,  3099,  3719,  3909,  1604,  2140,  2680,
    2760,  2239,  1123,  1124,  1087,  2147,  1610,  2653,  2835,  2655,
    2656,  2657,  3901,  3900,  3902,  4222,  4080,  4224,  4084,  3063,
    1868,  1869,  2658,  2659,  3413,  4078,  4336,  2240,  2241,  2242,
    3479,  3414,  3691,  3429,  3430,  4090,  3054,  2660,  3420,  4425,
    4230,  4231,  4489,  4488,  4232,  4088,  4089,  3903,  3904,  2999,
    3000,  3001,  2823,  1652,  1653,  1660,  1307,  1308,  1605,  2323,
    2782,  3770,  3944,  2263,  3534,  3942,  4133,  2553,  3318,  3319,
    2391,  2392,  2886,  3263,  3554,  1418,  3739,  2784,  1936,  1937,
    3687,  4611,  2732,  2575,  2897,  2347,  2348,  4264,  4444,  4548,
    4549,  3234,  3235,  3538,  3539,  2393,  2836,  3236,  3771,  4138,
      85,   543,    86,  2286,   830,  2763,  3160,  1249,  2290,  1028,
    1338,  1591,  1592,   824,  1785,   557,  1242,  1243,  1244,    87,
     568,  3503,    88,   586,  1866,   850,   870,  1339,  1340,  2372,
    2810,  2817,  2373,  2822,  3521,  2812,  3208,  3209,  2280,  2281,
    2813,  3211,  3518,  3501,  3502,  3933,  4242,    89,   609,  4140,
    3951,  3952,  4490,  4491,   871,  2325,  1312,  1837,  2883,    90,
     542,  1074,  2648,  1597,  2128,  1075,  1076,  2131,   688,   689,
      91,   966,   606,  1440,  1441,  1442,  1952,    92,   600,   949,
    2867,  2873,  1931,   862,  1245,  1422,   952,  1423,  1916,  2427,
    1403,    93,   987,   986,  1487,    94,   629,  1488,    95,   838,
    1266,  1797,  2768,  3164,  3489,  1267,  1268,  2291,    96,   587,
     875,   876,  1343,  1871,    97,   581,   863,  1859,    98,   572,
      99,   100,   854,  3196,  4347,  4493,   576,  1841,  1317,  3405,
    4266,  4373,  4374,  4376,  4452,  4453,  4541,  4615,  4640,  4632,
    4643,  4644,  4647,  4652,  4653,   814,   973,   815,  3968,   816,
     817,   818,  2818,  2819,  3264,   819,  3953,   820,  3267,  1029,
    1594,   565,   508,  2564,   640,   974,  2791,   822,  4052,   994,
    1045,   510,   511,   101,   599,   912,  1398,  1388,  1397,  1909,
    2415,  1913,  2417,  2418,  3248,  2863,  3249,  2864,   953,  1905,
    1910,  2865,  1914,   915,  1898,  1899,  1900,  1901,  2856,  1895,
    2424,   102,   855,  1514,   515,  1319,  1320,  2335,   103,   608,
     104,  1309,  1834,  1835,  2320,  2781,  2321,   105,   881,  1362,
     106,   840,  1301,  2309,  1302,  1810,  1303,  1304,  1824,  1818,
    1827,  1821,  4100,  3925,  3926,  2778,  1248,  1046,  1047,  2301,
    2772,  2773,  3748,  3928,  3493,  4106,  4107,   107,   133,   518,
     662,  1035,  1365,   108,   109,   110,   111,  1368,  1475,  2382,
    1476,  2246,  1477,  1478,  1975,  1881,  1728,  1729,  3148,  1183,
    1184,  2249,  2736,  2737,   898,   672,  1062,  1054,   126,   127,
     128,   675,   676,   129,  1014,  1015,  2558,  2996,  3377,  3655,
    3656,  3867,  4060,  4056,  4057,  4054,  4059,  1056,  3874,  4412,
    4568,  1057,  1058,  3028,  3876,  4199,  4414,  4533,  1059,  2624,
    3390,  4061,  4322,   112,   975,   618,  1473,  1468,  1470,  1971,
    2453,   113,   114
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4132
static const int yypact[] =
{
    5776,   202,   890, -4132,  -171,   851, 49444,   115,  1480,  1480,
    -197,  2511, -4132, -4132, -4132, -4132, -4132,  2493, -4132, 49444,
     890,  1006, -4132, 24469, -4132, -4132,   721,   873,   179,  1480,
     890, -4132, 49444, -4132,   719,  -190,   890, -4132, -4132, 43044,
   -4132,  -197, 49444, -4132, -4132, -4132, 43044,  -147,   712,   695,
     860, -4132, -4132, 49444,  1173,   597,  1302,  1362, -4132, -4132,
     977, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, 25109, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132,  1655, 49444,  1661, 49444, -4132,
    1638, 49444, 41124, 49444, -4132,  1374,  1786, -4132, -4132,  1881,
   -4132, -4132,  1480,  -197, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  1385,
   -4132, -4132,  1451, -4132, -4132, -4132, -4132, -4132,  2012, -4132,
    1839, -4132,  1940,  1839, 41124, -4132, 49444, -4132, -4132, -4132,
    1083, -4132,  1551, -4132,  1583,  1900, -4132, -4132,  2094,  1567,
    1918,  1942,   813, 11476,  1952,  1952,  1952, 49444,  1979,  1952,
   -4132,  1952, 49444, -4132,  1952, -4132,  1952,  1480, -4132, -4132,
   -4132,  2064, -4132, 49444,  1824,   161,  -140, 41124,  1752, 49444,
   -4132, -4132, 11476, -4132,  1964, -4132, -4132, -4132,  1480,  2177,
    2039,   996, 49444, -4132, -4132,  1480,  1401,  1064,  1645, -4132,
   -4132,  1775, -4132, -4132,   191, -4132, -4132, -4132,  1946, 27029,
    6448,  1775,   653,   628,   653, -4132, -4132, 49444,  1480,  1981,
   -4132, -4132,   168,   168,   168, -4132,   168, -4132,   168, -4132,
     597,  1617, -4132, -4132,  1663, 49444,    42,  2116,   682, -4132,
   -4132,  1656,   -84, -4132,  1687, 37924, -4132, 49444, -4132, -4132,
   -4132, -4132,  1950, -4132, -4132, -4132,  1356, -4132, 37924, 24469,
   49444,  1818, -4132, -4132, -4132, 24469,  1701, 49444, -4132, 24469,
   24469,   964,  1416,    22, 49444, 49444, 24469,  2168, -4132,  2355,
   37924,  1914, -4132,   325,  1951,  1881,  2384, -4132,  1839, -4132,
   49444, -4132, -4132, 49444, 49444, -4132, -4132, -4132, 43684,   813,
    1754,  1769,  1774, 16082, -4132,  1793,  1798,  1807, 11476,  1819,
    1834,  1860,  1862,  1864,  1866,  1868,  1870,  1878,  1878,  1882,
    1890,  1896,  1902,  1907,   881,  1921, -4132,  1939,  1944,  1957,
   -4132, -4132,  1959,  1961,  1969,  1975, -4132,  1990,  2000,  2005,
   12134,  2019,  2024, -4132, 21260,  2029,  2036,  2053,  2057,  2074,
    2082,  2086,  2088,  2092, -4132,  2095, -4132, 11476,  1890, -4132,
   -4132,  2103, -4132,  2113,  2117,  2122,  2125,  2136,  2151,  2153,
    2162,  2164,  2175,  2181,  2185,  2193,  2204,  2206,  2246,  2250,
    1890, -4132,   945,  2266,  2268,  1290,  2270, -4132,  2274, -4132,
     286,  2276,  1878,  1890,  1890,  2281,  2284,  2286,  2292,  2298,
    2303, 16082, 16082, 16082, 11476, -4132, 49444, -4132, 49444, -4132,
     849,  2788, -4132,  2940, 16082,   160, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132,  1781,  1932, -4132, -4132, -4132, -4132, -4132,
   -4132,  2305,  1934,  2417, 49444, 49444, 49444,  2256, 49444, 49444,
   24469, 41124,   796, 49444, 37924, -4132,  1952,  2025,  3436, 30234,
    3220, -4132,   138, -4132, -4132, 49444, -4132, -4132, -4132, -4132,
    2543,  2210,   849,  2774,   226, 24469, -4132,  1630, -4132,  -212,
   -4132, -4132,  2550, -4132, -4132, 37924, 24469, -4132, -4132, -4132,
   21902, -4132, -4132,  2794, -4132,  2253, -4132, -4132,  1932,  3520,
   -4132,  4139,  2485,  1416,  2375, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132,  2327,  1946, -4132, -4132,   383,
    2488,  2318,  -171,   656,   808, 35364,  1182,   816,   830, 27670,
   36004,  2320, -4132, -4132, -4132,    45,  2817, -4132,   -24,  2330,
    2319,   -24, 38564,  2716,   192, -4132,   109, -4132,  2804, -4132,
   -4132, -4132, -4132,  2465,  2449, -4132, -4132,   466,  2717, -4132,
    2836, -4132,   832, -4132, -4132,  2471,  2716,   -24,   192, -4132,
    2723,  2848,   817,   495, -4132, -4132, -4132, -4132,  2352, -4132,
    -118,  2924, -4132,  2357, -4132, -4132, 24469, -4132, -4132,  2543,
   -4132, -4132, -4132,  2360, -4132,  2635,  2470, -4132, -4132,     7,
   -4132,  2365,  1274,  2865, -4132, 41124,  1930, 39204, -4132, -4132,
   -4132,  2898,  2914,  1878,  2367, -4132, -4132, -4132,  3025, -4132,
   -4132,  2378,  2923,  2923,  2923,  3032, -4132, -4132, -4132,  2381,
    2640,   -91, -4132,  2561,  2421, -4132,  1818, 24469,  2802,  2392,
   -4132, -4132,  2656, 11476, -4132, -4132,  4368,   751, -4132, -4132,
    1885, -4132,  2998,  2613, -4132, -4132, -4132, -4132,  2892, -4132,
   -4132,  3025, -4132,  2956,  2923,  2842,  2412, -4132, -4132, -4132,
   -4132, -4132, -4132,   204, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132,  1587, -4132, -4132, -4132, -4132, -4132,  1818, -4132, 24469,
   -4132, -4132, -4132, 24469, -4132,  2414, -4132,  2409, -4132, 11476,
   11476,   332,  3002,  3065,  3065,  3065,   849,  2451, 11476, 11476,
   11476, 11476, 11476, 11476, 11476,   333,  2424, -4132, -4132, 24469,
    -165, -4132,  2427, 11476, 11476, -4132, 11476, 11476, 25749, -4132,
    4281, 11476, 11476,   419,  2943, 11476, 11476, 11476, 11476,  2976,
   11476, 11476, 25749,  3077,  2433, -4132,  2428,  1110, 11476, 11476,
    1478, 11476, 11476, 11476, 11476, 11476, 24469, -4132, -4132, 11476,
   11476, 11476, 11476, 16082, 11476, 11476, 11476, 11476, 11476, 11476,
    2436, 11476,  3065,  3065, 11476, 11476,  1573, -4132, -4132, 11476,
      81,    81, -4132, 11476,  8186, 11476, -4132, -4132, -4132,  2443,
   -4132, -4132, -4132, 25749,  3065,  3065, 11476, 11476, 11476,  3002,
    3002,  3002,   217,  2446,   943, 11476, 28311,  2440, -4132, -4132,
   -4132, -4132, 11476, 11476, 11476, -4132, 16082, -4132, -4132,  1783,
   -4132, -4132, -4132, 12792, 16082, 16082,  2450, 16082, 16082, 16082,
   16082, 16082,  2837, 16082, 16082, 16740, 17398, 16082, 16082, 16082,
   16082,  1365,  3002, 41124, 16082, 11476, -4132, -4132, 49444, -4132,
   -4132, -4132,  2454, 24469,   796, -4132,  2464, -4132, -4132, -4132,
   -4132, -4132,  2480,   796, -4132,  2947, -4132, -4132,  2483, 24469,
    2944,  2479, -4132,  2861, -4132,  2867,  2868,  2869, -4132, -4132,
   -4132,  3106,  2875, -4132,  2876, -4132, -4132,  2502, -4132, -4132,
   18056, 41124, -4132,  2503, -4132,  3001, -4132,  2749,  2694,  1891,
   -4132, -4132, -4132, -4132, -4132,  2793, -4132, -4132,  2626, -4132,
    2809, -4132, -4132,   514, -4132,   116, -4132, -4132, -4132, -4132,
   -4132, -4132,  2811,  2533, -4132, -4132, -4132, 49444, -4132, 50084,
   -4132, -4132,  2764,  -171, -4132, -4132, -4132,  2917,   252,   705,
   -4132, 24469, -4132,   151,   151,  2803,  1112, 41124, -4132, -4132,
     173,  2545,  2631,  2552, -4132,   -91, 24469, 24469, -4132, -4132,
   -4132,  2810, -4132,  3198,  1064, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  2557,  3056,
    2749,  2851, -4132,  2852, -4132, 49444, -4132,  1658, -4132, -4132,
   -4132,  2572, -4132, 11476, -4132, -4132, 49444, -4132, -4132, -4132,
   -4132, -4132, -4132,  3147, 11476, -4132, 37924,  -107,  1144,   870,
      45, -4132, -4132, -4132, -4132, -4132, 49444, 44324,  2575, -4132,
    2992,  -171, 11476, -4132,  2589,  1839, 49444, 49444, 49444, 24469,
   24469, 49444, 24469, -4132,  1097,  1097, -4132, 36644, -4132, -4132,
   -4132, -4132,   -24, 49444, 49444,   -24, 37924, -4132,   192, 49444,
     -24, -4132,  2991,  2691, -4132, -4132, -4132,  3059, -4132, -4132,
    3052,  2592, -4132,  2992, -4132, -4132,   192, -4132, -4132, 24469,
   -4132, -4132,   192, -4132,   192,   192,   -24,   -24,  2642,   653,
   -4132, -4132,  2746,   628,   -91,  2764,   168,  2854, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  1588, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132,   177, -4132, -4132, -4132,  1861,  3115, -4132, 41124,
    2653,  1169,  1513,  2653,  1829,  -171,  1537, -4132,  1537, -4132,
   37924,  3080, -4132,  1960, -4132,  2881,  1340, 24469, -4132,  2464,
   44964, 24469, -4132, -4132, -4132,   140,  2602,  2603,   849,  3098,
    3101,  3104,  3108,  3116,  3118,  3120,  3121,  3123,  3124,  3128,
    3129,  3131,  3135,  3136,  3139,  3141,  3145,  3150,  3153,  3154,
    3155,  3160,  3161,  2610, -4132, -4132, -4132, -4132, 24469, -4132,
   -4132, -4132, -4132,  2670, -4132, -4132, -4132, -4132,  2922, -4132,
   -4132, -4132,   198,  2242,  2188,  2690,  2719,   122, 37924,  3140,
   49444, 49444,  1839, 49444, 49444, -4132, -4132,  -217,  2958,  2961,
    2962,  2685, -4132,  2810, -4132,  1707, 49444,  3149, 32152, -4132,
     335,   360, -4132,  3065,  2687, -4132,  2693,  2696,  2701, 11476,
     255,  1294,   926,  -241,  1228,   972,   387,   269, -4132,  2706,
    2714, -4132,  2712,  2718, -4132, -4132,   443,   448,   989,   993,
    2721,  2725, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132,  3176, -4132,   452,  1425, -4132, -4132, -4132, -4132,
    2727, -4132, -4132,  1039,   494,   498,   290,  2738,   512,  1440,
    1467,  2735, 25749, 49444,  3065,  2736,  1155,  1222,  3065,  2737,
     531,  1230,  1539,  1566,  1660,  2741,  1239,  1252,   535,  1666,
    2769,  1256,   549,   551,  1266,   558,   687, -4132,  1271,  2743,
    2744,   709,   283,  3065,  2745,   297,  2752,  2757,  1321,  9502,
   10160, 10818,   330,   743, -4132,  2750, -4132,  2428,  2770,  2772,
     301,   176,  1328, -4132, 11476, -4132, -4132,   979,  1594,  2826,
     144,   870, -4132,  2937, 49444,  1136,   154, -4132, -4132, -4132,
   -4132, -4132, -4132,  1555, -4132,  2775, -4132,  2777,  1854,  2780,
   11476,   185,  2780,  3111,  2481,  2481, 16082,  3157,  2475, 12134,
    1632, 12134,  1632,  2780,  2780,  2780, -4132, 16082,  2786, 16082,
   16082, -4132,  3002,   849,  2790,  1157, 49444,   -91,  2480,  1201,
   -4132,    45, 37924,   113, -4132, -4132, 41124,  2791, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132,  2955, 24469,  2887,  2888,
    2896, -4132, 30875, -4132, -4132, -4132, -4132, 30875,   -34, -4132,
   -4132, -4132, -4132, -4132,  2902, -4132, -4132, -4132,  2808, -4132,
   37924,  2808, -4132, -4132,  2808, -4132, -4132,  2808,    30,  4157,
   -4132,   242,   263,  3540,  2835, -4132, -4132,  3041, -4132, 24469,
   -4132,  3233,   -81, 24469, -4132,  1194,  2813, -4132, -4132, -4132,
   -4132, -4132,  2171,  2930, -4132,  3460, -4132, 11476,  -171, -4132,
   37924, 37924, 24469,  2903,   509, -4132,  1400,  2822, -4132, -4132,
   -4132, -4132, -4132,  3520, 18056,  2818, 37924,    41, -4132, -4132,
   -4132, -4132, -4132,   132,   849, -4132,  2816, -4132, 39844, -4132,
     849,    45,  2830,  2839, -4132, -4132,  3213,   -93, -4132,  2833,
    2834, -4132,  2829,  2838,  2841, 45604, 11476, -4132,  1144, -4132,
   -4132,    45, -4132, -4132,  8844,  -171,  3300, -4132,   849,  2843,
   49444, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132,   666, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132,   -24, -4132, -4132, -4132, -4132,
   -4132,  3086,  2716,  2717,  3300,   -24,   192, 24469,   -24,   -24,
   -4132, -4132,  2928,  2905, -4132, -4132, -4132, -4132,  3041,  2853,
   -4132,  3321,  3471,  2716, -4132, -4132, -4132,    45,    45,  3171,
   -4132,  -171,  2996,  2997,  2999,  3000,  3004,  3048, -4132, -4132,
    -171,  -171, -4132, -4132,    45, -4132,   981, -4132, -4132, -4132,
   -4132,  -171,  -171,  -171,  -171,  1960,  -171,  -171,  1689, -4132,
   -4132,    45,    45, -4132,  1958, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132,  1296, -4132,  3130, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132,  4946,   497, -4132,  3085, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  2883,
   -4132, -4132, 11476,  2889,  1960,  -171,  1960,  1960,  -171,  -171,
    1449,  -171,  1960,  1960,  -171,  -171,  -171,  -171,  -171,  -171,
    -171,  1960,  1960,  -171,  1977,  -171,  1960,  4368, -4132, -4132,
   -4132, -4132,   203,    45,    45,    45,    45, -4132,  2056, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132,  1960, -4132,  3495,
    1960,  1960, -4132, -4132,  2912, -4132,  2188, -4132, 41124,  3265,
    2514,   -77, 41124, -4132, 49444, -4132,  1558, 49444,  2894,  -175,
    2616,   153,   153, -4132, 24469, 24469, 24469, 49444,  2939, -4132,
   32152, -4132, -4132,  1298, -4132,  2890, 13450, -4132,  2895, -4132,
   11476, -4132, -4132, -4132,  1372, 11476, 11476,  3400,  1424, -4132,
   40484, -4132, -4132, -4132, 11476, 40484,  1424, 11476, -4132,  2904,
   -4132, -4132,  3316,  3317, -4132, -4132, -4132, -4132, 11476, 11476,
   -4132, 11476, 11476, -4132, 11476, 11476, 11476, 11476, 11476, -4132,
   -4132, 16082, -4132,  2899,  2907, -4132, -4132, -4132,  2908, -4132,
   11476, -4132, -4132, -4132, -4132, -4132, -4132, -4132, 11476, -4132,
   11476, -4132, 11476, 11476, -4132, 11476, 11476, -4132, -4132, -4132,
   14108, 11476, 11476,  2910, -4132, -4132, 11476, 11476, 11476, -4132,
   11476,   167, 11476,   859, 11476,  1796, 11476, -4132, 11476, -4132,
   -4132, -4132, -4132, 11476,   340,  2171,  1960,  2913, -4132,  1694,
   -4132, -4132,  2165, -4132,   979,  2915, -4132, -4132,  1658, -4132,
   -4132, 41124, 11476, -4132, -4132, -4132, -4132, -4132, -4132, 16082,
     309,  2916, 16082, -4132,  3111,  2976,  2976,  2018, 11476,   185,
    3111, 11476,  2918,  2911, -4132, 11476, 49444, -4132, -4132, -4132,
   -4132, 41124, -4132, -4132, -4132, -4132, 24469, -4132,  2479, -4132,
    2464, -4132,  3415,  2920, -4132, -4132, -4132, -4132, -4132, -4132,
   49444, -4132,  2988, -4132, -4132, -4132, 22542, 22542, -4132, 22542,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132,  2716,  1449,  3351, -4132,  2926, -4132, -4132,
    2656,  3019,  2967,  3320, -4132, -4132, -4132, -4132, 49444, 16082,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  3565,
    2959,  2966,  3452,  2969,   849, -4132,  3049, -4132, -4132, 24469,
   -4132, -4132, -4132, -4132, -4132,   872, -4132, -4132,  2970,  2970,
   19978, -4132, -4132, -4132, 49444,  3468, -4132,  3423,  3437, 22542,
   22542, 22542,  1105, -4132, 24469,   432, -4132, -4132,   845, -4132,
    3392,  2716, -4132,  1935, 41764, -4132, 32795, -4132, -4132, -4132,
   -4132,  -107,  3079,  3081,   -54, -4132, -4132,  3387,  3212, -4132,
   -4132, -4132,    45,   849, -4132,  2575,  8844,  2987, 28952, -4132,
   16082,  1939, -4132,   849, -4132, -4132,  1449, -4132,     2, -4132,
   36644, 36644, -4132,  3275, -4132, -4132, -4132, -4132,  2835,   192,
   -4132, -4132,  3485, -4132,  3486, -4132,  3005,  3487, -4132,  3253,
    3096,  1960,  3326, -4132, -4132, -4132, 39844, 37284, -4132, -4132,
   -4132, -4132,  3545, -4132,  3547,  1397, -4132, -4132,  2267,  1119,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  1829,
    2267,  2267,   155, -4132,   126, -4132, -4132, -4132, -4132,  3488,
    2373,    45,  1574,  3264,    45,    45,  3589,    45,  3268,  3271,
      45,    45,  3097,  3532,    45,  3417,  3126,  2494,  3420,    45,
    3274, -4132,  3132,  3541,    45,    45,    45,    45,    45,  3589,
    3280,  3635,    45, -4132,    45,  3286,  3285,   172,  3299,  3301,
      45,    45,    45,    45,  1146, 49444,    45,  3302,    45, -4132,
   -4132,  3922, -4132, -4132, -4132, -4132, -4132, -4132,   852, 23185,
   -4132, -4132, -4132, -4132,  1496,   293,  3127,  1763,  3050,  3053,
   46244,   849,  1960, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132,  -171,  2171,  2267,  2267,  1633, -4132, -4132,
    1960, -4132, -4132,  1960,  2616, -4132,  3322,  3498,    45, -4132,
    2261, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
    3142, -4132,  3677,  3247,  3058, -4132, -4132,   311, -4132, -4132,
      77, 24469, 18698, -4132,  3314, -4132,  2636, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132,  3051,  1298,  2835,  1897,
   -4132, -4132, 49444,  2820,  2835, -4132,  3062, -4132, -4132, 24469,
   -4132,  3071, -4132, 12134,  1335, -4132,   849, 11476,   849,  2008,
   -4132,  3068,  3068,  3069, -4132,  3070,  3068,  3483,  3069,  3490,
    3075,  3076,  1367,  3083,  3088,  1781, -4132, 11476, 11476,  1377,
     322,  1414,   667,   825,   835,   341, -4132,  1419,  3042, -4132,
   -4132,  1437,  1439,  1446,  1459,   877,  1503,  1729, 12134,  1526,
     758,   365, -4132,  1541,   884,   895,  1552, 11476,  1578, 11476,
    1603, 11476,  1614,  1634,  1647,  3087,  3087,   157, -4132,  3078,
   -4132, -4132, -4132,  3084, -4132, -4132,  2327,  2165, -4132, -4132,
    3089, -4132, -4132,  3073,   849,  3091, -4132, -4132, 11476, -4132,
     160, -4132, -4132, 16082,   378,  3093, -4132,   849, -4132, -4132,
    3109,  1781, -4132, -4132, -4132, -4132,  1194, -4132,    20,  3450,
   30875, -4132,  1749, -4132, 37924,  3074, -4132,  3090,  3165,  3181,
    3193,  3114, 11476, -4132, -4132, -4132, 21902, 24469, -4132,  3549,
   -4132, -4132, -4132, -4132,  3137,  3122, -4132, -4132, -4132,  3111,
    3509,  3385, -4132, -4132,  2171, 49444, 37924, -4132, -4132,  1946,
   25749, -4132,  3134, -4132,  3134,  1489,  3143,  1759, -4132, -4132,
   -4132,  3148,  2375,  1777, -4132, 18056,  3401, 37924,  3591,  3592,
    3596, -4132,  1179,  2835, -4132,  2835,   117,  3180,  3548, -4132,
   -4132, -4132,   374, -4132, 46884, -4132, -4132, -4132, -4132,  1326,
   -4132,  3144,  3158,    71,  3383, -4132, -4132, -4132, -4132,  8844,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132,  2716, -4132, -4132,
   -4132, -4132, -4132,  2716, -4132,   -24,  -171,  -171,  1568,  -171,
    3654,  3690,  1449,  3351, -4132, -4132, 11476, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132,  1296, -4132, -4132, -4132, 26389,
     890, -4132,  1075, -4132, 26389, -4132,   140,   140, -4132, 47524,
   49444, 26389,   890,  1449,  1960, 26389,  1960, 48164,   890,  -171,
    -171,  2229,    45,  1960, -4132, -4132,  3562,  2944,  3564, 26389,
   26389, -4132, 41124, 49444, -4132,    45,    83,  1960, 48804,  1449,
    1449, 26389,   890, 25749,  2255, -4132,  -171,   890, -4132, -4132,
   -4132, -4132, 24469,   890,   890,  3669,  2350,  3082,  3125, -4132,
   -4132, -4132,  1960, 48164, -4132, -4132,  5328, -4132, -4132, -4132,
   19338, 49444,   273,   150, -4132,  3163,  3412, -4132, 11476, 11476,
    3448, 49444,  3454, -4132,  3753, 49444,  3812, 48164, -4132,  3178,
   -4132,  3179, -4132,  1789, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132,  3182, 49444,  2267,  2214, -4132, -4132,
    -171,    77, -4132, -4132, -4132, -4132,  3462,  3465, 49444, -4132,
   -4132, -4132, -4132,  3336, -4132, 24469, -4132,  3363, -4132,  3190,
    3192, -4132, -4132, -4132,   523,  4178, -4132,  3196,  3197,  3199,
   32152,  2835,  3472, -4132, -4132,  1172,  3598,  3603, -4132,  3459,
      11,  3459,  1172,  1172, -4132,  1298,  2810, -4132,  2976, -4132,
     849, 11476,  1057, -4132, -4132,   211,  3491, -4132,  1238, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132,  3204,  2976,  2976, -4132, -4132, 11476, -4132,  3815,  3379,
   11476, 11476, -4132, 11476, -4132,  1017,  3209,  3236, -4132, -4132,
   -4132, -4132, 11476, -4132, -4132,  2976, -4132, 11476, -4132, -4132,
   11476, -4132, 11476, 11476, -4132,  1659, -4132,  1673, -4132,  1681,
   -4132, -4132, -4132,  2171,  3215,  3604, -4132, -4132, -4132,  2171,
    3408, -4132, -4132,  2171,  1960,  2572, -4132, -4132,   943, 49444,
   -4132, -4132,  1801, -4132, -4132, 11476, -4132, 41764, -4132, -4132,
    1167,   544, -4132,  3444, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, 49444,  1148,  3225, 33438, 37924, 37924, 37924, 14766,   849,
   -4132, -4132, -4132,  3549,  3613, -4132,    24, -4132, 49444,  3222,
    1836, -4132,  1822, -4132, -4132,  3223, -4132,  2327,  3224, -4132,
      45, 14766,  2970,  3363, -4132, -4132,  1489, 25749, 32795, -4132,
   -4132, 49444, -4132,  3686,  2412, 37924, 37924, 37924, -4132,  2716,
    1981,  3674,  3019,  3019, -4132, 29593, -4132,   -91,  3391, -4132,
   -4132, 34081, -4132, -4132, -4132, -4132, -4132, -4132, 28952, 45604,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132,  -171,  3724,  3484,
   -4132,  1298,   849,  3230,   295, -4132, -4132, -4132, -4132,  3235,
    3630,  3633, -4132, 26389,   140, -4132, -4132, 26389, 26389, -4132,
   -4132,  1853,   120, 48164, -4132, -4132, -4132, -4132, -4132, -4132,
    3239, -4132, -4132,  2171, -4132, -4132, 37284,  -171, -4132, 26389,
   49444, -4132, -4132,   544, -4132,  3261,  -171, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, 48164,  3244, -4132,
     295, -4132, -4132,  2177, -4132, 48164, -4132, -4132, -4132, 48164,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132,  3238,  2973,  1852, -4132,  3246, -4132, 49444, -4132,
   -4132, 24469, -4132, -4132, -4132,  6535, 49444, -4132,   849,  2976,
    3821, -4132, -4132,  3403,  -171,  3762, -4132,  1872, -4132,  3251,
   -4132, 46244, -4132,  1960,  1829, -4132, -4132, -4132, -4132,  3407,
    1202, -4132,  3445,  3270,  3267, -4132, -4132,  -171,  3277,  3278,
    3922, 19338, -4132, -4132, -4132,  3901, -4132, 49444, 49444, 49444,
    2890, -4132,  3659,  -232,  1594, -4132,   348, -4132, -4132, -4132,
    3680,  1172,  3459,  3459,  3681,  3555,   740, -4132,  1742, -4132,
    1946,  1299,   849,  3283,  3284,  3287,  3288,  3908,   215, -4132,
    3912, 40484, -4132, -4132, -4132,  3294,  1927, -4132,  3295,  3304,
    1748, -4132,   168,  3305,  1771,   914,  1948,  3618,  3698, -4132,
    3539, -4132,  1814,  1396,  1827,  1832,  1876,  1880, -4132, -4132,
   -4132, -4132, -4132,  3307, -4132, -4132,  1284, -4132,  3308,  1933,
    1594, -4132, -4132,  1954, -4132, -4132,  3684,  3955, -4132,  3791,
    3691, -4132,  3763, -4132, -4132, -4132,  -176,  -176,  -176,  1939,
     849,  1993, -4132,  1400, -4132, -4132,  3729, -4132, -4132,  3319,
    3460, 49444, -4132,  3385, -4132,  2572, 25749, 14766,  3323,  3328,
   -4132,  1274, -4132, -4132,  3313, -4132, -4132, 37924,  2412,  2412,
    2412, -4132,  2543,  3930,  3764, -4132, -4132, 41124,  3329, -4132,
   -4132, -4132,  3643, -4132, -4132, -4132, -4132,  -171,  3828, -4132,
    3503, 11476, -4132, -4132, -4132,   626, 11476, 26389, -4132, -4132,
   -4132,  3341, -4132, -4132, -4132, -4132, -4132,  3871,  3873, -4132,
   26389,  2922, 49444, -4132,  3147, -4132, -4132,  3239, -4132,  3446,
   -4132,  6535, -4132, 25749, -4132, -4132, -4132, 49444, -4132, 24469,
   -4132, -4132,  3347, -4132,  3068,  3068,  3068, -4132, -4132, -4132,
    3069, -4132,  3070,  3594, -4132,  3070,  3070, -4132, -4132, -4132,
   -4132, -4132,   211,  1710, -4132, -4132,   211, -4132, -4132, -4132,
      92,  1584,  3070, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
    3068,  3069,  3069, -4132, -4132,   211,  3068, -4132,  3068,  2520,
   -4132,   272,   131,  3068,  3068,  3068,  3349,  3343, -4132, -4132,
   -4132, -4132, -4132, -4132, 49444, -4132,  1211, -4132, -4132, -4132,
    1996,  -171, -4132, -4132, -4132,  3353,  3354, -4132, -4132, -4132,
     293, -4132, 49444,  6535, -4132, -4132, -4132,  3314, -4132, -4132,
    1212,  2002,   295,  3357,  2033,  2042, 36644, -4132,  1658,  1179,
   -4132,  1298, -4132,  1172, -4132,  3758,  3759,  1172, -4132, -4132,
   -4132, -4132,  2327, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, 40484, -4132,  3981, -4132,  3646, -4132, -4132, -4132, 11476,
   -4132, -4132, -4132, 11476, -4132, -4132,  3682,  3842, -4132, -4132,
   -4132, -4132, -4132, -4132,  3366, -4132,  1960,   845,   845, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132,  3642,  1434,  3395,  3395,
    3395, -4132, 14766,  3651,  3473, -4132, -4132,  3374,  3416, -4132,
   -4132,  1933, -4132, -4132, -4132, -4132,  2412,  2764, 11476, -4132,
    3472,  2229, -4132, 29593,   -91, -4132,  -171, 25749,   295,  2171,
    3385, -4132,  1913,  3377,  3378, 49444,  3381,  3382, -4132,  3038,
     273, -4132, -4132, -4132, 24469,  2520,   890, -4132, -4132,  3239,
     872,  3384, 49444,  3725, -4132, -4132, -4132, -4132,  1487, -4132,
    3386,  1487,  1487, -4132,  2488, -4132,  3418,   211, -4132, -4132,
    3421, -4132, -4132, -4132,  1487,  3388,   211, -4132, -4132, -4132,
   -4132,  1487, -4132, 41124,  2231,  -171,  3250, -4132,  3439, -4132,
    3920,  1420, -4132,  2520, -4132,  3789,  3792,  3685, -4132,   211,
   -4132, -4132,  3981, -4132,   211,  3981,  1487,  3679, -4132,  1487,
   49444,  3523, -4132, 55804, -4132, -4132,  1234,  3422, -4132, -4132,
   -4132, -4132,  1816, 49444, 24469,  3448,  3593, -4132,  3147, -4132,
    1274,   523,  3363, -4132,   -91, 49444, -4132,  3687,   -91,   -91,
   -4132, -4132, -4132,  3062,  3372,  3447,  1172,  1172,  3634,  3453,
   11476, 11476,  3404, -4132,  1034,  2572, -4132, -4132,  3399,  3406,
     295,  1924, -4132, -4132, -4132,  3409, -4132, -4132, -4132,  3504,
    3505, -4132, -4132,  3506, -4132, -4132,   127,  2580, -4132, -4132,
   -4132, -4132,  3921, -4132, 24469, 16082,  3535, 49444,   141,  3631,
   -4132,  3041,  1598,   295, 11476,  2716, 37284, -4132, -4132, -4132,
   -4132,  3426, -4132,    45, -4132, -4132,  2044, -4132, 49444, 49444,
    2048, 49444, 49444,  2887,  2888,  2896,  1977,  1977, -4132, -4132,
   -4132, -4132, -4132, -4132,  3844, -4132, -4132,  2054, -4132,  1185,
    3714, -4132, -4132, -4132, -4132,  1487, -4132,   168, -4132, -4132,
   -4132, -4132, -4132,   168, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132,  3726,  3476, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  3438,
   -4132, -4132, 11476,  3940,  3477, 49444,    96, -4132, 57074, 57074,
   49444, -4132, -4132, -4132, -4132,  6074, -4132, -4132,   863, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
    4073, -4132,  3443, -4132, -4132,  1234,  3456, -4132,  1705, -4132,
    2375, -4132, -4132,  6535,  3915,  1763, -4132, -4132, -4132, -4132,
   -4132,  3463,  2375,   829,   295,  3464,   200,   218,   943, -4132,
    3507, -4132, -4132, -4132,  3521,   849,   849, 49444, -4132,  1127,
    1933, -4132, 11476, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
     368,  3727,  1960,  1960,  1960,  1960,  2580, -4132, -4132,  2810,
   -4132,  2171, -4132,  2062, -4132, -4132, -4132,  3571,    45,  4001,
    4002,    45,    45,    45,    45,  3489,  3631, -4132,  3983,  3096,
   -4132, -4132, 11476, -4132, -4132,   849,  3733, -4132,  4067, 25749,
    2835, 14766, -4132,  2079,  2083,   829,  2097,  2107, -4132, -4132,
   -4132,   273,  3496, -4132, 49444, -4132, -4132, -4132,   292, -4132,
   -4132,  2128, -4132,  2132, -4132, -4132,   849, 11476, -4132, 11476,
    3522, -4132, -4132,  3958, 49444, -4132, -4132, -4132, -4132, 11476,
   -4132, 55804, 55804, -4132, -4132, -4132, -4132,  4125, -4132,  3501,
    1274,  4099,  3781,  4102, -4132,  2478, -4132, -4132,  3753,  6535,
   -4132, -4132,  -171,    45, -4132,   829, -4132, -4132, -4132, -4132,
   -4132, -4132,  3770, -4132,   200, -4132, -4132, -4132,   218, -4132,
   -4132, -4132, 11476,  3511, 11476,  3515,  2137, -4132, -4132,   140,
     140, -4132,  1127, -4132,   295, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132,  3919, -4132,  3517, -4132, -4132, 49444,  3525, -4132,
    -171,    45,    45,  2336,  2336,  2171, 41124,  3637, -4132, -4132,
      45,  3351,   295,  4167, -4132,   924,  3910, -4132,  3472, -4132,
    3750,   829, -4132,   200,   218, -4132,  3385, -4132,   975,   975,
     211,   168,   211,   849,   849, -4132,   256, -4132, -4132,  3951,
    4048, 11476,   849, 52629,  3550, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, 56439, 11476,
   -4132,   863,  4073, -4132, -4132,  3826, -4132,  3827, -4132, -4132,
   -4132,  4075, 55804, -4132,  4068, -4132,  1274, -4132,  1960,  1167,
   -4132,  1375,  1167, -4132,  1167, -4132,  1594,   849, 49444,   849,
   49444, -4132,  4020,  4020, -4132, -4132,  3609,  2229, -4132,  3535,
   -4132,  3560, -4132, -4132,   -83, -4132,  -171,  -171, -4132, -4132,
   -4132, -4132, -4132,  2140, -4132, 41124, 24469, -4132, -4132,  4169,
    4170,  4064,  4172,   924, -4132,  -159, -4132,  3659, -4132, -4132,
   -4132, -4132,  2156, -4132,  4214, -4132,   125,  3845,  3846, -4132,
   -4132, -4132,  3595, 11476, 55804, -4132,  4069, -4132,  3998,   849,
    3939,  3566, -4132,  3567,   849,  4103, 57074, 57074, -4132, -4132,
   -4132, -4132,  4079, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132,  2170,  2178,  1582, -4132, -4132, 25749, -4132, -4132,
   -4132,  2196, -4132, 15424, -4132, -4132, -4132, -4132, -4132, 41124,
   -4132,  3637, -4132,  3739,  3577,   168,   168,  4186,   168, -4132,
    4187,  4188,  -159, -4132, -4132, -4132, -4132, -4132, -4132,  3636,
    4105, -4132,   270, -4132,   849, 53264,  4197, 49444, -4132,  3675,
   -4132, -4132, 11476,  4109, 42404, 53899,  3597, -4132, -4132, -4132,
    3786, -4132,  2478, -4132, -4132,  4207, -4132,  4213,  3606,  3607,
    3608, -4132,    45,  3795, -4132,  3560, -4132,  3610, -4132,  3111,
    3631, -4132, -4132, 25749,  3893, -4132, -4132,   168, -4132,   168,
     168, -4132,   975,   975, 11476, -4132,  4113,  3704, -4132,  3614,
   -4132, 55804,   849, 55804, -4132, -4132,  4060,  3616,  1616, -4132,
    3615, -4132, -4132, 55804, -4132, -4132, 46244, 46244, 25749, 14766,
    4049,  4067, -4132, 15424,  3619, -4132,  3426, -4132,  3621,  3622,
   -4132, -4132, -4132, -4132, -4132,   849,  4225, 55804, 49444, 50724,
    4126, 54534,  4087, 49444,  6535,  4089,  4090, -4132, 55804, -4132,
    3629,  2221, -4132, -4132,  4239,  3910, -4132, -4132,  2835, -4132,
    3893,  3722, -4132, 51359, -4132,  2359,  3837,  3661, -4132, -4132,
    4166,  3138, -4132, -4132, -4132, -4132,   168,  4065,  3472, -4132,
   55804, 55804, -4132, -4132, -4132, -4132, 34724, -4132, -4132, -4132,
   -4132, -4132,  1105, -4132,  3924,  3640,  3659, 51994, 55169, -4132,
   -4132, -4132, 31515, -4132, -4132, -4132,  4101, -4132, 11476, -4132,
     -19, 20618,  3806, -4132, 34724, -4132, -4132,   849, -4132, -4132,
   -4132, -4132, 41124,  2223, -4132, -4132, 25749, -4132, -4132, -4132,
   -4132, 23827,  3641, -4132,    45, -4132, 25749, -4132, -4132, 14766,
   -4132, -4132
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4132, -4132, -4132, -4132, -4132,   264, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132,  2010, -4132, -4132, -4132, -4132, -4132,
    2225, -4132,   917, -1832, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  2198, -4132,
     921,  1831,  3638, -4132,   638, -4132,   246, -4132, -4132, -4132,
   -2862,   118,   -99, -4132, -4132,   911,    21,  3315,   -97, -3976,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,   650,
     647, -4132, -4132,   450, -4132, -4132, -1085, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132,  -314,  -265,  2061, -4132, -4132, -4132,
    4282, -4132,  3728, -4132, -1765,  2457, -4132, -4132, -4132, -4132,
   -4132,  2524, -1696, -4132, -4132, -4132,  1563, -4132, -4132, -4132,
   -4132,  -539,   472, -4132,   474, -4132,   475, -4132,   476, -4132,
     477,   479,   480,   481, -4132,   483, -4132, -4132,  -255, -4132,
   -4132, -4132, -4132,   485, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132,  -113, -4132, -4132,    64, -4132, -4132,  -111,   489, -4132,
     -52,   490, -4132,   493, -4132,    46, -4132,    50, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132,  3325, -4132, -4132, -4132, -2287, -4132, -4132, -2400,  2849,
   -4132, -1533, -4132, -4132, -1787, -4132, -4132, -1822,   913, -4132,
   -4132,  1361,   834, -4132, -1357, -1911, -1903, -4132, -4132, -4132,
   -1970, -1948, -1326, -1321, -2240,  1758, -4132, -4132,   486, -4132,
   -4132, -2537,  1820,  2331, -4132, -2434, -4132, -4132,  1046, -4132,
   -4132,  1570,   862,  1571, -4132,  1175,  3054, -1219, -4132, -4132,
   -4132, -4132, -4132, -4132,   128,   444,    31, -4132, -3440,   868,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -2264, -4132,
   -4132, -4132,  -161, -4132, -4132,   -56, -4132, -4132,  -112, -4132,
     260, -2303, -4132, -4132, -4132, -4132,  2815, -1349, -4132,  3856,
   -4132,  -422,   991,  1851, -2037, -1908, -4132,  -887,  -878, -2868,
   -4132, -4132, -4132, -3535,  1373,  1422, -4132,   995,  1855, -2358,
   -4132,  1426, -4132, -4132,   833, -4132, -3111, -4132, -4132, -4132,
     792, -4132,   794, -4132, -4132, -4132, -3214,   762, -2570,  1428,
    -477, -4132,   426, -2413, -2520, -4132,   617, -4132,   570, -3695,
   -3539, -4132,  -577, -2085, -2391,    67, -4132, -4132,   583, -3352,
    1963, -4132, -4132, -4132, -3392, -3417,  1696, -4132, -4132,  1275,
   -4132, -1593,  1277, -4132, -4132, -4132,  1289, -4132,   156, -4132,
   -4132, -4132, -4132, -2831, -4132, -4132, -1507, -2686, -4132, -4132,
       4, -4132,  3886,  3889,  4417,  4418, -1037, -2251, -3808,   158,
     163, -4132, -4132, -4132,  2855,  1149, -1656,   230,   220,   225,
    2321, -1957,   555, -2778, -4132,   451, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132,  1893, -1246, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -3043, -2795, -4132, -4132,  1469, -4132, -4132, -4132,
   -2219, -1960, -1954, -2361, -2274, -2853, -3555, -4132, -4132, -4132,
   -4132, -4132, -4132,  2983, -4132, -4132, -4132, -4132, -4132,  3843,
   -4132,  2989, -4132, -4132, -4132, -4132, -4132, -4132, -4132,   649,
    2085, -4132, -4132, -4132, -4132, -4132, -4132,   883,  2891, -4132,
   -4132, -4132,     1, -4132, -4132, -4132, -4132,  2593, -4132, -4132,
   -4132, -4132,  2935, -4132, -4132, -4132, -4132, -4132, -4132,  1670,
   -4132,  2130, -4132, -1463, -4132, -4132,  1269,  -981,  2081,  3847,
    2220, -4132, -4132,  -610, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -1572, -2636, -4132,  3569, -1152, -2622,  2587,  -671, -1871,
    1314,   323,  3676, -4132, -1139, -1133, -4132, -4132,  -662, -4132,
   -4132, -4132,  -638, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132,  1713, -4132, -4132, -4132, -4132, -1202,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132,  1671, -4132,  2317,
   -4132,  -423, -4132,  3356, -4132, -4132, -4132, -2896, -2035,  1410,
     785, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -1561, -4132, -2925, -4132, -4132, -4132, -4132, -4132,  2236, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -2446, -4132, -1897,   137,
   -4132,   249, -4132, -4132, -4132, -4132, -4132, -4132, -4132,   -53,
    1101,   -51, -2679, -1065,  1709, -4132, -4132, -1276,  3389, -2388,
   -4132, -4132, -4132,  2216, -4132, -4132, -4132, -4132, -4132,   904,
   -2989,  3010, -4132, -4132, -3196,  -894, -2262,  -854, -4132, -2337,
   -4131, -1465, -1814, -1361, -1327, -2378, -4132, -4132, -4132, -4132,
     -90, -4132, -4132, -4132,   716,  2101, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  -601,  -828,
   -4132, -4132,  2368,  2308,  1557, -4132,  3258, -4132, -1047,  3510,
   -4132, -4132,  3512, -4132, -4132, -4132, -4132,  1718,  3162,  1002,
   -4132, -4132, -1853, -4132, -4132,  2138, -4132,   990,  -899,  -792,
    1297, -4132, -4132,  1300, -3418, -4132, -4132,  3524, -4132, -4132,
       5,   375, -4132,   -25,  -597, -1923,  -944, -1436,   386,  3530,
   -4132, -4132, -4132, -4132, -4132, -4132,  2921, -1034,  3829, -4132,
   -4132, -4132, -4132, -4132, -4132,  2566, -4132, -4132, -4132, -4132,
   -4132, -4132,  3107,  3923,  -596, -1328, -4132,  -607,  3092,  2567,
    -800, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132,  2728,   936, -4132, -4132,
   -4132,  3183, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,  1330,
     -12, -4132,   164,   -42, -4132,    82, -4132, -4132, -4132, -4132,
   -4132,  -115, -4132, -4132,  -116, -4132,  -963, -1378,   706, -1229,
   -2021, -4132,  1324,  3170, -3279,  -690, -1154, -1145, -2442,   100,
   -4132, -4132,  2981,  1849,   182,  -451,  -336,    -6, -2236,  -114,
    -586, -4132, -1751, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132,  2129, -4132, -4132, -4132,  1301, -4132,  3946, -4132,  2819,
    1304,  3947, -4132, -1341,  2639,  2143,  2141, -4132, -4132,  2154,
   -1858, -4132, -4132, -1289,   180, -4132,  2713, -4132, -4132, -4132,
   -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132,  2682,  3683,  3200, -4132,  2732, -4132, -4132,
   -4132, -4132, -4132,   462, -4132,   582, -4132, -2485,  2985,   572,
   -4132,  1384,  -554,  -795, -4132, -4132,   460, -4132, -4132,  1535,
    3973,  3688, -4132, -4132, -4132, -4132, -4132, -2726,  -873, -4132,
   -3388, -3292, -1708, -4132, -4132, -2157, -3014, -4132, -4132, -1014,
   -4132, -4132, -4132, -4132, -1938, -4132, -4132, -4132,    40,  4038,
    4040, -4132, -4132,  -248, -4132,  1200, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132,   518,   918, -4132, -4132,  3904, -4132, -4132,
   -4132, -4132,  3905, -4132, -4132, -4132, -4132, -4132,  3906, -4132,
   -4132, -4132, -4132, -4132,  1721, -4132, -4132, -4132, -4132, -4132,
   -4132, -4132, -4132
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2689
static const yytype_int16 yytable[] =
{
     509,  1038,  1053,  1061,   951,  1482,  1384,  1387,   642,   980,
    1690,  1369,   969,   558,  2395,   536,  1399,   566,  2049,  1715,
    2247,   559,   910,   947,  1489,  1465,   580,   507,  1716,  1968,
    1844,   578,  2129,   592,  1589,  1590,   595,   585,  2346,  1938,
     592,  1804,  1842,  1599,  1125,  2450,  1863,   610,  2032,   995,
    2874,  2786,  1447,  2589,  1667,  1082,  1911,  1738,  1027,  1030,
    2046,  2783,  1010,  3412,  1746,  2681,  2888,  2816,  1803,  1419,
    2683,  1748,  1749,  2551,  3304,  1752,  1753,  1754,  1755,  2552,
    1757,  1758,  1760,  1762,  1763,  1764,  1765,  1766,   631,  2955,
    2898,  2742,  1419,  2870,  2871,  1631,  3219,  3044,  2654,  3763,
    1945,   666,  2898,  2898,  1494,  1851,  2292,  2984,  3084,  2376,
     634,  2487,   509,  1495,  3145,   509,   641,   647,  1955,  2488,
     813,  1413,  3690,   564,  3584,  2541,  1958,  1959,  3371,  2841,
    2445,  2921,  2911,  3765,  3480,  2925,  3275,  3425,  1464,   636,
    2616,  1221,   638,  1976,  4099,  1998,  2940,  1448,  3305,  3244,
    2011,  3820,  3075,  1179,  1180,  1181,  3082,  1305,  2951,  3416,
    1188,  1189,  2617,  2283,  3851,  2868,  1222,  3426,  2111,   652,
    1188,  1189, -1877,  3207,  2470,  1967,  1999,  3136,  1424,  2011,
    2019,  2000,  2019,  1188,  1189,  2020,   135,  2020,  3740,   516,
    2984,  2959,  1188,  1189,   630,  2234,  1780,  2906,  2637,  2613,
    3029,  1636,  1857,   970,  1623,  1380,  2332,  2614,   661,   577,
    3018,  3269,  3162,   115,  3067,   584,  2090,  2898,  2898,  4319,
    3813,  3818,  3793,  1846,  3819,  1825,  3940,   843,  2306,  1236,
    1223,  3278,  3437,  1188,  1189,  3970,  3709,  4434, -2022,  2379,
    2902,  2903,   988,  3829,  3438,  1401,  4454,  2095,  1247,  3850,
    4457,  3402,  2096,  4638,  3639,  1223,  1069,  3577,  3439,  1460,
    3052,  1471,  3081,  3232,  3567,  3421,  3064,  1892,  3307,   917,
     900,  1305,  3778,   917,   900,  1512,  3422,  4202,  3747,  1332,
   -1877,  3358,   677, -2572,  2405,  1188,  1189,  2630,  3137,  3182,
     573,  4172,  1893,  3437, -1560,  4202,  3907,  4002,  1306,  1188,
    1189,  2598,  1491,  1640,  2738,  3438,  1188,  1189,  3488,  1315,
     116,  2390,   653,  1188,  1189,  3552,  2988,  1188,  1189,  3439,
    3030,  1166,  2620,  1491,  2384,  1188,  1189,  2385,  1491,   117,
     917,   900,  2960,  -934,  3931,  1049,  2296,  4272,  1188,  1189,
    3956,  1449,  3224,  3308,  1602,  1602,  1188,  1189,  2333,   134,
    2262,  1188,  1189,   602,  -582,  3008,  3009,  1188,  1189,  -583,
    1994,   513,  2717,  1226,   514,  2638,  3688,  4450,  4196,  2150,
    2121,  1582,  2047,  2725,  2386,  2853,  1188,  1189,  1579,  1580,
    1581,  1188,  1189,   971,  1036,  1037,  4116,  1420,  3808,  1994,
     134,  3811,  3812,  2122,  1188,  1189,  2854,  2048, -2501,  2726,
     118,  4451,  1583,  1188,  1189,  2145,  4394,  4117,  3824,  1641,
     667,   574,  1306,  1644,  2151,  1225,  1519,   583,  1630, -2502,
    4394,  1645,  4278,  3689,   512,  3990,  3553,  1345,  1068,   119,
    3919,  2855,  1125,   603,  3994,  4015,   517,  1421,  4017,  2297,
    3910,  3023,  2012,  2235,  2307,  3229,  3056,  3231,  3309,  1327,
    3578,  4639,  4173,   846,  1894,  2380,  4203,  4014,  3359,  1188,
    1189,  2989,  4016,  4379,  1188,  1189,  4164,  1472,  1188,  1189,
    3795,  2012,  1603,  1618,  4203,   989,  3403,  3423,  2211,  3282,
    1578,  2483,   120,  3286,  2621,  4633,  3886,   657,  2278,  3943,
    1624,  1906,  4069,  4458, -1877,  3559,  3694,  3302,  3303,  3562,
    3563,  1167,  1646,  1969,  4325,  3233,  4319,   990,  3031,  3316,
    1188,  1189, -2501,  1316,  1188,  1189,  1972,  1461,   641,  2833,
     647,  1238,   845, -1877,  3326,  2226,  4068,  1190,  1188,  1189,
    1191,  1656,  1513, -2502,  1657,  1429,  1381,  1743,  2984, -1560,
    2475,   827,  2406, -2050,  3799,  1224,   647,  1188,  1189,  3024,
    1190,  1188,  1189,  1191,  2334,  4233,  2337,   841,  2861,  1190,
    1648,   641,  1191,   851,  2412,  1188,  1189,  1188,  1189,  1751,
    1224,  4430,  2284,  2487,  1188,  1189,   864,  2833,  2554,  1822,
    1805,  2488,  3954,  3057,  2308,  3515,  1772,  3361,  3560,  2563,
     844,  2566,  2567,   911,  2283,  2308,  4275,  2577,  2578,  3046,
    1190,   967,  3058,  1191,  1402,  1494,  2586,  2587,  3415,  3261,
    3568,  2591,  3051,  3059,  1495,  3032,   121,  3387,  3265,   984,
    3920,  3138,  1940,  2264,  1974,  1943,  2869,  2639,  2438,   641,
    1947,   999,  2599,  2541,  2267,  2601,  2602,  2270,  2898,  1998,
    2616,  1425,   641,   631,   509,  1804, -1877,  2900,  1783,   631,
    3163,  1025,  1190,   631,   631,  1191,  1960,  1961,  1039,   999,
     631,  3245,  2617,  3411,   641,  2486,  1190,  1613,  1614,  1191,
    1999,  1012,  1803,  1190,  1070,  2000,  1191,  1071,  1072,  -487,
    1190, -1560,  1077,  1191,  1190,  1494,  2360,  1191,  2019,  1655,
     122,   944,  1190,  2020,  1495,  1191, -1877,  3060,  1669,  2613,
    3496,  3497,  3498,  1188,  1189,  1190,  1649,  2614,  1191,  3821,
    1682,  1683,  1684,  1190,  4093,  1067,  1191,  1237,  1190,  1689,
    1845,  1191,  1651,  4269,  1190,  1188,  1189,  1191,  1126,   972,
    2078,  2090,  2279,  1976,  3399,  1864,  2261,   836,  1826,  1050,
    3528,  3529,  3530,  1190,  2961,  1858,  1191,  4134,  1190,  1011,
    3402,  1191,  2112,  2612,   123,  1022, -1039, -2572,   856,  1188,
    1189,  1190,  2095,   882,  1191,   867,  1042,  2096,  3895,  1558,
    1190,  2733,  3899,  1191,  1188,  1189,  3386,  3792,  1239,  3783,
    3007,  3945,  2905,  1192,  2618,  3072,  3525, -2572,   968,  2619,
    1185,  1385,  1187,  1192,  3702,  1390,  1395,  3894, -1560,  3146,
    1891,  3898,  4314,  2250,  3139,  1847,  1192,  3440,  1416,   124,
    3010,  3710, -1878,  4234,  3061,  1192, -2192,   575,  1230,   509,
    1232,  2843,   999,   509,   631,   641,  1190,   509,   641,  1191,
    4212,  1190,  2236,  1276,  1191,  1190,  4382,  -934,  1191,  1310,
    1944,  1188,  1189,  3564,  3565,  1957,  1231,  1168,  1013,   631,
    1235,  1188,  1189,  4262,  1246,  2650,  1192,  3576,  -582,   641,
     631,  3564,  3565,  -583,   631,  1188,  1189,  2789,  3440,  4590,
   -2501,  1481,  1723,  1724, -2050,  1188,  1189,  1190,  4210,  2155,
    1191,  1190,  2146,  4285,  1191,  3062,  3157, -1560,  4389,  1452,
    4391, -2502,  3848,  1188,  1189,  1190,  4279,  4461,  1191,   641,
    1188,  1189, -2501,   641,   641,  3574,  4202,  1051,  1192,  3923,
    2816,  1188,  1189,  2650,  1190,  3025,   641,  1191,  1190,  1978,
   -1878,  1191,  1192, -2502,  2024,  2156,  3072,  3199,  1556,  1192,
    1188,  1189,  1190,  2361,  1190,  1191,  1192,  1191,  4415,  2212,
    1192,  1190,  1188,  1189,  1191,  1723,  2176, -2688,  1192,  2904,
    3117,   593,  2215,  2216, -1850,  1318,  2232,  2233,   570,  2984,
     631,  1192,  3214,  2785,  2747,  2748,  1335,  3531, -2215,  1192,
    1341,  4081,  4082,  2555,  1192,  3403, -2338,  3095,  3096,   641,
    1192,  1490,  2182,  1920,  1658,  2227,  2884,  1659,  1188,  1189,
    3204,  2136,  2401,  2940,  2487,  2911,  3102,  3103,  1430,  1192,
    2939,  3247,  2488,  2284,  1192,  1188,  1189,  3692,  3406,  1188,
    1189,   631,  2416,  4066,  1823,  2137,  2551,  1192,  1269,  1031,
    3119,  3120,  2552,  3779,  3561,  4383,  1192,  1456,  2651,   860,
    3807,  1098,  2652,  3154,  3155,   648,  2834,  2837,  4345,  2430,
     685,  1329,  3766,  2154,  4421, -2050,  3255,  2616,  2698,  2360,
    1444,  3098,  1938,  1938,  2719,  1188,  1189,   960,  2434,  3457,
    3222,  3827,  3828,   631,  4221,  2866,  4367,  1595,  2541,  2617,
    1190,  1512,  1733,  1191,  2292,  1902,  3806,  4369,   619,  2455,
    3905, -2417,  1192,   136,  1377,  4203,  2651,  1192,  4370,  3060,
    2652,  1192,  1190,   631,   115,  1191,   955,  3005,  1419,  2162,
     686,  2662,  1126,  2271,  2163,  1170,  2613,   560,  2169,  1771,
    3826,  2875,  1998,  1457,  2614,  3699,  1126,  2362,  3831,  1419,
    2746,  4573,  1602,   569,  2838,  3856,  1190,  2486,  2984,  1191,
     631,  2269,  2803,  1192, -1878,  3011,  3269,  1192,  3012, -1850,
    3881,  1190,   519,  1999,  1191,  2432,  1903, -2192,  2000,  4181,
    2174,  1192,  1188,  1189,  2175,  2437,  2019,  1806,  2440,  2441,
    2117,  2020,  1238, -1878,  3424,  1558,   130,  1717,  2178,  1586,
    1192,  1188,  1189,  1593,  1192,  1557,  2339,   956,  2491,  3433,
     641,  3804,  3805,  -487,  1805,  2456,  2457,  2190,  1192,  3081,
    1192,  2198,  3081,  3081,   582,  1494,  2282,  1192,  1305,  1622,
    2751,  2752,  2468,   611,  1495,  2202,  2799,  2203,  1190,  3081,
     117,  1191,   604,  1856,  2205,  1994,  2820,   641,  1190,  2480,
    2481,  1191,  1775,  3830, -1520,  1716,  3550,   631,  3849,  3852,
    3854,  3855,  1190,  1453,  2302,  1191,  1685,   687,  1188,  1189,
    2090,  4660,  1190,   631,  2745,  1191,  1188,  1189,  2523,   605,
    1674,   620,   612,  2612,  2755,  1188,  1189,   131,   961, -2417,
    1190, -1520,   607,  1191,  1126,   641,  3270,  1190,  1188,  1189,
    1191,  2095,  1188,  1189,  2356,  2357,  2096, -1560,  1190,  4377,
    3780,  1191,  1188,  1189,  2618,  2969, -1878,  1188,  1189,  2619,
    2378,  2593,  2594,  2595,  2596,   571,  2361,  1190,  2526, -2215,
    1191,  1830,   622,  1833,  3136,   861,  4371, -2338,  3784,  1190,
    1188,  1189,  1191,  2148,  4182,   631,  1498,  4227, -2192,  3471,
    2011,   641,  2431,  1225,  1854,  3193,  1192,   613,  1513,  1032,
     631,   631,   944,  1777,  4194, -1560, -1878,  1188,  1189,  1306,
    4384,  3434,  1380,  2206,  1188,  1189,  4201,  1238,  1192,  3890,
    3700,  1188,  1189,  1994,  4228,  1190,  3713,  1904,  1191,  1878,
    3433,  1843,  1002,  3522,  1445,  2210,  3458,  1886,  1454,  1855,
    1887, -1560,  1190,   872,  1386,  1191,  1190,  3883,  1928,  1191,
     641,  4155,  1192,  1188,  1189,  1980,   625, -1560,  1188,  1189,
    1907,   911, -1560,  1188,  1189,  1896,  1767,  1192,  1455,  2228,
     509,   509,   509,   631,   631,   509,   631,  1558,  4226,  3276,
    3276,  1939,  1003,  3118, -1560,  3137,  2121,  1941,   509,  1239,
     641, -1560,  1190,   509,  1726,  1191,  3435,  1921,  1922,  1923,
    1188,  1189,  1926, -1560,  4385,  1188,  1189,  1341,  3662,  2122,
     670,  1929,  1105,   631, -1560,  1942,  2516,  3663,  4388, -1560,
    1946,  3684,  3685,  1188,  1189,  1188,  1189,  2671, -1560,  3285,
    2243,  3287,  1188,  1189,  1192,  4386,   834,  2037,  3298,   671,
   -2215,  2970,  3564,  3565,  1192,  1188,  1189,  3161, -2338,  3573,
    2362,  3100,  3311,  2672,  4372,  1238,   873,  3271,  1192,  3322,
    1602,  3101,  4183,   641,   865,  1838,  3919,  4442,  1192,  1041,
    1004,  3345,  3347,  3349,   641,  3428,  1158,  3350,  2976,  1924,
    1925,   631,  1927,  2859,  2042,   631,  1192,   944,   623,  1188,
    1189,  3260,  3434,  1192,  2891,  3695,  3696,  3743, -1560,   868,
    1994,  3891,  3742,  3112,  1192,  1106,  2673,  4150,  1190,  2674,
    3122,  1191,  1188,  1189, -2636,  4007,  3474,  2675,  2486,  1956,
    3476,  3123,   631,  1192, -1560,  4137,  3228,  1188,  1189,  4008,
    1512,  2011,  3284, -1560,   874,  1192,  2625,  1238,  1188,  1189,
    3723,  2570,   641,  1897,   509,   509,   594,  2119,   509,  4071,
    4156,  2149,   614,  1917,  2038,  1602,    43,  2626,  3314,  3315,
    1077,  3664,  2135, -1560,  1188,  1189,  1804,  1727,   258,  1159,
     260,  2115,  2116,  1990,  1239,  1190,   615,  3446,  1191,  4616,
    1768,  1192,  2012,  1190,  3153,  3053,  1191,  2039,  1678,  1188,
    1189,  2044,  1190,  1803,  2750,  1191,  3906,  2153,  1192,  1930,
    1188,  1189,  1192,  2244,  1769,  1190,  2571,  2469,  1191,  1190,
     616,  2892,  1191, -1520,  2164, -1560,  3436,  2908,  2165,  1190,
    1188,  1189,  1191,  2650,  1190,   944,  3210,  1191, -2636,  4422,
    2612,  4423,  1234,  1188,  1189,  1716,  1126,  2183,   654, -1560,
    1879, -1850,  2287,  1381,   528,  1188,  1189,  1190,  1192,  3478,
    1191,  4553,  4554,  4136,  4157,  2766,  3920,  2010,   869,  1188,
    1189,  2618,  3865,  2366,  2173, -1850,  2619,  1188,  1189,  2919,
    4565,   617,  2923,  2924,  1190,  2926,  2247,  1191,  2929,  2930,
    2083,  1190,  2933,  1703,  1191,  3865, -1560,  2942,  1190,  1005,
    4566,  1191,  2946,  2947,  2948,  2949,  2950,  3351,  2253,  2789,
    2954,  3437,  2956,  2572,  2685,  2254,  4229,   944,  2965,  2966,
    2967,  2968,  1239,  3438,  2972,  4009,  2974,  1994,  3138,  2692,
    1190,  3379,  4268,  1191,  1582,  1190,  4191,  3439,  1191,    55,
    1190,  1305,  1991,  1191,  1188,  1189,  4192,  3276,   917,  3814,
    2277,  1994,  2247,  1205,  2400,  2676,   641, -1560,  3492,  2650,
     641,  1033,  1082,  2707,  1006,  1584,  1007,  1188,  1189, -1560,
    4485,   631,  4176,  4177,  1192,  3921,  1276,  1190,  1880,  3320,
    1191,  1276,  1190,  1770,  1578,  1191,  2920, -1560,  1716, -1560,
    2186,  2275,  1188,  1189,   641,   632,  3016,  1513,  2573,  2276,
    1190,   635,  1190,  1191,  1239,  1191,  2651,  3436,  3960,  1190,
    1188,  1189,  1191,   631, -1560, -1560,  4486,   631, -1560, -1560,
   -1560,   910,  1190,  1188,  1189,  1191,   637,  2939,  1188,  1189,
    1558,  1162,  2761,  2012,   641,   641,   631,  -221,  1417,  2986,
    1034,  1192,  1535,  1536, -2636,  3866,  3882,  1994,  1126,  1192,
     641,  2259,  1367,  1055,  1063,  2898,  2898,  2187,  1192,  1238,
     847,  2366,   641,  2152,  1225,  2191,  1190,   669,  4055,  1191,
    2367,  1192,  1188,  1189,  2196,  1192,  1188,  1189, -1560,   911,
    2992,  1322,  1306,  1238,  1323,  1192,  2987,  2197,  1911,  1190,
    1192,  2201,  1191,   832,  2429,  2993,  1507,  1508,  3005,   917,
     900,  2204,  2677,  2255,  1190,  2908,  2207,  1191,   649,  1188,
    1189,  1977, -1560,  1192, -1560,  1190,  2667,  2001,  1191,  2330,
    1188,  1189,  1560,  1318,  1163,  4148,  4149,  2177,  3541,  1369,
   -1560,   631,  2651,   650,  3703, -1560,  2652,  1576,   885,  3922,
    1192,  1190,  1335,  1739,  1191,  3955,  4487,  1192,   848, -1560,
    2366,  1208,  1972,  3250,  1192,  3923,  2219, -1560, -2636,  3251,
    2275,  4193,  2011,  2238, -1560,  3981,  1190,  4366,  3241,  1191,
    3069,  2721,  2678,  2084,  2606,  1205, -1560,  1190,  2622,  1238,
    1191,  4143,  4144,  3431,  4146,  4147,  1192, -1560,   117,  1551,
    1552,  1192, -1560,  1419,  2368,  2369,  1192,  1190,  4129,  1419,
    1191, -1560,  3088,   658,  1188,  1189,  2679,  3448,  3449,   661,
    1190,   513,  3094,  1191,   514,  2753,  1385,  3569,  2574,   849,
    2355,  1385,  1190,  2936,  2177,  1191,  2002,   657,  3509,   944,
    3463,  3729,  3662,  1192,  2370,  1324,  1190,  2439,  1192,  1191,
      13,  3663,  1561,  2820,  1190,   663,  1562,  1191,  2085,  3097,
    3924,  3582,  1716,   944,  3104,  3252,  1192,  1563,  1192,  3586,
    2170,  1225,  2026,  3588,  2047,  1192,   886,  4432,  2271,  3982,
    4436, -1560,  3108,  3510,  3109,  2179,  1225,  2425,  1192,   716,
     589,  3110,   641,  2368,  2369,   678,   641,   589,  2623,  2048,
    4417,   509,  4053,  4419,  3111,  4420, -1850, -1560,   631,   631,
     631,  2646,  2180,  1672,  2649,  2384, -1560,  2384,  2842,  3983,
    2842,  1190,   680,  2083,  1191,  1805,  1239,  2743,  2628,  2256,
    3297,   527,  1192,  3213,   641,  1036,  1037,  2027,   665,   641,
     683,  1740,  3701,  3306,  1190,  2257, -1560,  1191,  3113,  1205,
    1239,   519,   887,  2459,   721,  1192,   528,  2765,    25,   944,
    4478,  4478,  2466,  2467,   684,  2028,  1138,   885,   823,  1190,
    1192,  3116,  1191,  2471,  2472,  2473,  2474,   828,  2476,  2477,
    4598,  1192,  1994,  1208,  2192,  1225,  3121,  1190,  1157,   839,
    1191,  3822,   842,  1417,  3823,  3664,   853,  3124, -1560,  1564,
    1190,  1171,  1172,  1191, -1850,  1190,  1518,  1192,  1191,  2003,
    3206,  2193,  1225,   857,  2642,  2643,  2644,  2086,  2004,  4130,
    4131,  4542, -1560,  3126,   859,  2005,  2097,  2565,  2011,  4244,
    2565,  2565,  1192,  2565,  2029,   641,  2565,  2565,  2565,  2565,
    2565,  2565,  2565,  1192,  4132,  2565,  1239,  2565,  3128,  1190,
     877,   733,  1191,  1190,  2938,   879,  1191,  1585,   869,  3130,
    2762,  3915,   982,  1192,  2012,   641,   985,  4053,  4053, -1560,
     631,  1217,  1218,  1219,  1220,  2011,  1192,   917,   900,  3131,
    1994,  2083,   992,  2340,  2771,  2098,  1190,  4245,  1192,  1191,
    2777,  2777,  3132,  2777,  3648,   886,  3440,  1190,  1938,  1565,
    1191,  3517,  1192,  3997,  3468,  2194,  1225, -1770,   845,  2083,
    1192,  2199,  1225,   983,  1238,  3152,  3815,  3637,  3469,  2030,
    1001,  3941,  2797,  2006,   976,   977,  3470,   978,  2083,   979,
   -1560,  1013,  2400,  1385,  2478,  2479,   750,  1210,  1211,  2735,
    1225, -1560, -1560,   631,  3296,  1023,  3998,  1208,  2341,  1043,
    1812,  1044,  3210, -1770,  2821,  1050,  1048,  1741,  2824,  2130,
   -1560,  1716, -1560,  2777,  2777,  2777,  3053,  2026,   631,  3999,
    3321,   887,    37,  1742,  3114,  1225,  2342,  1192,  2847,  2340,
    2849,  1190,  2608,  2303,  1191,   115,  2304, -1560, -1560,  2305,
   -1850, -1560, -1560,  3718,  3180,  3181,  2776,  2776,  1079,  2776,
    1192,    43,   911,  3892,  3216,  3217,  2084,  4000,  2099, -1850,
    4215,  4219,  1238,  1080,  1939,  1939,  3722,  1405,  1081,  3320,
    4053,  4053,  3220,  3221,  -675,  1192,  2007,  1225,  1716,  2608,
    -675,  4360,  2027,  1813,  3382,  3383,  2908,  1083,  1994,  1814,
     641,   641,  1084,  1192,  2341,  2343,  3482,  1225,  2340,  2807,
    2909,  1085,   888,   889,   890,   891,  1192,   892,   893,  3728,
    2028,  1192,  2026,  1088,  1013,  3344,  1994,  3512,  3513,  2776,
    2776,  2776,  3730,   894,  2832,  3949,  1406,  3731,  1089,  3720,
     258,  2085,   260,   972,   944,  1994,  3564,  3565,  1815,  1213,
    1214,  1215,  1216,  1217,  1218,  1219,  1220, -1770,  2100,  4601,
    4602,  1210,  1211,  1816,  1090,  1192,  1091,  1407,  1092,  1192,
    1093,  2101,  1094,  2341,  1095,  3786,  3787,  3653,  3654,  2971,
    2012,  3732,  1096,  1051,    52,  3733,  1099,  2027,  2011,  2029,
    2344,  1558,  4053,  2985,  1100,  3832,  2102,  2103,  4243,  2031,
    1102,  2893,  1192, -1770,  3002,  1981,  1103,  4053,  4215,  2661,
    3969,  1104,  4219,  1192,  -675,  2028,   779,  2908,  3957,  1982,
     521,  4053,  3071, -2688,  2084,  1107,  2846,  2012,   519,  4094,
    1238,  1239,  3706,  3715,    55,  3916,  3917,   519,  3767,  1229,
    3833,  2083,   944,  1108,  3834,  4073,  1228,  3835,  1109,  4076,
    4077,   544,  2084,  3724,  1225,  2047,  1311,  3969,  1238,  3741,
    1225,  1110,  4318,  1111,  2482,  1112,  1205,  4215,  4219,   520,
    2893,  2084,  1205,  1113,  2030,   631,  2985,  1238,  2247,  1114,
    2048,  1233,  1716,  3532,  2029,  1251,  2894,  4237,  4238,  4239,
    4240,  2494,  2495,  4053,  1115,  3836,  3055,  1192,  3751,  3752,
    2086,  3869,  2479,   631,  1116,  4053,  4053,  3884,  3885,  1117,
     545,  2494,  2495,  1213,  1214,  1215,  1216,  1217,  1218,  1219,
    1220,   910, -1850,  1120,  -814,  -814,  2497,  2085,  1121,  1239,
    3456,   888,   889,  1127,   891,  2936,  -814,   893,  3888,  3885,
    1128,   546,  2608,  2500,  -814,  -814,  2497,  3889,  3885,  4142,
    3513,  2501,   894,  4145,  3885,  2894,  -814,  1129,   521,  4153,
    4154,  1130,  2597,  2500,  4053,  1313,  2104,  4246,  4247,  2030,
    3669,  2501,  4342,  4343,  4053,   547,  2047,  2503,  1131,  1431,
    1981,  3034,  3483,  1408,  4270,  3885,  1132,  1983,  4271,  3885,
    1133,  1491,  1134,  -880,  1982,  2504,  1135,  2503,  1994,  1136,
     944,  2048,  4273,  3885,  1606,  1607,  1608,  1139,  1432,  3066,
    2345,  1491,  4274,  3885,  1276,  2504,  1619,  1140,   641,  2910,
    4053,  1141,  4053,   548,  2509,  3006,  1142,  -849,   944,  1143,
     631,   631,  4053,  4280,  4281,  -675,  4101,  4282,  4281,  4661,
    1144,   522,  4341,  3221,  2509,  4440,  4441,   944,  1675,  2797,
     641,  1679,  2799,  1409,  1717,  1145,  4053,  1146,  4053,  1433,
    4053,  4455,  3513,  1434,  1208,  1984,  1147,  4053,  1148,  1126,
    1208,   641,  1314,  1699,  1700,  4483,  3221,  1704,  2765,  1149,
    2012,  1330,  4053,  4484,  3221,  1150,  2086,  1239,  3240,  1151,
    1036,  1037,  1342,  1985,  2031,  1718,  1719,  1152,  2513,  4053,
    4053,  4494,  4495,   825,   826,  2514,  2895,   829,  1153,   831,
    1154,  3711,   833,  4416,   835,  1239,  4053,  4053,  2513,  1706,
    1707,  4053,  2515,  1410,  2084,  2514,  4595,  3381,  4650,  4651,
    1238,   525,  1036,  1037,  1239,  2631,  1341,  3192,  3837,  2779,
    2937,  2780,  2515,  4102,  4103,  3838,  3535,  3536,  4104,  4105,
    1155,  1411,   -64,  2985,  1156,  1986,  2938,   549,  2985,  1344,
    1205,  3268,  1983,  3280,  3281,  2985,  3274,  3017,  3056,  2985,
    1160,  3292,  1161,  3283,  1164,  2895,  4358,  4359,  1165,  3293,
    1169,  2517,  3839,  2985,  2985,  1173,   641,  3292,  1174,  2031,
    1175,  1412,  3313,  3749,  3750,  2985,  1176,  1717,  1195,  1196,
    2518,  2517,  1177,  3317,  3929,  3930,   631,  1178,  3325,  1227,
    1364,  2828,  2829,  2830,  3328,  3329,  1435,  3292,  1210,  1211,
    2518,  1204,  -675,  1367,  2985,  3357,  1370,   550,  1375,  1560,
    1376,   551,  1396,  1400,  1404,   509,  1417,  1197,  1253,  3376,
    1984,  3292,  1188,  1189,  1716,   523,  1426,  1427,  1198,   524,
    1428,  1987,  1443,  1446,  1450,  1451,  3840,  2522,  1459,  3385,
    1462,  1467,  3372,  1463,  2200,  2524,  1466,  1469,  1985,   525,
    1474,  1479,  3396,  1491,  4162,  1497,  3239,  2522,  1499,   631,
    4162,  1501,  1504,  1505,  -675,  2524,  1509,  1510,  1199,  1511,
    -675,  1516,  1436,  1517,  3410,   552,  2908,  1520,  1521,  1200,
     944,   553,  1522,  1569,  4141,  3057,  3841,  1570,  3253,  3254,
    2909,  3256,  3327,   526,  1571,  -588,  1577,  1575,  1578,   527,
    1596,  1598,  1223,   694,  3058,   554,  1201,  1602,  1609,  1621,
    1986,  1205,  1625,  1661,  3935,  3059,  1671,  2530,  1254,  1672,
    1673,  1697,  1632,  1633,  1634,  1635,  1636,  4308,  1714,  1561,
     555,  1725,  1734,  1562,  1750,  1781,  1756,  2530,  1208,  1437,
     528,  3294,  3295,  1255,  1563,   556,  1776,  1256,   529,   528,
    1558,  3540,  1215,  1216,  1217,  1218,  1219,  1220,  1215,  1216,
    1217,  1218,  1219,  1220,  1784,  3398,  1779,  1239,  3324,  1782,
    1786,  1202,  1789,  3481,  1250,  2531,  2532,  2533,  1790,  1791,
    1792,  2847,  2534,  3963,  1793,  1257,  1794,  1795,  1796,  1807,
     716,  1808,  1809,  1811,  -675,  2531,  2532,  2533,  2535,  3060,
     521,  2536,  2534,  1258,  1817,  2771,  1987,  1819,  1310,   641,
     641,   641,  1385,  1205,  1820,  1206,  1828,  1369,  2535,  1829,
    1836,  2536,  2797,  1840,  3946,  1637,  1638,  1639,  1640,  1369,
    1852,  1860,  3388,  1861,  2026,  2047,  1867,  3346,  1862,  1207,
    1870,  2821,  3524,  1873,  2538,  3526,  1874,  1888,   720,   641,
     641,   641,  1535,  1536,  1438,   721,  1876,  1877,  1882,   641,
    2048,  1912,  1277,  1278,  2538,  2762,  1259,  1915,  1919,  1948,
    1949,  1950,   911,   911,  1951,  1962,  1564,  2026,  1953,  1965,
    3348,  1979,  1205,   726,  1970,  2025,  2034,  2051,  2053,  2052,
    2026,  2054,  1210,  1211,  2055,  1439,  2077,  2985,  2056,  2027,
    2632,  2985,  2985,  4492,  2138,  2079,  2057,  3292,  2058,  1208,
    2059,  2060,  1716,  2061,  2062,   694,  3061,  3105,  2063,  2064,
     641,  2065,  3045,  2985,  3292,  2066,  2067,  2028,  1205,  2068,
    4499,  2069,  1036,  1037,  1641,  2070,  1642,  1643,  1644,  4465,
    2071,  3292,  2027,  2072,  2073,  2074,  1645,  1279,  4390,  3292,
    2075,  2076,   733,  3292,  2108,  2027,  4250,  1385,  2109,  4253,
    4254,  4255,  4256,  2124,  3988,  3989,  2125,  2126,  2114,  2846,
    2028,  2127,  2139,  4128,  2133,  2184,  1565,  3992,  2141,  2188,
    1280,  2142,  3591,  2028,  3995,   631,  2143,  3062,  1716,  1190,
    3647,  2158,  1191,  2159,  1281,  3963,  2029,  2160,  1260,  1551,
    1552,  2168,   716,  2161,  2213,  3002,  2166,  1261,  1209,  4018,
    2167,  1208,  4020,  2171,  4492,  -675,  2177,  1282,   744,  2181,
    1283,  2185,  2189,  1716,  1262,  2985,  2195,  1646,  2208,  2209,
    2214,  3683,  3683,  3683,  1284,  2229,   749,   750,  2217,  2029,
    4499,  4328,  1263,  2218,  1213,  1214,  1215,  1216,  1217,  1218,
    1219,  1220,  2029,  3772,  2248,  2230,  1285,  2231,  2252, -1262,
     720,  2258,  1220,  1210,  1211,   641,  4559,   721,  4561,  3546,
    2268,  2442,  2443,  2444,  4188, -1386,  1212,  2288,  1105,  1158,
    1208,  2030,  1286,  2299,  1647,  1648,  1264,  1162,  1287,  4356,
    4357,  3592,  2300,  2322,  2324,   726,  2331,  2338,  4365,  1253,
    3056,  2352,  4583,  2349,  2377,  2359,  2374,  4645,  2396,  3575,
    2404,   525,  4505,  4506,  2402,  4508,  1716,  1265,  3580,  2407,
    2408,  2409,  4654,  2403,  2030,  2426,  1208,  4645,  2428,  1288,
    2410,  1716,  4654,  2411,  3165,  3759,  1716,  2030,  2433,  2451,
    1717,  1716,  2447,  2452,  3166,  4617,  4618,  2454,  2458,  2460,
    2461,   641,  2462,  2463,   821,  3167,  4323,  2464,  2465,  2489,
    4128,   641,  2556,  4321,   733,  1210,  1211,  2560,  3168,  3169,
    3170,  2600,  2603,  2562,  4550,  2607,  4551,  4552,  2629,  2647,
    2665,  2985,  2661,   821,  2670,  3171,  3650,  2687,  2688,  2686,
    2774,  2276,  2699,  2700,  2985,  2712,  3292,  2759,  2734,  1254,
    2741,  2749,  -675,  2758,  1346,  2769,  2770,  1717,   119,  3674,
    2790,  3292,  2787,   631,  1347,  1213,  1214,  1215,  1216,  1217,
    1218,  1219,  1220,  4539,  1255,  1348,  2793,  1385,  1256,   771,
     744,  1649,  2792,  3964,  1210,  1211,  3965,  3057,  1349,  1350,
    1351,  2800,  2804,  2801,   748,  1192,  1650,  1651,   749,   750,
    1847,  2806,   777,  2805,  2811,  1352,  3058,   779,  2825,  2826,
     780,  4629,  2827,  4613,  2386,  1289,  1257,  3059,  1896,  1290,
    2851,  1897,  2852,  2862,  2872,  2876,  2877,  2879,  3864,   588,
    1210,  1211,  2880,  2882,  1258,  2885,  2889,  1291,  2890,  3540,
    2922,  2878,  2908,  2907,  2927,  1292,  3396,  2928,  2932,  2931,
    2943,  2031,  2934,  1293,   821,  2941,  2952,  2945,  2935,   821,
    1939,  2953,  2957,  2958,  2944,  3966,  3967,  1213,  1214,  1215,
    1216,  1217,  1218,  1219,  1220,  2963,  3020,  2964,  2973,  2991,
    2311,  1294,  3014,  3019,  2995,   641,  3015,  2997,  4118,  3021,
    2523,   821,  3022,  3050,  2031,  1295,  1296,  1259,  3065,  2400,
    2134,  3060,  3072,  3076,  3078,  2312,  3083,  2031,   821,  3775,
    3086,  3087,  3056,  3085,  3143,  3149,  3183,  3185,  3089,  2313,
    3144,  3133,  4119,  3090,  3147,  3330,  3151,  4079,  3156,  3331,
    2314,  3332,  3184,  3186,  4401,  4657,  1213,  1214,  1215,  1216,
    1217,  1218,  1219,  1220,  3159,  3187,  1297,   641,  3188,  4401,
    3946,  1717,   821,   821,   821,   821,  3194,  3172,  3198,  3683,
    1322,  3201,  3223,  4411,  3237,   821,  3225,  3226,   631, -1850,
    3212,  3227,  3197,  3238,  3333,  3173,  3978,  3973,  3215,  3242,
    2315,  2316,  1298,  1214,  1215,  1216,  1217,  1218,  1219,  1220,
    3218,   771,  3246,  3243,  3257,  3964,  3258,  3334,  3965,  3299,
    4321,  3301,  3367,  3370,  1299,  3366,  1300,   641,  2317,  3373,
    3374,  3378,  1385,  3380,   777,  3381,  3384,  3391,  3061,   779,
    3392,  3397,   780,  3870,  2366,  3400,  3419,  1353,  3401,  1260,
    3407,  3408,  3417,  3409,  4021,  3335,  1972,  3418,  1261,  3447,
    3445,  3451,  3452,  4120,  3459,  1354,  3460,  4063,   631,  3057,
    3472,  2235,  3138,  3490,  3494,  1262,  3505,  3508,  3514,  3683,
    3516,  3527,  3533,  3542,  3547,  3548,  3551,  3557,  3058,  3556,
    3558,  3579,  3589,  1263,  3971,  3572,  2318,  3966,  3967,  3059,
    3583,  3590,  2554,  3649,  4128,  3651,  3657,  2568,  2569,  3062,
    2576,  3174,  3661,  2579,  2580,  2581,  2582,  2583,  2584,  2585,
    3679,  3670,  2588,  3672,  2590,  3671,  4401,  3175,   631,  3686,
    3698,  4115,  3675,  3676,  3693,  3697,  4530,  1264,  3704,  3705,
     641,  3708,  3706,  3707,  4626,  3712,  4121,  2494,  2495,  3714,
    3716,  2319,  3683,  3683,  3725,  3683,  3683,  3726,  3950,  3717,
    3721,  3727,  3735,  2516,  3736,  4122,  2491,  3744,  1265,  3746,
    3745,  3754,  4626,  3755,  4064,  3241,  3768,  3769,  3764,  3774,
    -814,  -814,  2497,  3060,  3752,  3773,  4659,   513,  3776,  3176,
     514,  4123,  -814,  3777,  4569,  3785,  3788,  1355,  3789,  2500,
    3794,  3802,  3809,  3857,   821,  3860,  3177,  2501,  3871,  4083,
    3872,  3887,  3896,  3897,  3851,  3908,  3913,  4001,  3912,  4171,
    4401,  3914,  4401,  3918,  4178,  3927,  3932,  3934,  3937,  4593,
    3938,  3958,  3959,  2503,  4109,  3961,  3962,  3979,  3848,  3976,
    3987,  3991,  3993,  4005,  4401,  4006,  4011,  1491,  4019,  4012,
    4022,  2504,  4058,  4013,  4091,  4067,  4075, -1472,  4087,  1356,
     821,   821,  4092, -1477,  4095,  4096,  4097,  4098,  4108,   821,
     821,   821,   821,   821,   821,   821,  1357,  4111,  4401,  4401,
    2509,  2824,  4139,  4635,   821,   821,  4152,   821,   821,  4158,
     748,  4165,   821,   821,  3715,  4167,   821,   821,   821,   821,
    3061,   821,   821,  4185,  -361,  3336,  4187,  4197,  4236,   821,
     821,  4190,   821,   821,   821,   821,   821,  4223,  4200,  4211,
     821,   821,   821,   821,   821,   821,   821,   821,   821,   821,
     821,  4225,   821,  1717,  4249,   821,   821,  4251,  4252,  4265,
     821,  4260,  4361,  4257,   821,   821,   821,  4263,  4277,  4285,
    4276,  1360,  1278,  4288,  2513,  -379,  4313,   821,   821,   821,
    4315,  2514,  4316,  4317,  4331,  4338,   821,   944,  4289,  4340,
    1278,  3062,  4348,   821,   821,   821,  4346,   821,  2515,  4351,
    4362,  4368,  4375,  4124,   821,   821,   821,  3361,   821,   821,
     821,   821,   821,  4397,   821,   821,   821,   821,   821,   821,
     821,   821,  4398,  2494,  2495,   821,   821,  4408,  4409,  4410,
    4402,  4413,  4424,  4427,  4430,  4445,  4446,  4447,  4448,  4456,
    4459,  4460,  4461,  4466,  4468,  4470,  4471,  4474,  4480,  4503,
   -2399,  4504,  4507,  4509,  4510,  4513,  1279,  2517,  2497,  4521,
    4512,  4115,  3337,  3338,  3339,  3340,  3341,  3342,   852,  4518,
     641,  2765,  4523,  4534,  1279,  2500,  2518,  4531,  4532,  4535,
    4536,  4537,  4547,  2501,  4538,  4540,  4543,  4556,  4557,  1280,
    4558,  4562,  4563,  4574,  4577,  4567,  4579,  4582,  4580,  4588,
    4586,  4591,  4592,  1281,  4594,  4596,  4600,  1280,  4604,  2503,
    4605,  4607,  4614,  4630,  4631,  4636,  4646,  4656,  2767,  4180,
    3659,  1281,  2592,  1491,  2605,  3660,  1282,  2504,  3875,  1283,
    2901,  4198,  1060,  2522,  4481,  1503,  4324,  4482,  3873,  3877,
    4648,  2524,  4062,  1284,  1282,  4501,  4609,  1283,   601,   954,
    2375,  2295,  2824,  3179,  2824,  4033,  2509,  4034,  4036,  4037,
    4039,  1284,  4040,  4041,  4042,  1285,  4043,  4619,  4044,  4515,
    4395,  4516,  4047,  4048,   821,  4479,  4049,  2023,  4407,   641,
     631,  4406,  3013,  1285,  2539,   821,  1573,  4070,  2977,  3585,
    3200,  1286,  3757,  3507,  1086,  4350,  3205,  1287,  1850,  4110,
    4429,  3760,  4576,   821,  4327,  4502,  4259,  2082,  4545,  1286,
     679,  3677,  2975,  2530,  3389,  1287,  3678,  1632,  1633,  1634,
    1635,  1636,  3356,  3790,  2982,  3816,  1119,  3817,  3858,  3363,
    2513,  4160,  3972,  4010,  4428,  3475,  3996,  2514,  1288,  2887,
    3477,  1717,  3135,  1137,  3473,   682,  4378,   681,   540,   541,
    3566,  4380,  4355,   641,  2515,  4330,  1288,  4381,  4335,  4333,
    4074,  2979,  2123,  2641,  4163,  3355,  1966,   965,  1964,  3975,
    2808,  2531,  2532,  2533,  3791,  2358,  2043,  3191,  2534,  2080,
    2788,  4520,  3504,  2831,  2740,  1374,  4443,   981,  4528,  2383,
    1182,  3484,  3158,  2684,  2535,  3427,  3893,  2536,  1670,  2739,
    4426,  4344,  3658,  4570,  1620,  2756,  4571,  3797,  1973,  3948,
    4599,  2840,  1778,  2517,  3300,  2645,  1483,  1717,  1484,  1865,
    1637,  1638,  1639,  1640,  3190,  3753,  3762,  2814,  4546,  3520,
    1485,  3519,  2518,  4572,  4267,  4261,  1486,  2132,  1078,  2435,
    2538,  2436,  1932,   950,  2289,  3801,  3506,  1872,  4649,  4575,
    3002,  3002,  1717,  4597,  4511,  1954,  4655,  4449,  4437,  4438,
    4658,  3523,  4004,  1885,  2860,   913,   914,  2414,  2857,  3544,
    2251,  2858,  4584,  3545,  1289,  2850,  2336,  4589,  1361,  2381,
    1875,  2310,  4235,  2113,  1363,  3491,  4241,   883,   673,  2522,
     674,  1366,  1289,  4189,  3868,     0,  1291,  2524,  1064,  1065,
    1066,     0,     0,     0,  1292,     0,     0,     0,     0,     0,
     821,     0,  1293,     0,  1291,     0,  1529,     0,     0,     0,
    4627,     0,  1292,     0,     0,     0,     0,     0,     0,  1641,
    1293,  1642,  1643,  1644,     0,     0,     0,     0,     0,     0,
    1294,  1645,     0,     0,     0,  1717,     0,     0,  4627,     0,
       0,     0,     0,     0,  1295,  1296,   641,     0,  1294,     0,
    1717,     0,     0,     0,     0,  1717,     0,     0,     0,  2530,
    1717,     0,  1295,  1296,     0,     0,     0,  1530,  1531,  1532,
    1533,  1534,  1535,  1536,  1537,  1538,  1539,     0,  1540,  1541,
    1542,  1543,  1544,  1545,  1546,  1547,  1548,     0,  1549,  1550,
       0,     0,     0,     0,     0,  1297,     0,     0,     0,     0,
     821,   821,   821,     0,     0,     0,     0,     0,     0,  1528,
       0,     0,  1646,  1297,     0,   821,     0,  2531,  2532,  2533,
       0,     0,     0,     0,  2534,     0,     0,     0,     0,     0,
       0,  1298,     0,     0,     0,     0,     0,     0,     0,     0,
    2535,   821,     0,  2536,     0,     0,     0,   821,     0,  1298,
     821,     0,   821,  1299,     0,  1300,     0,     0,   821,     0,
     821,   821,     0,     0,     0,  1600,  1601,     0,     0,  1647,
    1648,  1299,     0,  1300,  1611,  1612,     0,     0,  1615,  1616,
    1617,     0,     0,     0,     0,     0,  2538,     0,     0,  1626,
    1627,     0,  1628,  1629,     0,     0,     0,  1654,     0,     0,
       0,  1663,  1664,  1665,  1666,     0,  1668,     0,     0,     0,
       0,     0,     0,     0,  1676,  1677,     0,  1680,  1681,  1551,
    1552,     0,     0,     0,     0,  1686,  1687,  1688,     0,     0,
    1691,  1692,  1693,  1694,  1695,  1696,     0,  1698,     0,     0,
    1701,  1702,     0,     0,     0,  1705,     0,     0,   821,  1708,
    1712,  1713,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1720,  1721,  1722,     0,     0,     0,     0,     0,
       0,  1730,     0,     0,     0,     0,     0,     0,  1735,  1736,
    1737,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,     0,     0,
       0,     0,     0,     0,     0,   821,     0,     0,     0,     0,
       0,  1773,     0,     0,     0,     0,  1649,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1650,  1651,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2490,     0,     0,     0,     0,  2491,     0,  2492,
       0,  2493,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2494,  2495,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2496,     0,     0,     0,  2497,  2498,     0,     0,
       0,     0,     0,     0,  2499,     0,     0,     0,     0,     0,
       0,     0,     0,  2500,     0,     0,     0,     0,     0,     0,
       0,  2501,     0,   821,     0,     0,     0,     0,     0,     0,
    2502,     0,     0,     0,     0,     0,     0,     0,     0,  1884,
       0,     0,     0,     0,     0,     0,     0,  2503,     0,     0,
    1890,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1491,     0,     0,     0,  2504,     0,     0,  1918,     0,
       0,     0,     0,  2505,  2506,     0,     0,     0,     0,     0,
    2507,     0,     0,     0,     0,     0,     0,     0,  2508,     0,
       0,     0,  -964,     0,  2509,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2510,     0,   821,     0,     0,
       0,   821,     0,     0,     0,     0,   821,   821,     0,     0,
       0,     0,     0,     0,     0,   821,  2511,     0,   821,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   821,
     821,     0,   821,   821,     0,   821,   821,   821,   821,   821,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
       0,   821,     0,     0,     0,  2512,     0,     0,  2513,   821,
       0,   821,     0,   821,   821,  2514,   821,   821,     0,     0,
       0,   821,   821,   821,     0,     0,     0,   821,   821,   821,
       0,   821,  2515,   821,     0,   821,     0,   821,     0,   821,
       0,     0,     0,     0,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2516,     0,     0,     0,     0,
       0,     0,     0,   821,     0,     0,     0,     0,     0,     0,
     821,     0,     0,   821,     0,     0,     0,     0,     0,   821,
       0,     0,   821,     0,     0,     0,   821,     0,     0,     0,
       0,  2517,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2518,     0,     0,     0,  2519,  2144,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     821,     0,     0,     0,     0,  2520,     0,     0,     0,     0,
    2521,     0,     0,     0,  3353,     0,     0,  2522,     0,  2491,
       0,  2492,  2523,     0,     0,  2524,     0,     0,     0,     0,
       0,     0,     0,  2494,  2495,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2525,     0,
       0,     0,     0,     0,  2496,  2221,  2223,  2225,  2497,     0,
       0,     0,  2526,  2527,  2528,  2529,     0,   821,     0,     0,
       0,   821,     0,     0,     0,  2500,     0,     0,     0,     0,
       0,     0,     0,  2501,     0,     0,     0,  2530,     0,     0,
       0,     0,  2502,     0,     0,     0,  2260,     0,     0,     0,
       0,     0,     0,     0,     0,  2265,     0,  2266,     0,  2503,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2899,
       0,     0,     0,  1491,     0,     0,     0,  2504,     0,     0,
       0,  2899,  2899,     0,     0,  2505,     0,     0,     0,     0,
       0,     0,  3354,     0,     0,  2531,  2532,  2533,     0,     0,
    2508,     0,  2534,     0,     0,     0,  2509,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2535,     0,
       0,  2536,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2511,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2537,     0,  2354,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2538,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2513,     0,     0,     0,     0,     0,     0,  2514,     0,     0,
       0,     0,     0,     0,     0,     0,  2899,  2899,     0,     0,
       0,     0,  2413,     0,  2515,     0,     0,     0,     0,     0,
    2423,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -964,  2516,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2517,   821,     0,     0,     0,   821,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2518,     0,     0,     0,  2519,     0,   821,   821,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   821,
       0,     0,     0,     0,     0,     0,     0,     0,   821,     0,
     821,     0,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2521,     0,     0,     0,     0,     0,     0,  2522,
       0,     0,     0,     0,     0,     0,     0,  2524,  2561,   821,
       0,     0,     0,     0,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   821,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2527,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     2,     0,     0,     0,     0,     0,     0,     0,  2530,
       0,     0,     0,     0,     0,     0,     3,     0,     0,     0,
       4,     0,  2664,     0,     0,     0,  2666,     0,     0,     0,
       0,  2668,  2669,     0,     5,     6,     0,     0,     0,     0,
    2682,     0,     7,     0,     0,     0,     8,     9,     0,     0,
     821,     0,     0,     0,  2689,  2690,     0,  2691,     0,     0,
    2693,  2694,  2695,  2696,  2697,    10,     0,  2531,  2532,  2533,
       0,     0,     0,     0,  2534,     0,  2701,   821,     0,     0,
       0,     0,     0,    11,  2702,     0,  2703,     0,  2704,  2705,
    2535,  2706,     0,  2536,     0,     0,  2709,  2710,  2711,     0,
       0,     0,  2713,  2714,  2715,     0,  2716,    12,  2718,     0,
    2720,     0,  2722,     0,  2723,     0,    13,    14,    15,  2724,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
      17,     0,     0,     0,     0,     0,  2538,     0,  2744,     0,
       0,     0,    18,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2754,     0,    19,  2757,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    20,     0,     0,     0,   821,
     821,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      21,     0,    22,     0,     0,     0,     0,    23,     0,     0,
      24,     0,     0,     0,     0,     0,     0,  2899,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,     0,    26,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,   821,     0,     0,    29,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   821,     0,     0,
       0,   821,   821,     0,   821,     0,     0,     1,     0,     2,
       0,     0,  2423,   821,     0,     0,     0,     0,   821,     0,
       0,   821,     0,   821,   821,     0,     0,     0,     4,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     5,     6,     0,     0,     0,     0,     0,     0,
       7,     0,     0,     0,     8,     9,   821,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    10,     0,    30,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   821,
       0,    11,    31,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
       0,     0,   821,     0,     0,    12,    33,     0,     0,     0,
       0,     0,     0,     0,    13,    14,    15,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    16,    17,     0,
      34,     0,     0,    35,     0,    36,     0,     0,    37,     0,
       0,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,    41,    19,     0,     0,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,    43,     0,     0,
       0,     0,     0,    20,     0,     0,    44,     0,     0,     0,
       0,    45,     0,    46,     0,     0,     0,     0,    21,     0,
      22,     0,     0,     0,     0,    23,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    47,     0,     0,     0,     0,     0,
       0,    48,    25,     0,    26,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,  3068,
       0,     0,     0,  3070,     0,     0,     0,     0,     0,    28,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
       0,    49,     0,  3092,  3093,     0,     0,     0,     0,     0,
       0,     0,     0,    50,     0,     0,     0,    51,     0,     0,
      52,     0,     0,     0,  3115,    53,     0,     0,     0,     0,
       0,     0,     0,  3125,     0,  3127,     0,  3129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      55,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    30,     0,     0,     0,     0,  3189,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   860,   916,    32,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,   821,     0,
       0,     0,     0,     0,     0,     0,   917,   900,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,   918,
       0,    35,     0,    36,     0,     0,    37,     0,     0,    38,
      39,     0,   821,     0,     0,  2423,     0,   821,     0,    40,
       0,    41,     0,   919,     0,   920,     0,     0,     0,    42,
       0,     0,     0,     0,     0,    43,     0,   921,     0,     0,
       0,     0,  3262,     0,    44,     0,     0,  3593,  3594,    45,
       0,    46,     0,  3595,     0,  3596,     0,  3597,  3598,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3599,     0,     0,     0,     0,     0,
       0,     0,    47,     0,     0, -1850,   922,     0,     0,    48,
       0,   923,     0,     0,   924,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   925,     0,   926,  3600,     0,     0,
    3601,     0,     0,   927,     0,   928,     0,     0,  3602,    49,
       0,     0,     0,     0,  3368,  3369,     0,     0,     0,     0,
       0,    50,     0,     0,     0,    51,     0,  3603,    52,   929,
     930,     0,     0,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3604,     0,     0,     0,     0,     0,
     821,     0,     0,   931,   821,     0,     0,     0,     0,     0,
       0,    54,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3605,     0,  3606,   932,     0,     0,     0,    55,     0,
       0,     0,     0,   821,     0,     0,  3607,  3608,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3432,     0,   821,
       0,     0,     0,     0,     0,     0,     0,   933,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3450,     0,     0,     0,  3454,  3455,  3609,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3462,     0,
       0,     0,     0,  3464,     0,     0,  3465,     0,  3466,  3467,
       0,     0,     0,     0,     0,     0,     0,     0,  3610,     0,
       0,     0,     0,     0,     0,     0,     0,  3611,  3612,     0,
    3613,     0,     0,     0,     0,     0,   934,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4051,     0,     0,     0,     0,     0,
       0,   935,     0,     0,     0,     0,  3614,  3615,  3616,     0,
       0,   936,   937,     0,  3500,   938,   939,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3617,  3618,  3619,     0,
       0,   821,   821,  3620,     0,     0,  3621,  3500,   940,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3622,  3623,     0,     0,
       0,     0,     0,     0,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,     0,   821,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   941,     0,     0,     0,  3624,
    3625,     0,     0,     0,     0,     0,     0,     0,   942,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3626,     0,   943,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -2437,     0,     0,     0,   944,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   945,   821,     0,     0,     0,     0,     0,  4051,
    4051,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3627,     0,     0,     0,  3628,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3629,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -2437,     0,     0,     0,
       0,     0,   946,   821,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3630,     0,     0,
    3631,     0,     0,  3632,  3633,  3634,  3635,     0,     0,     0,
       0,     0,     0,   821,     0,     0,     0,     0,     0,     0,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   821,     0,
     821,  3636,  3637,     0,     0,     0,     0,     0,     0,     0,
     821,     0,  4051,  4051,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3638,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3500,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   821,     0,   821,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3262,     0,     0,
       0,     0,  3782,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   821,     0,  4051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4051,
     821,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4051,     0,     0,     0,     0,     0,     0,
       0,     0,  4418,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   821,  4051,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4051,  4051,     0,
       0,     0,     0,     0,     0,  3262,     0,     0,     0,  3911,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3500,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3262,     0,  4051,     0,     0,     0,
       0,     0,     0,   821,     0,     0,  4051,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   821,     0,     0,     0,     0,
       0,     0,  4051,     0,  4051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4051,     0,     0,     0,     0,     0,
     821,     0,     0,     0,   821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4051,     0,
    4051,     0,  4051,     0,     0,     0,     0,     0,     0,  4051,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4051,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4085,  4086,     0,     0,
       0,  4051,  4051,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4051,  4051,
       0,     0,     0,  4051,     0,     0,     0,     0,     0,   821,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     821,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4166,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3262,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3262,     0,
       0,     0,     0,     0,     0,     0,     0,  3500,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4283,     0,  4284,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4292,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4337,     0,
    4339,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4399,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4404,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4464,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4522,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4555,   137,     0,   690,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,   691,     0,   146,
     147,   148,   149,   692,   151,  3500,   152,     0,     0,   693,
     153,   694,   695,   696,   154,   697,     0,   155,   156,   157,
    1709,   158,     0,   159,   160,     0,     0,   161,   698,   699,
     162,   163,     0,   164,   700,   701,   166,     0,   167,     0,
     168,   169,   170,     0,   702,   172,     0,   703,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,     0,   187,   188,   189,   704,   191,     0,
     705,   706,   192,     0,     0,   193,   707,   194,   708,   709,
       0,   196,   710,   197,   711,     0,   198,   199,   200,   712,
     713,   714,     0,     0,  4637,     0,   715,   203,   716,     0,
       0,   717,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,  3500,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   718,     0,
     231,   232,   233,   234,   235,   719,   720,   236,   237,     0,
     238,   239,   240,   721,     0,   241,     0,     0,     0,   722,
     243,     0,   244,     0,   245,     0,   246,   723,   248,   724,
       0,   250,     0,   251,     0,   725,     0,   252,   253,     0,
     254,   726,     0,   255,   256,     0,     0,     0,   727,   258,
     259,   260,   728,     0,   261,   262,   263,   264,     0,     0,
     265,     0,     0,     0,   729,   266,   267,   730,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,  1710,   276,
       0,   731,   277,   278,     0,     0,     0,     0,     0,   732,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
     733,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   734,   306,
     307,   308,   309,   735,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   736,   317,     0,     0,   737,   319,
     320,   738,   321,     0,   322,   739,   740,   741,   742,   743,
     327,   328,   329,   330,   331,     0,   744,   332,   333,     0,
       0,   334,   335,   745,   337,   338,   339,   340,   746,   747,
     748,   341,   342,     0,   749,   750,   343,     0,   344,   345,
     751,     0,   347,   348,   349,     0,   350,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,   752,
     354,   355,     0,   356,   357,   753,   359,   360,   361,   362,
     754,   755,   365,   756,     0,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,   757,   376,     0,
     377,     0,     0,     0,   378,     0,     0,     0,   379,   380,
     381,   382,   383,     0,     0,   384,   385,   386,   387,   388,
       0,   389,   390,     0,   391,   392,   393,   758,   759,   394,
       0,   395,     0,   396,   397,     0,   398,   399,   400,     0,
     760,     0,   761,   402,   403,   404,   405,   406,   762,   763,
     409,   410,   411,   412,     0,   764,   414,     0,     0,     0,
     415,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,     0,   426,
     427,   428,   429,   430,     0,     0,     0,     0,     0,   431,
     432,   433,     0,   434,   435,     0,   436,   437,     0,     0,
     438,     0,     0,   439,   440,   441,   442,   443,   444,   765,
     766,   445,   446,     0,   447,   448,   767,   450,   451,   452,
     768,   769,   453,   454,   455,   456,   770,   457,   458,     0,
       0,   459,   460,     0,   461,   462,     0,   771,   463,   464,
       0,   772,   773,   774,   775,     0,     0,     0,     0,   469,
     470,   471,   472,   473,   474,  1711,   475,   476,     0,   776,
     777,   778,   478,   479,   480,   779,   481,   482,   780,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   781,   491,     0,     0,   782,   783,   784,
     785,   492,     0,     0,   493,   786,     0,   787,   494,   495,
     496,   788,   789,     0,     0,     0,     0,     0,     0,   499,
     500,     0,   501,   502,   503,     0,     0,   790,     0,   505,
     506,     0,     0,   791,   792,     0,     0,     0,     0,   793,
     794,     0,     0,   795,   796,     0,     0,   797,   798,   137,
       0,   690,   139,   140,   141,   142,  2419,     0,   143,     0,
       0,     0,   144,     0,     0,   691,     0,   146,   147,   148,
     149,   692,   151,     0,   152,     0,     0,  2420,   153,   694,
     695,   696,   154,   697,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   698,   699,   162,   163,
       0,   164,   700,   701,   166,     0,   167,     0,   168,   169,
     170,     0,   702,   172,     0,   703,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   704,   191,     0,   705,   706,
     192,     0,     0,   193,   707,   194,   708,   709,     0,   196,
     710,   197,   711,     0,   198,   199,   200,   712,   713,   714,
       0,     0,     0,     0,   715,   203,   716,     0,     0,  2421,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   718,     0,   231,   232,
     233,   234,   235,   719,   720,   236,   237,     0,   238,   239,
     240,   721,     0,   241,     0,     0,     0,   722,   243,     0,
     244,     0,   245,     0,   246,   723,   248,   724,     0,   250,
       0,   251,     0,   725,     0,   252,   253,     0,   254,   726,
       0,   255,   256,     0,     0,     0,   727,   258,   259,   260,
     728,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,   729,   266,   267,   730,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,   731,
     277,   278,     0,     0,     0,     0,     0,   732,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   733,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   734,   306,   307,   308,
     309,   735,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   736,   317,     0,     0,   737,   319,   320,   738,
     321,     0,   322,   739,   740,   741,   742,   743,   327,   328,
     329,   330,   331,     0,   744,   332,   333,     0,     0,   334,
     335,   745,   337,   338,   339,   340,   746,   747,   748,   341,
     342,     0,   749,   750,   343,     0,   344,   345,   751,  2422,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,   752,   354,   355,
       0,   356,   357,   753,   359,   360,   361,   362,   754,   755,
     365,   756,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   757,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,   758,   759,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   760,     0,
     761,   402,   403,   404,   405,   406,   762,   763,   409,   410,
     411,   412,     0,   764,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,   765,   766,   445,
     446,     0,   447,   448,   767,   450,   451,   452,   768,   769,
     453,   454,   455,   456,   770,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   771,   463,   464,     0,   772,
     773,   774,   775,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,   776,   777,   778,
     478,   479,   480,   779,   481,   482,   780,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   781,   491,     0,     0,   782,   783,   784,   785,   492,
       0,     0,   493,   786,     0,   787,   494,   495,   496,   788,
     789,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   790,     0,   505,   506,     0,
       0,   791,   792,     0,     0,     0,     0,   793,   794,     0,
       0,   795,   796,     0,     0,   797,   798,   137,     0,   690,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   691,     0,   146,   147,   148,   149,   692,
     151,     0,   152,     0,     0,   693,   153,   694,   695,   696,
     154,   697,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,   698,   699,   162,   163,     0,   164,
     700,   701,   166,     0,   167,     0,   168,   169,   170,     0,
     702,   172,     0,   703,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,     0,
     187,   188,   189,   704,   191,     0,   705,   706,   192,     0,
       0,   193,   707,   194,   708,   709,     0,   196,   710,   197,
     711,     0,   198,   199,   200,   712,   713,   714,     0,     0,
       0,     0,   715,   203,   716,     0,     0,   717,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   718,     0,   231,   232,   233,   234,
     235,   719,   720,   236,   237,     0,   238,   239,   240,   721,
       0,   241,     0,     0,     0,   722,   243,  2220,   244,     0,
     245,     0,   246,   723,   248,   724,     0,   250,     0,   251,
       0,   725,     0,   252,   253,     0,   254,   726,     0,   255,
     256,     0,     0,     0,   727,   258,   259,   260,   728,     0,
     261,   262,   263,   264,     0,     0,   265,     0,     0,     0,
     729,   266,   267,   730,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,   731,   277,   278,
       0,     0,     0,     0,     0,   732,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,   733,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   734,   306,   307,   308,   309,   735,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     736,   317,     0,     0,   737,   319,   320,   738,   321,     0,
     322,   739,   740,   741,   742,   743,   327,   328,   329,   330,
     331,     0,   744,   332,   333,     0,     0,   334,   335,   745,
     337,   338,   339,   340,   746,   747,   748,   341,   342,     0,
     749,   750,   343,     0,   344,   345,   751,     0,   347,   348,
     349,     0,   350,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,   752,   354,   355,     0,   356,
     357,   753,   359,   360,   361,   362,   754,   755,   365,   756,
       0,   366,   367,   368,     0,   369,     0,   370,   371,   372,
     373,   374,     0,   757,   376,     0,   377,     0,     0,     0,
     378,     0,     0,     0,   379,   380,   381,   382,   383,     0,
       0,   384,   385,   386,   387,   388,     0,   389,   390,     0,
     391,   392,   393,   758,   759,   394,     0,   395,     0,   396,
     397,     0,   398,   399,   400,     0,   760,     0,   761,   402,
     403,   404,   405,   406,   762,   763,   409,   410,   411,   412,
       0,   764,   414,     0,     0,     0,   415,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,     0,   426,   427,   428,   429,   430,
       0,     0,     0,     0,     0,   431,   432,   433,     0,   434,
     435,     0,   436,   437,     0,     0,   438,     0,     0,   439,
     440,   441,   442,   443,   444,   765,   766,   445,   446,     0,
     447,   448,   767,   450,   451,   452,   768,   769,   453,   454,
     455,   456,   770,   457,   458,     0,     0,   459,   460,     0,
     461,   462,     0,   771,   463,   464,     0,   772,   773,   774,
     775,     0,     0,     0,     0,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,   776,   777,   778,   478,   479,
     480,   779,   481,   482,   780,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   781,
     491,     0,     0,   782,   783,   784,   785,   492,     0,     0,
     493,   786,     0,   787,   494,   495,   496,   788,   789,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   790,     0,   505,   506,     0,     0,   791,
     792,     0,     0,     0,     0,   793,   794,     0,     0,   795,
     796,     0,     0,   797,   798,   137,     0,   690,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   691,     0,   146,   147,   148,   149,   692,   151,     0,
     152,     0,     0,   693,   153,   694,   695,   696,   154,   697,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   698,   699,   162,   163,     0,   164,   700,   701,
     166,     0,   167,     0,   168,   169,   170,     0,   702,   172,
       0,   703,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   704,   191,     0,   705,   706,   192,     0,     0,   193,
     707,   194,   708,   709,     0,   196,   710,   197,   711,     0,
     198,   199,   200,   712,   713,   714,     0,     0,     0,     0,
     715,   203,   716,     0,     0,   717,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   718,     0,   231,   232,   233,   234,   235,   719,
     720,   236,   237,     0,   238,   239,   240,   721,     0,   241,
       0,     0,     0,   722,   243,  2222,   244,     0,   245,     0,
     246,   723,   248,   724,     0,   250,     0,   251,     0,   725,
       0,   252,   253,     0,   254,   726,     0,   255,   256,     0,
       0,     0,   727,   258,   259,   260,   728,     0,   261,   262,
     263,   264,     0,     0,   265,     0,     0,     0,   729,   266,
     267,   730,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,   731,   277,   278,     0,     0,
       0,     0,     0,   732,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,   733,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   734,   306,   307,   308,   309,   735,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   736,   317,
       0,     0,   737,   319,   320,   738,   321,     0,   322,   739,
     740,   741,   742,   743,   327,   328,   329,   330,   331,     0,
     744,   332,   333,     0,     0,   334,   335,   745,   337,   338,
     339,   340,   746,   747,   748,   341,   342,     0,   749,   750,
     343,     0,   344,   345,   751,     0,   347,   348,   349,     0,
     350,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,   752,   354,   355,     0,   356,   357,   753,
     359,   360,   361,   362,   754,   755,   365,   756,     0,   366,
     367,   368,     0,   369,     0,   370,   371,   372,   373,   374,
       0,   757,   376,     0,   377,     0,     0,     0,   378,     0,
       0,     0,   379,   380,   381,   382,   383,     0,     0,   384,
     385,   386,   387,   388,     0,   389,   390,     0,   391,   392,
     393,   758,   759,   394,     0,   395,     0,   396,   397,     0,
     398,   399,   400,     0,   760,     0,   761,   402,   403,   404,
     405,   406,   762,   763,   409,   410,   411,   412,     0,   764,
     414,     0,     0,     0,   415,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,     0,   426,   427,   428,   429,   430,     0,     0,
       0,     0,     0,   431,   432,   433,     0,   434,   435,     0,
     436,   437,     0,     0,   438,     0,     0,   439,   440,   441,
     442,   443,   444,   765,   766,   445,   446,     0,   447,   448,
     767,   450,   451,   452,   768,   769,   453,   454,   455,   456,
     770,   457,   458,     0,     0,   459,   460,     0,   461,   462,
       0,   771,   463,   464,     0,   772,   773,   774,   775,     0,
       0,     0,     0,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,   776,   777,   778,   478,   479,   480,   779,
     481,   482,   780,   483,   484,     0,   485,   486,     0,     0,
     487,     0,     0,   488,     0,   489,     0,   781,   491,     0,
       0,   782,   783,   784,   785,   492,     0,     0,   493,   786,
       0,   787,   494,   495,   496,   788,   789,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
       0,   790,     0,   505,   506,     0,     0,   791,   792,     0,
       0,     0,     0,   793,   794,     0,     0,   795,   796,     0,
       0,   797,   798,   137,     0,   690,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,   691,
       0,   146,   147,   148,   149,   692,   151,     0,   152,     0,
       0,   693,   153,   694,   695,   696,   154,   697,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
     698,   699,   162,   163,     0,   164,   700,   701,   166,     0,
     167,     0,   168,   169,   170,     0,   702,   172,     0,   703,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,     0,   187,   188,   189,   704,
     191,     0,   705,   706,   192,     0,     0,   193,   707,   194,
     708,   709,     0,   196,   710,   197,   711,     0,   198,   199,
     200,   712,   713,   714,     0,     0,     0,     0,   715,   203,
     716,     0,     0,   717,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
     718,     0,   231,   232,   233,   234,   235,   719,   720,   236,
     237,     0,   238,   239,   240,   721,     0,   241,     0,     0,
       0,   722,   243,  2224,   244,     0,   245,     0,   246,   723,
     248,   724,     0,   250,     0,   251,     0,   725,     0,   252,
     253,     0,   254,   726,     0,   255,   256,     0,     0,     0,
     727,   258,   259,   260,   728,     0,   261,   262,   263,   264,
       0,     0,   265,     0,     0,     0,   729,   266,   267,   730,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,   731,   277,   278,     0,     0,     0,     0,
       0,   732,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,   733,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     734,   306,   307,   308,   309,   735,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   736,   317,     0,     0,
     737,   319,   320,   738,   321,     0,   322,   739,   740,   741,
     742,   743,   327,   328,   329,   330,   331,     0,   744,   332,
     333,     0,     0,   334,   335,   745,   337,   338,   339,   340,
     746,   747,   748,   341,   342,     0,   749,   750,   343,     0,
     344,   345,   751,     0,   347,   348,   349,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,   752,   354,   355,     0,   356,   357,   753,   359,   360,
     361,   362,   754,   755,   365,   756,     0,   366,   367,   368,
       0,   369,     0,   370,   371,   372,   373,   374,     0,   757,
     376,     0,   377,     0,     0,     0,   378,     0,     0,     0,
     379,   380,   381,   382,   383,     0,     0,   384,   385,   386,
     387,   388,     0,   389,   390,     0,   391,   392,   393,   758,
     759,   394,     0,   395,     0,   396,   397,     0,   398,   399,
     400,     0,   760,     0,   761,   402,   403,   404,   405,   406,
     762,   763,   409,   410,   411,   412,     0,   764,   414,     0,
       0,     0,   415,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
       0,   426,   427,   428,   429,   430,     0,     0,     0,     0,
       0,   431,   432,   433,     0,   434,   435,     0,   436,   437,
       0,     0,   438,     0,     0,   439,   440,   441,   442,   443,
     444,   765,   766,   445,   446,     0,   447,   448,   767,   450,
     451,   452,   768,   769,   453,   454,   455,   456,   770,   457,
     458,     0,     0,   459,   460,     0,   461,   462,     0,   771,
     463,   464,     0,   772,   773,   774,   775,     0,     0,     0,
       0,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,   776,   777,   778,   478,   479,   480,   779,   481,   482,
     780,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   781,   491,     0,     0,   782,
     783,   784,   785,   492,     0,     0,   493,   786,     0,   787,
     494,   495,   496,   788,   789,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   790,
       0,   505,   506,     0,     0,   791,   792,     0,     0,     0,
       0,   793,   794,     0,     0,   795,   796,     0,     0,   797,
     798,   137,     0,   690,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,   691,     0,   146,
     147,   148,   149,   692,   151,     0,   152,     0,     0,   693,
     153,   694,   695,   696,   154,   697,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,   698,   699,
     162,   163,     0,   164,   700,   701,   166,     0,   167,     0,
     168,   169,   170,     0,   702,   172,     0,   703,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,     0,   187,   188,   189,   704,   191,     0,
     705,   706,   192,     0,     0,   193,   707,   194,   708,   709,
       0,   196,   710,   197,   711,     0,   198,   199,   200,   712,
     713,   714,     0,     0,     0,     0,   715,   203,   716,     0,
       0,   717,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   718,     0,
     231,   232,   233,   234,   235,   719,   720,   236,   237,     0,
     238,   239,   240,   721,     0,   241,     0,     0,     0,   722,
     243,     0,   244,     0,   245,     0,   246,   723,   248,   724,
       0,   250,     0,   251,     0,   725,     0,   252,   253,     0,
     254,   726,     0,   255,   256,     0,     0,     0,   727,   258,
     259,   260,   728,     0,   261,   262,   263,   264,     0,     0,
     265,     0,     0,     0,   729,   266,   267,   730,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,   731,   277,   278,     0,     0,     0,     0,     0,   732,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
     733,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   734,   306,
     307,   308,   309,   735,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   736,   317,     0,     0,   737,   319,
     320,   738,   321,     0,   322,   739,   740,   741,   742,   743,
     327,   328,   329,   330,   331,     0,   744,   332,   333,     0,
       0,   334,   335,   745,   337,   338,   339,   340,   746,   747,
     748,   341,   342,     0,   749,   750,   343,     0,   344,   345,
     751,     0,   347,   348,   349,     0,   350,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,   752,
     354,   355,     0,   356,   357,   753,   359,   360,   361,   362,
     754,   755,   365,   756,     0,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,   757,   376,     0,
     377,     0,     0,     0,   378,     0,     0,     0,   379,   380,
     381,   382,   383,     0,     0,   384,   385,   386,   387,   388,
       0,   389,   390,     0,   391,   392,   393,   758,   759,   394,
       0,   395,     0,   396,   397,     0,   398,   399,   400,     0,
     760,     0,   761,   402,   403,   404,   405,   406,   762,   763,
     409,   410,   411,   412,     0,   764,   414,     0,     0,     0,
     415,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,     0,   426,
     427,   428,   429,   430,     0,     0,     0,     0,     0,   431,
     432,   433,     0,   434,   435,     0,   436,   437,     0,     0,
     438,     0,     0,   439,   440,   441,   442,   443,   444,   765,
     766,   445,   446,     0,   447,   448,   767,   450,   451,   452,
     768,   769,   453,   454,   455,   456,   770,   457,   458,     0,
       0,   459,   460,     0,   461,   462,     0,   771,   463,   464,
       0,   772,   773,   774,   775,     0,     0,     0,     0,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,   776,
     777,   778,   478,   479,   480,   779,   481,   482,   780,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   781,   491,     0,     0,   782,   783,   784,
     785,   492,     0,     0,   493,   786,     0,   787,   494,   495,
     496,   788,   789,     0,     0,     0,     0,     0,     0,   499,
     500,     0,   501,   502,   503,     0,     0,   790,     0,   505,
     506,     0,     0,   791,   792,     0,     0,     0,     0,   793,
     794,     0,     0,   795,   796,     0,     0,   797,   798,   137,
       0,   690,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   691,     0,   146,   147,   148,
     149,   692,   151,     0,   152,     0,     0,   693,   153,   694,
     695,   696,   154,   697,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   698,   699,   162,   163,
       0,   164,   700,   701,   166,     0,   167,     0,   168,   169,
     170,     0,   702,   172,     0,   703,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   704,   191,     0,   705,   706,
     192,     0,     0,   193,   707,   194,   708,   709,     0,   196,
     710,   197,   711,     0,   198,   199,   200,   712,   713,   714,
       0,     0,     0,     0,   715,   203,   716,     0,     0,   717,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   718,     0,   231,   232,
     233,   234,   235,   719,   720,   236,   237,     0,   238,   239,
     240,   721,     0,   241,     0,     0,     0,   722,   243,     0,
     244,     0,   245,     0,   246,   723,   248,   724,     0,   250,
       0,   251,     0,   725,     0,   252,   253,     0,   254,   726,
       0,   255,   256,     0,     0,     0,   727,   258,   259,   260,
     728,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,   729,   266,   267,   730,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,   731,
     277,   278,     0,     0,     0,     0,     0,   732,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   733,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   734,   306,   307,   308,
     309,   735,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   736,   317,     0,     0,   737,   319,   320,   738,
     321,     0,   322,   739,   740,   741,   742,   743,   327,   328,
     329,   330,   331,     0,   744,   332,   333,     0,     0,   334,
     335,   745,   337,   338,   339,   340,   746,   747,   748,   341,
     342,     0,   749,   750,   343,     0,   344,   345,   751,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,   752,   354,   355,
       0,   356,   357,   753,   359,   360,   361,   362,   754,   755,
     365,   756,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   757,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,   758,   759,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   760,     0,
     761,   402,   403,   404,   405,   406,   762,   763,   409,   410,
     411,   412,     0,   764,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,   765,   766,   445,
     446,     0,   447,   448,   767,   450,   451,   452,   768,   769,
     453,   454,   455,   456,   770,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   771,   463,   464,     0,   772,
     773,   774,   775,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,   776,   777,   778,
     478,   479,   480,   779,   481,   482,   780,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   781,   491,     0,     0,   782,   783,   784,   785,   492,
       0,     0,   493,   786,     0,   787,   494,   495,   496,   788,
     789,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   790,     0,   505,   506,     0,
       0,   791,   792,     0,     0,     0,     0,   793,  1118,     0,
       0,   795,   796,     0,     0,   797,   798,   137,     0,   690,
     139,   140,   141,   142,  1744,     0,   143,     0,     0,     0,
    1745,     0,     0,   691,     0,   146,   147,   148,   149,   692,
     151,     0,   152,     0,     0,   693,   153,   694,   695,   696,
     154,   697,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,   698,   699,   162,   163,     0,   164,
     700,   701,   166,     0,   167,     0,   168,   169,   170,     0,
     702,   172,     0,   703,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,     0,
     187,   188,   189,   704,   191,     0,   705,   706,   192,     0,
       0,   193,   707,   194,   708,   709,     0,   196,   710,   197,
     711,     0,   198,   199,   200,   712,   713,   714,     0,     0,
       0,     0,   715,   203,   716,     0,     0,   717,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   718,     0,   231,   232,   233,   234,
     235,   719,   720,   236,   237,     0,   238,   239,   240,   721,
       0,   241,     0,     0,     0,   722,   243,     0,   244,     0,
     245,     0,   246,   723,   248,   724,     0,   250,     0,   251,
       0,   725,     0,   252,   253,     0,   254,   726,     0,   255,
     256,     0,     0,     0,   727,   258,   259,   260,   728,     0,
     261,   262,   263,   264,     0,     0,   265,     0,     0,     0,
     729,   266,   267,   730,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,   731,   277,   278,
       0,     0,     0,     0,     0,   732,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,   733,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   734,   306,   307,   308,   309,   735,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     736,   317,     0,     0,   737,   319,   320,   738,   321,     0,
     322,   739,   740,   741,   742,   743,   327,   328,   329,   330,
     331,     0,   744,   332,   333,     0,     0,   334,   335,   745,
     337,   338,   339,   340,   746,     0,   748,   341,   342,     0,
     749,   750,   343,     0,   344,   345,   751,     0,   347,   348,
     349,     0,   350,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,   752,   354,   355,     0,   356,
     357,   753,   359,   360,   361,   362,   754,   755,   365,   756,
       0,   366,   367,   368,     0,   369,     0,   370,   371,   372,
     373,   374,     0,   757,   376,     0,   377,     0,     0,     0,
     378,     0,     0,     0,   379,   380,   381,   382,   383,     0,
       0,   384,   385,   386,   387,   388,     0,   389,   390,     0,
     391,   392,   393,   758,   759,   394,     0,   395,     0,   396,
     397,     0,   398,   399,   400,     0,   760,     0,   761,   402,
     403,   404,   405,   406,   762,   763,   409,   410,   411,   412,
       0,   764,   414,     0,     0,     0,   415,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,     0,   426,   427,   428,   429,   430,
       0,     0,     0,     0,     0,   431,   432,   433,     0,   434,
     435,     0,   436,   437,     0,     0,   438,     0,     0,   439,
     440,   441,   442,   443,   444,   765,   766,   445,   446,     0,
     447,   448,   767,   450,   451,   452,   768,   769,   453,   454,
     455,   456,   770,   457,   458,     0,     0,   459,   460,     0,
     461,   462,     0,   771,   463,   464,     0,   772,   773,   774,
     775,     0,     0,     0,     0,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,   776,   777,   778,   478,   479,
     480,   779,   481,   482,   780,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   781,
     491,     0,     0,   782,   783,   784,   785,   492,     0,     0,
     493,   786,     0,   787,   494,   495,   496,   788,   789,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   790,     0,   505,   506,     0,     0,   791,
     792,     0,     0,     0,     0,   793,   794,     0,     0,   795,
     796,     0,     0,   797,   798,   137,     0,   690,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   691,     0,   146,   147,   148,   149,   692,   151,     0,
     152,     0,     0,   693,   153,   694,   695,   696,   154,   697,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   698,   699,   162,   163,     0,   164,   700,   701,
     166,     0,   167,     0,   168,   169,   170,     0,   702,   172,
       0,   703,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   704,   191,     0,   705,   706,   192,     0,     0,   193,
     707,   194,   708,   709,     0,   196,   710,   197,   711,     0,
     198,   199,   200,   712,   713,   714,     0,     0,     0,     0,
     715,   203,   716,     0,     0,   717,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   718,     0,   231,   232,   233,   234,   235,   719,
     720,   236,   237,     0,   238,   239,   240,   721,     0,   241,
       0,     0,     0,   722,   243,     0,   244,     0,   245,     0,
     246,   723,   248,   724,     0,   250,     0,   251,     0,   725,
       0,   252,   253,     0,   254,   726,     0,   255,   256,     0,
       0,     0,   727,   258,   259,   260,   728,     0,   261,   262,
     263,   264,     0,     0,   265,     0,     0,     0,   729,   266,
     267,  2663,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,   731,   277,   278,     0,     0,
       0,     0,     0,   732,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,   733,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   734,   306,   307,   308,   309,   735,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   736,   317,
       0,     0,   737,   319,   320,   738,   321,     0,   322,   739,
     740,   741,   742,   743,   327,   328,   329,   330,   331,     0,
     744,   332,   333,     0,     0,   334,   335,   745,   337,   338,
     339,   340,   746,   747,   748,   341,   342,     0,   749,   750,
     343,     0,   344,   345,   751,     0,   347,   348,   349,     0,
     350,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,   752,   354,   355,     0,   356,   357,   753,
     359,   360,   361,   362,   754,   755,   365,   756,     0,   366,
     367,   368,     0,   369,     0,   370,   371,   372,   373,   374,
       0,   757,   376,     0,   377,     0,     0,     0,   378,     0,
       0,     0,   379,   380,   381,   382,   383,     0,     0,   384,
     385,   386,   387,   388,     0,   389,   390,     0,   391,   392,
     393,   758,   759,   394,     0,   395,     0,   396,   397,     0,
     398,   399,   400,     0,   760,     0,   761,   402,   403,   404,
     405,   406,   762,   763,   409,   410,   411,   412,     0,   764,
     414,     0,     0,     0,   415,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,     0,   426,   427,   428,   429,   430,     0,     0,
       0,     0,     0,   431,   432,   433,     0,   434,   435,     0,
     436,   437,     0,     0,   438,     0,     0,   439,   440,   441,
     442,   443,   444,   765,   766,   445,   446,     0,   447,   448,
     767,   450,   451,   452,   768,   769,   453,   454,   455,   456,
     770,   457,   458,     0,     0,   459,   460,     0,   461,   462,
       0,   771,   463,   464,     0,   772,   773,   774,   775,     0,
       0,     0,     0,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,   776,   777,   778,   478,   479,   480,   779,
     481,   482,   780,   483,   484,     0,   485,   486,     0,     0,
     487,     0,     0,   488,     0,   489,     0,   781,   491,     0,
       0,   782,   783,   784,   785,   492,     0,     0,   493,   786,
       0,   787,   494,   495,   496,   788,   789,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
       0,   790,     0,   505,   506,     0,     0,   791,   792,     0,
       0,     0,     0,   793,   794,     0,     0,   795,   796,     0,
       0,   797,   798,   137,     0,   690,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,   691,
       0,   146,   147,   148,   149,   692,   151,     0,   152,     0,
       0,   693,   153,   694,   695,   696,   154,   697,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
     698,   699,   162,   163,     0,   164,   700,   701,   166,     0,
     167,     0,   168,   169,   170,     0,   702,   172,     0,   703,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,     0,   187,   188,   189,   704,
     191,     0,   705,   706,   192,     0,     0,   193,   707,   194,
     708,   709,     0,   196,   710,   197,   711,     0,   198,   199,
     200,   712,   713,   714,     0,     0,     0,     0,   715,   203,
     716,     0,     0,   717,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
     718,     0,   231,   232,   233,   234,   235,   719,   720,   236,
     237,     0,   238,   239,   240,   721,     0,   241,     0,     0,
       0,   722,   243,     0,   244,     0,   245,     0,   246,   723,
     248,   724,     0,   250,     0,   251,     0,   725,     0,   252,
     253,     0,   254,   726,     0,   255,   256,     0,     0,     0,
     727,   258,   259,   260,   728,     0,   261,   262,   263,   264,
       0,     0,   265,     0,     0,     0,   729,   266,   267,  2708,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,   731,   277,   278,     0,     0,     0,     0,
       0,   732,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,   733,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     734,   306,   307,   308,   309,   735,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   736,   317,     0,     0,
     737,   319,   320,   738,   321,     0,   322,   739,   740,   741,
     742,   743,   327,   328,   329,   330,   331,     0,   744,   332,
     333,     0,     0,   334,   335,   745,   337,   338,   339,   340,
     746,   747,   748,   341,   342,     0,   749,   750,   343,     0,
     344,   345,   751,     0,   347,   348,   349,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,   752,   354,   355,     0,   356,   357,   753,   359,   360,
     361,   362,   754,   755,   365,   756,     0,   366,   367,   368,
       0,   369,     0,   370,   371,   372,   373,   374,     0,   757,
     376,     0,   377,     0,     0,     0,   378,     0,     0,     0,
     379,   380,   381,   382,   383,     0,     0,   384,   385,   386,
     387,   388,     0,   389,   390,     0,   391,   392,   393,   758,
     759,   394,     0,   395,     0,   396,   397,     0,   398,   399,
     400,     0,   760,     0,   761,   402,   403,   404,   405,   406,
     762,   763,   409,   410,   411,   412,     0,   764,   414,     0,
       0,     0,   415,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
       0,   426,   427,   428,   429,   430,     0,     0,     0,     0,
       0,   431,   432,   433,     0,   434,   435,     0,   436,   437,
       0,     0,   438,     0,     0,   439,   440,   441,   442,   443,
     444,   765,   766,   445,   446,     0,   447,   448,   767,   450,
     451,   452,   768,   769,   453,   454,   455,   456,   770,   457,
     458,     0,     0,   459,   460,     0,   461,   462,     0,   771,
     463,   464,     0,   772,   773,   774,   775,     0,     0,     0,
       0,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,   776,   777,   778,   478,   479,   480,   779,   481,   482,
     780,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   781,   491,     0,     0,   782,
     783,   784,   785,   492,     0,     0,   493,   786,     0,   787,
     494,   495,   496,   788,   789,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   790,
       0,   505,   506,     0,     0,   791,   792,     0,     0,     0,
       0,   793,   794,     0,     0,   795,   796,     0,     0,   797,
     798,   137,     0,   690,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,   691,     0,   146,
     147,   148,   149,   692,   151,     0,   152,     0,     0,   693,
     153,   694,   695,   696,   154,   697,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,   698,   699,
     162,   163,     0,   164,   700,   701,   166,     0,   167,     0,
     168,   169,   170,     0,   702,   172,     0,   703,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,     0,   187,   188,   189,   704,   191,     0,
     705,   706,   192,     0,     0,   193,   707,   194,   708,   709,
       0,   196,   710,   197,   711,     0,   198,   199,   200,   712,
     713,   714,     0,     0,     0,     0,   715,   203,   716,     0,
       0,  3499,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   718,     0,
     231,   232,   233,   234,   235,   719,   720,   236,   237,     0,
     238,   239,   240,   721,     0,   241,     0,     0,     0,   722,
     243,     0,   244,     0,   245,     0,   246,   723,   248,   724,
       0,   250,     0,   251,     0,   725,     0,   252,   253,     0,
     254,   726,     0,   255,   256,     0,     0,     0,   727,   258,
     259,   260,   728,     0,   261,   262,   263,   264,     0,     0,
     265,     0,     0,     0,   729,   266,   267,   730,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,   731,   277,   278,     0,     0,     0,     0,     0,   732,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
     733,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,   734,   306,
     307,   308,   309,   735,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   736,   317,     0,     0,   737,   319,
     320,   738,   321,     0,   322,   739,   740,   741,   742,   743,
     327,   328,   329,   330,   331,     0,   744,   332,   333,     0,
       0,   334,   335,   745,   337,   338,   339,   340,   746,   747,
     748,   341,   342,     0,   749,   750,   343,     0,   344,   345,
     751,     0,   347,   348,   349,     0,   350,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,   752,
     354,   355,     0,   356,   357,   753,   359,   360,   361,   362,
     754,   755,   365,   756,     0,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,   757,   376,     0,
     377,     0,     0,     0,   378,     0,     0,     0,   379,   380,
     381,   382,   383,     0,     0,   384,   385,   386,   387,   388,
       0,   389,   390,     0,   391,   392,   393,   758,   759,   394,
       0,   395,     0,   396,   397,     0,   398,   399,   400,     0,
     760,     0,   761,   402,   403,   404,   405,   406,   762,   763,
     409,   410,   411,   412,     0,   764,   414,     0,     0,     0,
     415,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,     0,   426,
     427,   428,   429,   430,     0,     0,     0,     0,     0,   431,
     432,   433,     0,   434,   435,     0,   436,   437,     0,     0,
     438,     0,     0,   439,   440,   441,   442,   443,   444,   765,
     766,   445,   446,     0,   447,   448,   767,   450,   451,   452,
     768,   769,   453,   454,   455,   456,   770,   457,   458,     0,
       0,   459,   460,     0,   461,   462,     0,   771,   463,   464,
       0,   772,   773,   774,   775,     0,     0,     0,     0,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,   776,
     777,   778,   478,   479,   480,   779,   481,   482,   780,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   781,   491,     0,     0,   782,   783,   784,
     785,   492,     0,     0,   493,   786,     0,   787,   494,   495,
     496,   788,   789,     0,     0,     0,     0,     0,     0,   499,
     500,     0,   501,   502,   503,     0,     0,   790,     0,   505,
     506,     0,     0,   791,   792,     0,     0,     0,     0,   793,
     794,     0,     0,   795,   796,     0,     0,   797,   798,   137,
       0,   690,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   691,     0,   146,   147,   148,
     149,   692,   151,     0,   152,     0,     0,   693,   153,   694,
     695,   696,   154,   697,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   698,   699,   162,   163,
       0,   164,   700,   701,   166,     0,   167,     0,   168,   169,
     170,     0,   702,   172,     0,   703,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   704,   191,     0,   705,   706,
     192,     0,     0,   193,   707,   194,   708,   709,     0,   196,
     710,   197,   711,     0,   198,   199,   200,   712,   713,   714,
       0,     0,     0,     0,   715,   203,   716,     0,     0,   717,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   718,     0,   231,   232,
     233,   234,   235,   719,   720,   236,   237,     0,   238,   239,
     240,   721,     0,   241,     0,     0,     0,   722,   243,     0,
     244,     0,   245,     0,   246,   723,   248,   724,     0,   250,
       0,   251,     0,   725,     0,   252,   253,     0,   254,   726,
       0,   255,   256,     0,     0,     0,   727,   258,   259,   260,
     728,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,   729,   266,   267,   730,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,   731,
     277,   278,     0,     0,     0,     0,     0,   732,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,   733,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,   734,   306,   307,   308,
     309,   735,   310,   311,  4496,     0,     0,     0,   312,   313,
     314,   315,   736,   317,     0,     0,   737,   319,   320,   738,
     321,     0,   322,   739,   740,   741,   742,   743,   327,   328,
     329,   330,   331,     0,   744,   332,   333,     0,     0,   334,
     335,   745,   337,   338,   339,   340,   746,     0,   748,   341,
     342,     0,   749,   750,   343,     0,   344,   345,   751,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,   752,   354,   355,
       0,   356,   357,   753,   359,   360,   361,   362,   754,   755,
     365,   756,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   757,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,   758,   759,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   760,     0,
     761,   402,   403,   404,   405,   406,   762,   763,   409,   410,
     411,   412,     0,   764,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,   765,   766,   445,
     446,     0,   447,   448,   767,   450,   451,   452,   768,   769,
     453,   454,   455,   456,   770,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   771,   463,   464,     0,   772,
     773,   774,   775,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,   776,   777,   778,
     478,   479,   480,   779,   481,   482,   780,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   781,   491,     0,     0,   782,   783,   784,   785,   492,
       0,     0,   493,   786,     0,   787,   494,   495,   496,   788,
     789,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   790,     0,   505,   506,     0,
       0,   791,   792,     0,     0,     0,     0,   793,   794,     0,
       0,   795,   796,     0,     0,   797,   798,   137,     0,   690,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   691,     0,   146,   147,   148,   149,   692,
     151,     0,   152,     0,     0,   693,   153,   694,   695,   696,
     154,   697,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,   698,   699,   162,   163,     0,   164,
     700,   701,   166,     0,   167,     0,   168,   169,   170,     0,
     702,   172,     0,   703,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,     0,
     187,   188,   189,   704,   191,     0,   705,   706,   192,     0,
       0,   193,   707,   194,   708,   709,     0,   196,   710,   197,
     711,     0,   198,   199,   200,   712,   713,   714,     0,     0,
       0,     0,   715,   203,   716,     0,     0,   717,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,   718,     0,   231,   232,   233,   234,
     235,   719,   720,   236,   237,     0,   238,   239,   240,   721,
       0,   241,     0,     0,     0,   722,   243,     0,   244,     0,
     245,     0,   246,   723,   248,   724,     0,   250,     0,   251,
       0,   725,     0,   252,   253,     0,   254,   726,     0,   255,
     256,     0,     0,     0,   727,   258,   259,   260,   728,     0,
     261,   262,   263,   264,     0,     0,   265,     0,     0,     0,
     729,   266,   267,   730,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,   731,   277,   278,
       0,     0,     0,     0,     0,   732,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,   733,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,   734,   306,   307,   308,   309,   735,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     736,   317,     0,     0,   737,   319,   320,   738,   321,     0,
     322,   739,   740,   741,   742,   743,   327,   328,   329,   330,
     331,     0,   744,   332,   333,     0,     0,   334,   335,   745,
     337,   338,   339,   340,   746,     0,   748,   341,   342,     0,
     749,   750,   343,     0,   344,   345,   751,     0,   347,   348,
     349,     0,   350,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,   752,   354,   355,     0,   356,
     357,   753,   359,   360,   361,   362,   754,   755,   365,   756,
       0,   366,   367,   368,     0,   369,     0,   370,   371,   372,
     373,   374,     0,   757,   376,     0,   377,     0,     0,     0,
     378,     0,     0,     0,   379,   380,   381,   382,   383,     0,
       0,   384,   385,   386,   387,   388,     0,   389,   390,     0,
     391,   392,   393,   758,   759,   394,     0,   395,     0,   396,
     397,     0,   398,   399,   400,     0,   760,     0,   761,   402,
     403,   404,   405,   406,   762,   763,   409,   410,   411,   412,
       0,   764,   414,     0,     0,     0,   415,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,     0,   426,   427,   428,   429,   430,
       0,     0,     0,     0,     0,   431,   432,   433,     0,   434,
     435,     0,   436,   437,     0,     0,   438,     0,     0,   439,
     440,   441,   442,   443,   444,   765,   766,   445,   446,     0,
     447,   448,   767,   450,   451,   452,   768,   769,   453,   454,
     455,   456,   770,   457,   458,     0,     0,   459,   460,     0,
     461,   462,     0,   771,   463,   464,     0,   772,   773,   774,
     775,     0,     0,     0,     0,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,   776,   777,   778,   478,   479,
     480,   779,   481,   482,   780,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   781,
     491,     0,     0,   782,   783,   784,   785,   492,     0,     0,
     493,   786,     0,   787,   494,   495,   496,   788,   789,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   790,     0,   505,   506,     0,     0,   791,
     792,     0,     0,     0,     0,   793,   794,     0,     0,   795,
     796,     0,     0,   797,   798,   137,     0,   690,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
       0,   691,     0,   146,   147,   148,   149,   692,   151,     0,
     152,     0,     0,   693,   153,   694,   695,   696,   154,   697,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   698,   699,   162,   163,     0,   164,   700,   701,
     166,     0,   167,     0,   168,   169,   170,     0,   702,   172,
       0,   703,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   704,   191,     0,   705,   706,   192,     0,     0,   193,
     707,   194,   708,   709,     0,   196,   710,   197,   711,     0,
     198,   199,   200,   712,   713,   714,     0,     0,     0,     0,
     715,   203,   716,     0,     0,   717,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   718,     0,   231,   232,   233,   234,   235,   719,
     720,   236,   237,     0,   238,   239,   240,   721,     0,   241,
       0,     0,     0,   722,   243,     0,   244,     0,   245,     0,
     246,   723,   248,   724,     0,   250,     0,   251,     0,   725,
       0,   252,   253,     0,   254,   726,     0,   255,   256,     0,
       0,     0,   727,   258,   259,   260,   728,     0,   261,   262,
     263,   264,     0,     0,   265,     0,     0,     0,   729,   266,
     267,  1759,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,   731,   277,   278,     0,     0,
       0,     0,     0,   732,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,   733,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,   734,   306,   307,   308,   309,   735,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   736,   317,
       0,     0,   737,   319,   320,   738,   321,     0,   322,   739,
     740,   741,   742,   743,   327,   328,   329,   330,   331,     0,
     744,   332,   333,     0,     0,   334,   335,   745,   337,   338,
     339,   340,   746,     0,   748,   341,   342,     0,   749,   750,
     343,     0,   344,   345,   751,     0,   347,   348,   349,     0,
     350,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,   752,   354,   355,     0,   356,   357,   753,
     359,   360,   361,   362,   754,   755,   365,   756,     0,   366,
     367,   368,     0,   369,     0,   370,   371,   372,   373,   374,
       0,   757,   376,     0,   377,     0,     0,     0,   378,     0,
       0,     0,   379,   380,   381,   382,   383,     0,     0,   384,
     385,   386,   387,   388,     0,   389,   390,     0,   391,   392,
     393,   758,   759,   394,     0,   395,     0,   396,   397,     0,
     398,   399,   400,     0,   760,     0,   761,   402,   403,   404,
     405,   406,   762,   763,   409,   410,   411,   412,     0,   764,
     414,     0,     0,     0,   415,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,     0,   426,   427,   428,   429,   430,     0,     0,
       0,     0,     0,   431,   432,   433,     0,   434,   435,     0,
     436,   437,     0,     0,   438,     0,     0,   439,   440,   441,
     442,   443,   444,   765,   766,   445,   446,     0,   447,   448,
     767,   450,   451,   452,   768,   769,   453,   454,   455,   456,
     770,   457,   458,     0,     0,   459,   460,     0,   461,   462,
       0,   771,   463,   464,     0,   772,   773,   774,   775,     0,
       0,     0,     0,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,   776,   777,   778,   478,   479,   480,   779,
     481,   482,   780,   483,   484,     0,   485,   486,     0,     0,
     487,     0,     0,   488,     0,   489,     0,   781,   491,     0,
       0,   782,   783,   784,   785,   492,     0,     0,   493,   786,
       0,   787,   494,   495,   496,   788,   789,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
       0,   790,     0,   505,   506,     0,     0,   791,   792,     0,
       0,     0,     0,   793,   794,     0,     0,   795,   796,     0,
       0,   797,   798,   137,     0,   690,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,   691,
       0,   146,   147,   148,   149,   692,   151,     0,   152,     0,
       0,   693,   153,   694,   695,   696,   154,   697,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
     698,   699,   162,   163,     0,   164,   700,   701,   166,     0,
     167,     0,   168,   169,   170,     0,   702,   172,     0,   703,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,     0,   187,   188,   189,   704,
     191,     0,   705,   706,   192,     0,     0,   193,   707,   194,
     708,   709,     0,   196,   710,   197,   711,     0,   198,   199,
     200,   712,   713,   714,     0,     0,     0,     0,   715,   203,
     716,     0,     0,   717,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
     718,     0,   231,   232,   233,   234,   235,   719,   720,   236,
     237,     0,   238,   239,   240,   721,     0,   241,     0,     0,
       0,   722,   243,     0,   244,     0,   245,     0,   246,   723,
     248,   724,     0,   250,     0,   251,     0,   725,     0,   252,
     253,     0,   254,   726,     0,   255,   256,     0,     0,     0,
     727,   258,   259,   260,   728,     0,   261,   262,   263,   264,
       0,     0,   265,     0,     0,     0,   729,   266,   267,  1761,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,   731,   277,   278,     0,     0,     0,     0,
       0,   732,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,   733,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
     734,   306,   307,   308,   309,   735,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   736,   317,     0,     0,
     737,   319,   320,   738,   321,     0,   322,   739,   740,   741,
     742,   743,   327,   328,   329,   330,   331,     0,   744,   332,
     333,     0,     0,   334,   335,   745,   337,   338,   339,   340,
     746,     0,   748,   341,   342,     0,   749,   750,   343,     0,
     344,   345,   751,     0,   347,   348,   349,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,   752,   354,   355,     0,   356,   357,   753,   359,   360,
     361,   362,   754,   755,   365,   756,     0,   366,   367,   368,
       0,   369,     0,   370,   371,   372,   373,   374,     0,   757,
     376,     0,   377,     0,     0,     0,   378,     0,     0,     0,
     379,   380,   381,   382,   383,     0,     0,   384,   385,   386,
     387,   388,     0,   389,   390,     0,   391,   392,   393,   758,
     759,   394,     0,   395,     0,   396,   397,     0,   398,   399,
     400,     0,   760,     0,   761,   402,   403,   404,   405,   406,
     762,   763,   409,   410,   411,   412,     0,   764,   414,     0,
       0,     0,   415,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
       0,   426,   427,   428,   429,   430,     0,     0,     0,     0,
       0,   431,   432,   433,     0,   434,   435,     0,   436,   437,
       0,     0,   438,     0,     0,   439,   440,   441,   442,   443,
     444,   765,   766,   445,   446,     0,   447,   448,   767,   450,
     451,   452,   768,   769,   453,   454,   455,   456,   770,   457,
     458,     0,     0,   459,   460,     0,   461,   462,     0,   771,
     463,   464,     0,   772,   773,   774,   775,     0,     0,     0,
       0,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,   776,   777,   778,   478,   479,   480,   779,   481,   482,
     780,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   781,   491,     0,     0,   782,
     783,   784,   785,   492,     0,     0,   493,   786,     0,   787,
     494,   495,   496,   788,   789,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   790,
       0,   505,   506,     0,     0,   791,   792,     0,     0,     0,
       0,   793,   794,     0,     0,   795,   796,     0,     0,   797,
     798,   137,     0,   138,   139,   140,   141,   142,     0,     0,
     143,     0,     0,     0,   144,     0,     0,   145,     0,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,   694,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,     0,   167,     0,
     168,   169,   170,     0,   171,   172,     0,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
       0,   185,   186,     0,   187,   188,   189,   190,   191,     0,
       0,     0,   192,     0,     0,   193,     0,   194,     0,   195,
       0,   196,     0,   197,     0,     0,   198,   199,   200,     0,
       0,  1798,     0,     0,     0,     0,   202,   203,   716,     0,
       0,     0,   204,   205,     0,   206,     0,     0,     0,   207,
       0,   208,   209,   210,   211,   212,     0,     0,     0,   213,
       0,     0,   214,   215,   216,     0,     0,     0,   217,     0,
     218,   219,     0,   220,   221,   222,     0,     0,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,     0,     0,
     231,   232,   233,   234,   235,     0,   720,   236,   237,     0,
     238,   239,   240,   721,     0,   241,     0,     0,     0,   242,
     243,     0,   244,     0,   245,     0,   246,   247,   248,   249,
       0,   250,     0,   251,     0,     0,     0,   252,   253,     0,
     254,   726,     0,   255,   256,     0,     0,     0,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,     0,     0,     0,     0,   266,   267,     0,     0,     0,
     268,     0,     0,     0,   269,   270,     0,   271,   272,     0,
       0,     0,   273,     0,     0,   274,   275,     0,     0,   276,
       0,     0,   277,   278,     0,     0,     0,     0,     0,   279,
     280,     0,   281,     0,   282,     0,   283,   284,     0,     0,
     733,     0,     0,     0,     0,   285,     0,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,     0,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,     0,     0,     0,     0,
     312,   313,   314,   315,   316,   317,     0,     0,   318,   319,
     320,     0,   321,     0,   322,     0,   323,   324,   325,   326,
     327,   328,   329,   330,   331,     0,   744,   332,   333,     0,
       0,   334,   335,   336,   337,   338,   339,   340,     0,     0,
       0,   341,   342,     0,   749,   750,   343,     0,   344,   345,
     346,     0,   347,   348,   349,     0,   350,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   351,   352,   353,     0,
     354,   355,     0,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,     0,     0,   366,   367,   368,     0,   369,
       0,   370,   371,   372,   373,   374,     0,   375,   376,     0,
     377,     0,     0,     0,   378,     0,     0,     0,   379,   380,
     381,   382,   383,     0,     0,   384,   385,   386,   387,   388,
       0,   389,   390,     0,   391,   392,   393,     0,     0,   394,
       0,   395,     0,   396,   397,     0,   398,   399,   400,     0,
     401,     0,     0,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,     0,   413,   414,     0,     0,     0,
     415,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,     0,   426,
     427,   428,   429,   430,     0,     0,     0,     0,     0,   431,
     432,   433,     0,   434,   435,     0,   436,   437,     0,     0,
     438,     0,     0,   439,   440,   441,   442,   443,   444,     0,
       0,   445,   446,     0,   447,   448,   449,   450,   451,   452,
       0,     0,   453,   454,   455,   456,     0,   457,   458,     0,
       0,   459,   460,     0,   461,   462,     0,   771,   463,   464,
       0,  1799,   466,   467,  1800,     0,     0,     0,     0,   469,
     470,   471,   472,   473,   474,     0,   475,   476,     0,     0,
     777,   477,   478,   479,   480,   779,   481,   482,   780,   483,
     484,     0,   485,   486,     0,     0,   487,     0,     0,   488,
       0,   489,     0,   490,   491,     0,     0,     0,     0,     0,
       0,   492,     0,     0,   493,     0,     0,     0,   494,   495,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
     500,     0,   501,   502,   503,     0,     0,   504,     0,   505,
     506,     0,     0,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,   797,   798,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,     0,   168,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,  2909,   187,   188,   189,   190,
     191,     0,     0,     0,   192,     0,     0,   193,     0,   194,
       0,   195,     0,   196,     0,   197,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,   203,
       0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
       0,     0,   231,   232,   233,   234,   235,     0,     0,   236,
     237,     0,   238,   239,   240,     0,     0,   241,     0,     0,
       0,   242,   243,     0,   244,   521,   245,     0,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,     0,   252,
     253,     0,   254,     0,     0,   255,   256,     0,     0,     0,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
    2047,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,  2048,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,  3035,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,   354,   355,  2523,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,     0,     0,   366,   367,   368,
       0,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,     0,     0,     0,   378,     0,     0,     0,
     379,   380,   381,   382,   383,     0,     0,   384,   385,   386,
     387,   388,     0,   389,   390,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,     0,   398,   399,
     400,     0,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,  -493,
       0,     0,   415,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
       0,   426,   427,   428,   429,   430,   525,     0,     0,     0,
       0,   431,   432,   433,     0,   434,   435,     0,   436,   437,
       0,     0,   438,     0,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   457,
     458,     0,     0,   459,   460,     0,   461,   462,     0,     0,
     463,   464,     0,   465,   466,   467,   468,     0,     0,     0,
       0,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,   477,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   490,   491,     0,     0,     0,
       0,     0,     0,   492,     0,     0,   493,     0,     0,     0,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   504,
       0,   505,   506,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,   145,
    2981,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,     0,   168,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,  2909,   187,   188,   189,   190,
     191,     0,     0,     0,   192,     0,     0,   193,     0,   194,
       0,   195,     0,   196,     0,   197,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,   203,
       0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
       0,     0,   231,   232,   233,   234,   235,     0,     0,   236,
     237,     0,   238,   239,   240,     0,     0,   241,     0,     0,
       0,   242,   243,     0,   244,   521,   245,     0,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,     0,   252,
     253,     0,   254,     0,     0,   255,   256,     0,     0,     0,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
    2047,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,  2048,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,     0,     0,   366,   367,   368,
       0,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,     0,     0,     0,   378,     0,     0,     0,
     379,   380,   381,   382,   383,     0,     0,   384,   385,   386,
     387,   388,     0,   389,   390,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,     0,   398,   399,
     400,     0,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
       0,     0,   415,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
       0,   426,   427,   428,   429,   430,   525,     0,     0,     0,
       0,   431,   432,   433,     0,   434,   435,     0,   436,   437,
       0,     0,   438,     0,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   457,
     458,     0,     0,   459,   460,     0,   461,   462,     0,     0,
     463,   464,     0,   465,   466,   467,   468,     0,     0,     0,
       0,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,   477,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   490,   491,     0,     0,     0,
       0,     0,     0,   492,     0,     0,   493,     0,     0,     0,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   504,
       0,   505,   506,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,   145,
    2981,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,     0,   168,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,     0,   187,   188,   189,   190,
     191,     0,     0,     0,   192,     0,     0,   193,     0,   194,
       0,   195,     0,   196,     0,   197,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,   203,
       0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
       0,     0,   231,   232,   233,   234,   235,     0,     0,   236,
     237,     0,   238,   239,   240,     0,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,   245,     0,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,     0,   252,
     253,     0,   254,     0,     0,   255,   256,     0,     0,     0,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,     0,     0,   366,   367,   368,
       0,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,     0,     0,     0,   378,     0,     0,     0,
     379,   380,   381,   382,   383,     0,     0,   384,   385,   386,
     387,   388,     0,   389,   390,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,     0,   398,   399,
     400,     0,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,  2366,
       0,     0,   415,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
       0,   426,   427,   428,   429,   430,     0,     0,     0,     0,
       0,   431,   432,   433,     0,   434,   435,     0,   436,   437,
       0,     0,   438,     0,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   457,
     458,     0,     0,   459,   460,     0,   461,   462,     0,     0,
     463,   464,     0,   465,   466,   467,   468,     0,     0,     0,
       0,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,   477,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   490,   491,     0,     0,     0,
       0,     0,     0,   492,     0,     0,   493,     0,     0,     0,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   504,
       0,   505,   506,   137,     0,   138,   139,   140,   141,   142,
       0,     0,   143,  2815,     0,     0,   144,     0,     0,   145,
     798,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,     0,   168,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,     0,   187,   188,   189,   190,
     191,     0,     0,     0,   192,     0,     0,   193,     0,   194,
       0,   195,     0,   196,     0,   197,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,   203,
       0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
       0,     0,   231,   232,   233,   234,   235,     0,     0,   236,
     237,     0,   238,   239,   240,     0,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,   245,     0,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,     0,   252,
     253,     0,   254,     0,     0,   255,   256,     0,     0,     0,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,     0,     0,   366,   367,   368,
       0,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,     0,     0,     0,   378,     0,     0,     0,
     379,   380,   381,   382,   383,     0,     0,   384,   385,   386,
     387,   388,     0,   389,   390,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,     0,   398,   399,
     400,     0,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
       0,     0,   415,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
       0,   426,   427,   428,   429,   430,     0,     0,     0,     0,
       0,   431,   432,   433,     0,   434,   435,     0,   436,   437,
       0,     0,   438,     0,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   457,
     458,     0,     0,   459,   460,     0,   461,   462,     0,     0,
     463,   464,     0,   465,   466,   467,   468,     0,     0,     0,
       0,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,   477,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   490,   491,     0,     0,     0,
       0,     0,     0,   492,     0,     0,   493,     0,     0,     0,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   504,
       0,   505,   506,     0,     0,   137,     0,   138,   139,   140,
     141,   142,     0,  4641,   143,     0,     0,     0,   144,  4642,
     798,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,     0,   167,     0,   168,   169,   170,     0,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,     0,     0,   192,     0,     0,   193,
       0,   194,     0,   195,     0,   196,     0,   197,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,     0,   231,   232,   233,   234,   235,     0,
       0,   236,   237,     0,   238,   239,   240,     0,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,   245,     0,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
       0,   252,   253,     0,   254,     0,     0,   255,   256,     0,
       0,     0,   257,   258,   259,   260,     0,     0,   261,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,     0,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,     0,
     350,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,     0,     0,   366,
     367,   368,     0,   369,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,     0,     0,     0,   378,     0,
       0,     0,   379,   380,   381,   382,   383,     0,     0,   384,
     385,   386,   387,   388,     0,   389,   390,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,     0,
     398,   399,   400,     0,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,     0,     0,   415,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,     0,   426,   427,   428,   429,   430,     0,     0,
       0,     0,     0,   431,   432,   433,     0,   434,   435,     0,
     436,   437,     0,     0,   438,     0,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,     0,   447,   448,
     449,   450,   451,   452,     0,     0,   453,   454,   455,   456,
       0,   457,   458,     0,     0,   459,   460,     0,   461,   462,
       0,     0,   463,   464,     0,   465,   466,   467,   468,     0,
       0,     0,     0,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,     0,     0,   477,   478,   479,   480,     0,
     481,   482,     0,   483,   484,     0,   485,   486,     0,     0,
     487,     0,     0,   488,     0,   489,     0,   490,   491,     0,
       0,     0,     0,     0,     0,   492,     0,     0,   493,     0,
       0,     0,   494,   495,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
       0,   504,     0,   505,   506,     0,     0,   137,     0,   138,
     139,   140,   141,   142,  1122,     0,   143,     0,     0,     0,
     144,     0,   798,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,     0,   168,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,     0,
     187,   188,   189,   190,   191,     0,     0,     0,   192,     0,
       0,   193,     0,   194,     0,   195,     0,   196,     0,   197,
       0,     0,   198,   199,   200,     0,     0,   201,     0,     0,
       0,     0,   202,   203,     0,     0,     0,     0,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,     0,     0,   231,   232,   233,   234,
     235,     0,     0,   236,   237,     0,   238,   239,   240,     0,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
     245,     0,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,     0,   252,   253,     0,   254,     0,     0,   255,
     256,     0,     0,     0,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,  1337,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,     0,   350,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,     0,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,     0,
       0,   366,   367,   368,     0,   369,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,     0,     0,     0,
     378,     0,     0,     0,   379,   380,   381,   382,   383,     0,
       0,   384,   385,   386,   387,   388,     0,   389,   390,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,     0,   398,   399,   400,     0,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,     0,   426,   427,   428,   429,   430,
       0,     0,     0,     0,     0,   431,   432,   433,     0,   434,
     435,     0,   436,   437,     0,     0,   438,     0,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,     0,
     447,   448,   449,   450,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   457,   458,     0,     0,   459,   460,     0,
     461,   462,     0,     0,   463,   464,     0,   465,   466,   467,
     468,     0,     0,     0,     0,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,   477,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   490,
     491,     0,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   504,     0,   505,   506,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,     0,   145,   563,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,     0,   168,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,     0,
     187,   188,   189,   190,   191,     0,     0,     0,   192,     0,
       0,   193,     0,   194,     0,   195,     0,   196,     0,   197,
       0,     0,   198,   199,   200,     0,     0,   201,     0,     0,
       0,     0,   202,   203,     0,     0,     0,     0,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,     0,     0,   231,   232,   233,   234,
     235,     0,     0,   236,   237,     0,   238,   239,   240,     0,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
     245,     0,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,     0,   252,   253,     0,   254,     0,     0,   255,
     256,     0,     0,     0,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,     0,   350,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,     0,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,     0,
       0,   366,   367,   368,     0,   369,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,     0,     0,     0,
     378,     0,     0,     0,   379,   380,   381,   382,   383,     0,
       0,   384,   385,   386,   387,   388,     0,   389,   390,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,     0,   398,   399,   400,     0,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,     0,   426,   427,   428,   429,   430,
       0,     0,     0,     0,     0,   431,   432,   433,     0,   434,
     435,     0,   436,   437,     0,     0,   438,     0,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,     0,
     447,   448,   449,   450,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   457,   458,     0,     0,   459,   460,     0,
     461,   462,     0,     0,   463,   464,     0,   465,   466,   467,
     468,     0,     0,     0,     0,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,   477,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   490,
     491,     0,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   504,     0,   505,   506,     0,     0,     0,
     137,  2775,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,   563,     0,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,     0,   168,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,     0,
       0,   192,     0,     0,   193,     0,   194,     0,   195,     0,
     196,     0,   197,     0,     0,   198,   199,   200,     0,     0,
     201,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,   204,   205,     0,   206,     0,     0,     0,   207,     0,
     208,   209,   210,   211,   212,     0,     0,     0,   213,     0,
       0,   214,   215,   216,     0,     0,     0,   217,     0,   218,
     219,     0,   220,   221,   222,     0,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,     0,   238,
     239,   240,     0,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,   252,   253,     0,   254,
       0,     0,   255,   256,     0,     0,     0,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     341,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,   349,     0,   350,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,   354,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,   367,   368,     0,   369,     0,
     370,   371,   372,   373,   374,     0,   375,   376,     0,   377,
       0,     0,     0,   378,     0,     0,     0,   379,   380,   381,
     382,   383,     0,     0,   384,   385,   386,   387,   388,     0,
     389,   390,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,     0,   398,   399,   400,     0,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,     0,     0,   415,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,     0,   426,   427,
     428,   429,   430,     0,     0,     0,     0,     0,   431,   432,
     433,     0,   434,   435,     0,   436,   437,     0,     0,   438,
       0,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,     0,   447,   448,   449,   450,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   457,   458,     0,     0,
     459,   460,     0,   461,   462,     0,     0,   463,   464,     0,
     465,   466,   467,   468,     0,     0,     0,     0,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
     477,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   490,   491,     0,     0,     0,     0,     0,     0,
     492,     0,     0,   493,     0,     0,     0,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   505,   506,
       0,     0,   137,     0,   138,   139,   140,   141,   142,  2980,
       0,   143,     0,     0,     0,   144,     0,  2981,   145,     0,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,     0,   167,
       0,   168,   169,   170,     0,   171,   172,     0,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,     0,   185,   186,     0,   187,   188,   189,   190,   191,
       0,     0,     0,   192,     0,     0,   193,     0,   194,     0,
     195,     0,   196,     0,   197,     0,     0,   198,   199,   200,
       0,     0,   201,     0,     0,     0,     0,   202,   203,     0,
       0,     0,     0,   204,   205,     0,   206,     0,     0,     0,
     207,     0,   208,   209,   210,   211,   212,     0,     0,     0,
     213,     0,     0,   214,   215,   216,     0,     0,     0,   217,
       0,   218,   219,     0,   220,   221,   222,     0,     0,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,     0,
       0,   231,   232,   233,   234,   235,     0,     0,   236,   237,
       0,   238,   239,   240,     0,     0,   241,     0,     0,     0,
     242,   243,     0,   244,     0,   245,     0,   246,   247,   248,
     249,     0,   250,     0,   251,     0,     0,     0,   252,   253,
       0,   254,     0,     0,   255,   256,     0,     0,     0,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,     0,     0,     0,     0,   266,   267,     0,     0,
       0,   268,     0,     0,     0,   269,   270,     0,   271,   272,
       0,     0,     0,   273,     0,     0,   274,   275,     0,     0,
     276,     0,     0,   277,   278,     0,     0,     0,     0,     0,
     279,   280,     0,   281,     0,   282,     0,   283,   284,     0,
       0,     0,     0,     0,     0,     0,   285,     0,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,     0,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,     0,     0,     0,
       0,   312,   313,   314,   315,   316,   317,     0,     0,   318,
     319,   320,     0,   321,     0,   322,     0,   323,   324,   325,
     326,   327,   328,   329,   330,   331,     0,     0,   332,   333,
       0,     0,   334,   335,   336,   337,   338,   339,   340,     0,
       0,     0,   341,   342,     0,     0,     0,   343,     0,   344,
     345,   346,     0,   347,   348,   349,     0,   350,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   351,   352,   353,
       0,   354,   355,     0,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,     0,     0,   366,   367,   368,     0,
     369,     0,   370,   371,   372,   373,   374,     0,   375,   376,
       0,   377,     0,     0,     0,   378,     0,     0,     0,   379,
     380,   381,   382,   383,     0,     0,   384,   385,   386,   387,
     388,     0,   389,   390,     0,   391,   392,   393,     0,     0,
     394,     0,   395,     0,   396,   397,     0,   398,   399,   400,
       0,   401,     0,     0,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,     0,   413,   414,     0,     0,
       0,   415,   416,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,     0,   422,   423,   424,   425,     0,
     426,   427,   428,   429,   430,     0,     0,     0,     0,     0,
     431,   432,   433,     0,   434,   435,     0,   436,   437,     0,
       0,   438,     0,     0,   439,   440,   441,   442,   443,   444,
       0,     0,   445,   446,     0,   447,   448,   449,   450,   451,
     452,     0,     0,   453,   454,   455,   456,     0,   457,   458,
       0,     0,   459,   460,     0,   461,   462,     0,     0,   463,
     464,     0,   465,   466,   467,   468,     0,     0,     0,     0,
     469,   470,   471,   472,   473,   474,     0,   475,   476,     0,
       0,     0,   477,   478,   479,   480,     0,   481,   482,     0,
     483,   484,     0,   485,   486,     0,     0,   487,     0,     0,
     488,     0,   489,     0,   490,   491,     0,     0,     0,     0,
       0,     0,   492,     0,     0,   493,     0,     0,     0,   494,
     495,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,   500,     0,   501,   502,   503,     0,     0,   504,     0,
     505,   506,     0,     0,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,  4642,   798,
     145,     0,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,     0,   168,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
     190,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
     203,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,   213,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,   218,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,     0,   350,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,   354,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,   390,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,     0,   398,
     399,   400,     0,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,     0,   426,   427,   428,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,     0,
     504,     0,   505,   506,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,   563,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,     0,   168,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
     190,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
     203,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,   213,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,   218,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,     0,     0,   231,   232,   233,   626,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   627,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,     0,   350,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,   354,   355,     0,   628,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,   390,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,     0,   398,
     399,   400,     0,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,     0,   426,   427,   428,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,     0,
     504,     0,   505,   506,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,   563,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,     0,   168,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
     190,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
     203,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,   213,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,   218,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,     0,   350,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,   354,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,   390,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,     0,   398,
     399,   400,     0,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,     0,   426,   427,   428,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,     0,
     504,     0,   505,   506,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,   798,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
       0,   167,     0,   168,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
     190,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
     203,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,   213,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,   218,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,     0,   350,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,   354,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,   390,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,     0,   398,
     399,   400,     0,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,     0,   426,   427,   428,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,     0,
     504,     0,   505,   506,   137,     0,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
     145,  2981,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   899,   900,   166,
       0,   167,     0,   168,   169,   170,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
     190,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
     203,     0,     0,     0,   901,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,   213,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,   218,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,   230,
     902,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,     0,   238,   239,   240,     0,     0,   241,     0,
       0,     0,   242,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   903,     0,   251,     0,     0,     0,
     252,   253,     0,   254,     0,     0,   255,   256,     0,     0,
       0,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,   267,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,     0,     0,     0,   273,     0,     0,   274,   275,
       0,     0,   276,     0,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   904,     0,   282,     0,   283,
     284,     0,     0,     0,     0,     0,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   905,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,     0,   350,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   351,
     352,   353,     0,   354,   355,     0,   356,   357,   906,   359,
     360,   361,   362,   363,   364,   365,     0,     0,   366,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,   390,     0,   391,   392,   393,
       0,     0,   394,     0,   395,     0,   396,   397,     0,   398,
     399,   400,     0,   401,     0,     0,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,     0,   413,   414,
       0,     0,     0,   415,   416,   417,   907,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,     0,   426,   427,   428,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,   440,   441,   442,
     443,   444,     0,     0,   445,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   908,
     476,     0,     0,     0,   477,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,   485,   486,     0,     0,   487,
       0,     0,   488,     0,   489,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,   500,     0,   501,   502,   503,     0,     0,
     504,     0,   505,   506,     0,   137,     0,   138,   139,   140,
     141,   142,     0,     0,   143,     0,     0,     0,   144,     0,
     909,   145,     0,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,     0,   167,     0,   168,   169,   170,     0,   171,   172,
       0,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,     0,   185,   186,     0,   187,   188,
     189,   190,   191,     0,     0,     0,   192,     0,     0,   193,
       0,   194,     0,   195,     0,   196,     0,   197,     0,     0,
     198,   199,   200,     0,     0,   201,     0,     0,     0,     0,
     202,   203,     0,     0,     0,     0,   204,   205,     0,   206,
       0,     0,     0,   207,     0,   208,   209,   210,   211,   212,
       0,     0,     0,   213,     0,     0,   214,   215,   216,     0,
       0,     0,   217,     0,   218,   219,     0,   220,   221,   222,
       0,     0,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,     0,     0,   231,   232,   233,   234,   235,     0,
       0,   236,   237,     0,   238,   239,   240,     0,     0,   241,
       0,     0,     0,   242,   243,     0,   244,     0,   245,     0,
     246,   247,   248,   249,     0,   250,     0,   251,     0,     0,
       0,   252,   253,     0,   254,     0,     0,   255,   256,     0,
       0,     0,   257,   258,   259,   260,     0,     0,   261,   262,
     263,   264,     0,     0,   265,     0,     0,     0,     0,   266,
     267,     0,     0,     0,   268,     0,     0,     0,   269,   270,
       0,   271,   272,     0,     0,     0,   273,     0,     0,   274,
     275,     0,     0,   276,     0,     0,   277,   278,   639,     0,
       0,     0,     0,   279,   280,     0,   281,     0,   282,     0,
     283,   284,     0,     0,     0,     0,     0,     0,     0,   285,
       0,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,     0,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
       0,     0,     0,     0,   312,   313,   314,   315,   316,   317,
       0,     0,   318,   319,   320,     0,   321,     0,   322,     0,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
       0,   332,   333,     0,     0,   334,   335,   336,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,     0,
     350,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     351,   352,   353,     0,   354,   355,     0,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,     0,     0,   366,
     367,   368,     0,   369,     0,   370,   371,   372,   373,   374,
       0,   375,   376,     0,   377,     0,     0,     0,   378,     0,
       0,     0,   379,   380,   381,   382,   383,     0,     0,   384,
     385,   386,   387,   388,     0,   389,   390,     0,   391,   392,
     393,     0,     0,   394,     0,   395,     0,   396,   397,     0,
     398,   399,   400,     0,   401,     0,     0,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,     0,   413,
     414,     0,     0,     0,   415,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,     0,   426,   427,   428,   429,   430,     0,     0,
       0,     0,     0,   431,   432,   433,     0,   434,   435,     0,
     436,   437,     0,     0,   438,     0,     0,   439,   440,   441,
     442,   443,   444,     0,     0,   445,   446,     0,   447,   448,
     449,   450,   451,   452,     0,     0,   453,   454,   455,   456,
       0,   457,   458,     0,     0,   459,   460,     0,   461,   462,
       0,   134,   463,   464,     0,   465,   466,   467,   468,     0,
       0,     0,     0,   469,   470,   471,   472,   473,   474,     0,
     475,   476,     0,     0,     0,   477,   478,   479,   480,     0,
     481,   482,     0,   483,   484,     0,   485,   486,     0,     0,
     487,     0,     0,   488,     0,   489,     0,   490,   491,     0,
       0,     0,     0,     0,     0,   492,     0,     0,   493,     0,
       0,     0,   494,   495,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,   500,     0,   501,   502,   503,     0,
       0,   504,     0,   505,   506,     0,   137,     0,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,  1389,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,     0,   168,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,     0,   187,
     188,   189,   190,   191,     0,     0,     0,   192,     0,     0,
     193,     0,   194,     0,   195,     0,   196,     0,   197,     0,
       0,   198,   199,   200,     0,     0,   201,     0,     0,     0,
       0,   202,   203,     0,     0,     0,     0,   204,   205,     0,
     206,     0,     0,     0,   207,     0,   208,   209,   210,   211,
     212,     0,     0,     0,   213,     0,     0,   214,   215,   216,
       0,     0,     0,   217,     0,   218,   219,     0,   220,   221,
     222,     0,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,     0,     0,   231,   232,   233,   234,   235,
       0,     0,   236,   237,     0,   238,   239,   240,     0,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,   245,
       0,   246,   247,   248,   249,     0,   250,     0,   251,     0,
       0,     0,   252,   253,     0,   254,     0,     0,   255,   256,
       0,     0,     0,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,   639,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
     338,   339,   340,     0,     0,     0,   341,   342,     0,     0,
       0,   343,     0,   344,   345,   346,     0,   347,   348,   349,
       0,   350,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,     0,   377,     0,     0,     0,   378,
       0,     0,     0,   379,   380,   381,   382,   383,     0,     0,
     384,   385,   386,   387,   388,     0,   389,   390,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
       0,   398,   399,   400,     0,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,     0,     0,   415,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,     0,   426,   427,   428,   429,   430,     0,
       0,     0,     0,     0,   431,   432,   433,     0,   434,   435,
       0,   436,   437,     0,     0,   438,     0,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,     0,   447,
     448,   449,   450,   451,   452,     0,     0,   453,   454,   455,
     456,     0,   457,   458,     0,     0,   459,   460,     0,   461,
     462,     0,   134,   463,   464,     0,   465,   466,   467,   468,
       0,     0,     0,     0,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
       0,     0,     0,     0,     0,     0,   492,     0,     0,   493,
       0,     0,     0,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,     0,   504,     0,   505,   506,     0,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,     0,  1731,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     899,   900,   166,     0,   167,     0,   168,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,     0,
     187,   188,   189,   190,   191,     0,     0,     0,   192,     0,
       0,   193,     0,   194,     0,   195,     0,   196,     0,   197,
       0,     0,   198,   199,   200,     0,     0,   201,     0,     0,
       0,     0,   202,   203,     0,     0,     0,   901,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,     0,     0,   231,   232,   233,   234,
     235,     0,     0,   236,   237,     0,   238,   239,   240,     0,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
     245,     0,   246,   247,   248,   249,     0,   903,     0,   251,
       0,     0,     0,   252,   253,     0,   254,     0,     0,   255,
     256,     0,     0,     0,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   904,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   905,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,     0,   350,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,     0,   354,   355,     0,   356,
     357,   906,   359,   360,   361,   362,   363,   364,   365,     0,
       0,   366,   367,   368,     0,   369,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,     0,     0,     0,
     378,     0,     0,     0,   379,   380,   381,   382,   383,     0,
       0,   384,   385,   386,   387,   388,     0,   389,   390,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,     0,   398,   399,   400,     0,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   907,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,     0,   426,   427,   428,   429,   430,
       0,     0,     0,     0,     0,   431,   432,   433,     0,   434,
     435,     0,   436,   437,     0,     0,   438,     0,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,     0,
     447,   448,   449,   450,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   457,   458,     0,     0,   459,   460,     0,
     461,   462,     0,     0,   463,   464,     0,   465,   466,   467,
     468,     0,     0,     0,     0,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,   477,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   490,
     491,     0,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   504,     0,   505,   506,     0,   137,     0,
     138,   139,   140,   141,   142,     0,     0,   143,     0,     0,
       0,   144,     0,   909,   145,     0,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,     0,   167,     0,   168,   169,   170,
       0,   171,   172,     0,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,     0,   185,   186,
       0,   187,   188,   189,   190,   191,     0,     0,     0,   192,
       0,     0,   193,     0,   194,     0,   195,     0,   196,     0,
     197,     0,     0,   198,   199,   200,     0,     0,   201,     0,
       0,     0,     0,   202,   203,     0,     0,     0,     0,   204,
     205,     0,   206,     0,     0,     0,   207,     0,   208,   209,
     210,   211,   212,     0,     0,     0,   213,     0,     0,   214,
     215,   216,     0,     0,     0,   217,     0,   218,   219,     0,
     220,   221,   222,     0,     0,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,     0,     0,   231,   232,   233,
     234,   235,     0,     0,   236,   237,     0,   238,   239,   240,
       0,     0,   241,     0,     0,     0,   242,   243,     0,   244,
       0,   245,     0,   246,   247,   248,   249,     0,   250,     0,
     251,     0,     0,     0,   252,   253,     0,   254,     0,     0,
     255,   256,     0,     0,     0,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,     0,     0,
       0,     0,   266,   267,     0,     0,     0,   268,     0,     0,
       0,   269,   270,     0,   271,   272,     0,     0,     0,   273,
       0,     0,   274,   275,     0,     0,   276,     0,     0,   277,
     278,   639,     0,     0,     0,     0,   279,   280,     0,   281,
       0,   282,     0,   283,   284,     0,     0,     0,     0,     0,
       0,     0,   285,     0,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,     0,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,     0,     0,     0,     0,   312,   313,   314,
     315,   316,   317,     0,     0,   318,   319,   320,     0,   321,
       0,   322,     0,   323,   324,   325,   326,   327,   328,   329,
     330,   331,     0,     0,   332,   333,     0,     0,   334,   335,
     336,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,     0,   350,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   351,   352,   353,     0,   354,   355,     0,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
       0,     0,   366,   367,   368,     0,   369,     0,   370,   371,
     372,   373,   374,     0,   375,   376,     0,   377,     0,     0,
       0,   378,     0,     0,     0,   379,   380,   381,   382,   383,
       0,     0,   384,   385,   386,   387,   388,     0,   389,   390,
       0,   391,   392,   393,     0,     0,   394,     0,   395,     0,
     396,   397,     0,   398,   399,   400,     0,   401,     0,     0,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,     0,   413,   414,     0,     0,     0,   415,   416,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
       0,   422,   423,   424,   425,     0,   426,   427,   428,   429,
     430,     0,     0,     0,     0,     0,   431,   432,   433,     0,
     434,   435,     0,   436,   437,     0,     0,   438,     0,     0,
     439,   440,   441,   442,   443,   444,     0,     0,   445,   446,
       0,   447,   448,   449,   450,   451,   452,     0,     0,   453,
     454,   455,   456,     0,   457,   458,     0,     0,   459,   460,
       0,   461,   462,     0,   134,   463,   464,     0,   465,   466,
     467,   468,     0,     0,     0,     0,   469,   470,   471,   472,
     473,   474,     0,   475,   476,     0,     0,     0,   477,   478,
     479,   480,     0,   481,   482,     0,   483,   484,     0,   485,
     486,     0,     0,   487,     0,     0,   488,     0,   489,     0,
     490,   491,     0,     0,     0,     0,     0,     0,   492,     0,
       0,   493,     0,     0,     0,   494,   495,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,   500,     0,   501,
     502,   503,     0,     0,   504,     0,   505,   506,     0,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,  3537,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,  1270,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,     0,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,  1271,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,     0,   168,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,     0,
       0,   192,     0,     0,   193,     0,   194,     0,   195,     0,
     196,     0,   197,     0,     0,   198,   199,   200,     0,     0,
     201,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,   204,   205,     0,   206,     0,     0,     0,   207,     0,
     208,   209,   210,   211,   212,     0,     0,     0,   213,     0,
       0,   214,   215,   216,     0,     0,     0,   217,     0,   218,
     219,     0,   220,   221,   222,     0,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,     0,   238,
     239,   240,     0,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,   252,   253,     0,   254,
       0,     0,   255,   256,     0,     0,     0,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     341,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,   349,     0,   350,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,   354,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,   367,   368,     0,   369,     0,
     370,   371,   372,   373,   374,     0,   375,   376,     0,   377,
       0,     0,     0,   378,     0,     0,     0,   379,   380,   381,
     382,   383,     0,     0,   384,   385,   386,   387,   388,     0,
     389,   390,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,     0,   398,   399,   400,     0,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,     0,     0,   415,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,     0,   426,   427,
     428,   429,   430,     0,     0,     0,     0,     0,   431,   432,
     433,     0,   434,   435,     0,   436,   437,     0,     0,   438,
       0,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,     0,   447,   448,   449,   450,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   457,   458,     0,     0,
     459,   460,     0,   461,   462,     0,     0,   463,   464,     0,
     465,   466,   467,   468,     0,     0,     0,     0,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
     477,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   490,   491,     0,     0,     0,     0,     0,     0,
     492,     0,     0,   493,     0,     0,     0,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   505,   506,
     137,     0,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,  1271,     0,   146,   147,
     148,   149,   150,     0,     0,  -381,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,     0,     0,     0,     0,   161,  4024,     0,   162,
     163,     0,   164,     0,     0,     0,     0,   167,     0,   168,
     169,  4025,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,     0,   179,     0,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,     0,   191,     0,     0,
       0,   192,     0,     0,   193,     0,   194,     0,   195,     0,
     196,     0,   197,     0,     0,   198,   199,   200,     0,     0,
     201,     0,     0,     0,     0,   202,     0,     0,     0,     0,
       0,   204,   205,     0,   206,     0,     0,     0,   207,     0,
     208,   209,   210,   211,   212,     0,     0,     0,     0,     0,
       0,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     219,     0,   220,   221,   222,     0,     0,   223,   224,     0,
     225,   226,   227,   228,   229,     0,     0,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,  4026,   238,
     239,   240,     0,     0,     0,     0,     0,     0,     0,   243,
       0,   244,     0,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,     0,   253,     0,     0,
       0,     0,     0,   256,     0,     0,     0,   257,   258,   259,
     260,  4027,     0,   261,   262,   263,   264,     0,     0,   265,
       0,     0,     0,     0,   266,     0,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,  4028,     0,
       0,   273,     0,     0,     0,   275,     0,     0,   276,  4029,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,  -336,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
       0,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,  4030,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   352,   353,     0,     0,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,     0,     0,   367,   368,     0,   369,     0,
     370,   371,   372,   373,   374,     0,   375,   376,     0,   377,
       0,     0,     0,   378,     0,     0,     0,   379,   380,   381,
     382,   383,     0,     0,   384,   385,   386,   387,   388,     0,
     389,     0,     0,   391,     0,   393,  -336,     0,   394,     0,
       0,     0,   396,     0,     0,   398,   399,   400,  4031,   401,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
       0,   411,   412,     0,   413,     0,     0,     0,     0,   415,
     416,   417,   418,     0,     0,     0,     0,   420,     0,     0,
       0,   421,     0,     0,   423,     0,   425,     0,   426,     0,
       0,   429,   430,     0,     0,     0,     0,     0,   431,   432,
     433,     0,   434,   435,     0,   436,   437,     0,     0,   438,
       0,     0,   439,     0,   441,   442,   443,   444,     0,     0,
       0,   446,     0,   447,   448,   449,   450,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   457,   458,     0,     0,
     459,   460,     0,   461,   462,     0,     0,   463,   464,     0,
     465,   466,   467,   468,     0,     0,     0,     0,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
       0,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,     0,     0,     0,     0,   487,     0,     0,   488,     0,
       0,     0,   490,   491,     0,     0,     0,     0,     0,     0,
     492,     0,     0,   493,     0,     0,     0,   494,   495,   496,
     497,   498,     0,     0,  -336,     0,     0,     0,   499,     0,
       0,   501,     0,   503,     0,     0,   504,   137,     0,   138,
     139,   140,   141,   142,     0,     0,   143,     0,     0,     0,
     144,  4634,     0,   145,     0,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,     0,   167,     0,   168,   169,   170,     0,
     171,   172,     0,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,     0,   185,   186,     0,
     187,   188,   189,   190,   191,     0,     0,     0,   192,     0,
       0,   193,     0,   194,     0,   195,     0,   196,     0,   197,
       0,     0,   198,   199,   200,     0,     0,   201,     0,     0,
       0,     0,   202,   203,     0,     0,     0,     0,   204,   205,
       0,   206,     0,     0,     0,   207,     0,   208,   209,   210,
     211,   212,     0,     0,     0,   213,     0,     0,   214,   215,
     216,     0,     0,     0,   217,     0,   218,   219,     0,   220,
     221,   222,     0,     0,   223,   224,     0,   225,   226,   227,
     228,   229,   230,     0,     0,     0,   231,   232,   233,   234,
     235,     0,     0,   236,   237,     0,   238,   239,   240,     0,
       0,   241,     0,     0,     0,   242,   243,     0,   244,     0,
     245,     0,   246,   247,   248,   249,     0,   250,     0,   251,
       0,     0,     0,   252,   253,     0,   254,     0,     0,   255,
     256,     0,     0,     0,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,     0,   265,     0,     0,     0,
       0,   266,   267,     0,     0,     0,   268,     0,     0,     0,
     269,   270,     0,   271,   272,     0,     0,     0,   273,     0,
       0,   274,   275,     0,     0,   276,     0,     0,   277,   278,
       0,     0,     0,     0,     0,   279,   280,     0,   281,     0,
     282,     0,   283,   284,     0,     0,     0,     0,     0,     0,
       0,   285,     0,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
       0,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,     0,     0,     0,     0,   312,   313,   314,   315,
     316,   317,     0,     0,   318,   319,   320,     0,   321,     0,
     322,     0,   323,   324,   325,   326,   327,   328,   329,   330,
     331,     0,     0,   332,   333,     0,     0,   334,   335,   336,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,     0,   350,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   351,   352,   353,     0,   354,   355,     0,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,     0,
       0,   366,   367,   368,     0,   369,     0,   370,   371,   372,
     373,   374,     0,   375,   376,     0,   377,     0,     0,     0,
     378,     0,     0,     0,   379,   380,   381,   382,   383,     0,
       0,   384,   385,   386,   387,   388,     0,   389,   390,     0,
     391,   392,   393,     0,     0,   394,     0,   395,     0,   396,
     397,     0,   398,   399,   400,     0,   401,     0,     0,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
       0,   413,   414,     0,     0,     0,   415,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,     0,   426,   427,   428,   429,   430,
       0,     0,     0,     0,     0,   431,   432,   433,     0,   434,
     435,     0,   436,   437,     0,     0,   438,     0,     0,   439,
     440,   441,   442,   443,   444,     0,     0,   445,   446,     0,
     447,   448,   449,   450,   451,   452,     0,     0,   453,   454,
     455,   456,     0,   457,   458,     0,     0,   459,   460,     0,
     461,   462,     0,     0,   463,   464,     0,   465,   466,   467,
     468,     0,     0,     0,     0,   469,   470,   471,   472,   473,
     474,     0,   475,   476,     0,     0,     0,   477,   478,   479,
     480,     0,   481,   482,     0,   483,   484,     0,   485,   486,
       0,     0,   487,     0,     0,   488,     0,   489,     0,   490,
     491,     0,     0,     0,     0,     0,     0,   492,     0,     0,
     493,     0,     0,     0,   494,   495,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,   500,     0,   501,   502,
     503,     0,     0,   504,     0,   505,   506,     0,     0,     0,
     137,  2134,   138,   139,   140,   141,   142,     0,     0,   143,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,     0,   167,     0,   168,
     169,   170,     0,   171,   172,     0,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,     0,
     185,   186,     0,   187,   188,   189,   190,   191,     0,     0,
       0,   192,     0,     0,   193,     0,   194,     0,   195,     0,
     196,     0,   197,     0,     0,   198,   199,   200,     0,     0,
     201,     0,     0,     0,     0,   202,   203,     0,     0,     0,
       0,   204,   205,     0,   206,     0,     0,     0,   207,     0,
     208,   209,   210,   211,   212,     0,     0,     0,   213,     0,
       0,   214,   215,   216,     0,     0,     0,   217,     0,   218,
     219,     0,   220,   221,   222,     0,     0,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,     0,     0,   231,
     232,   233,   234,   235,     0,     0,   236,   237,     0,   238,
     239,   240,     0,     0,   241,     0,     0,     0,   242,   243,
       0,   244,     0,   245,     0,   246,   247,   248,   249,     0,
     250,     0,   251,     0,     0,     0,   252,   253,     0,   254,
       0,     0,   255,   256,     0,     0,     0,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
       0,     0,     0,     0,   266,   267,     0,     0,     0,   268,
       0,     0,     0,   269,   270,     0,   271,   272,     0,     0,
       0,   273,     0,     0,   274,   275,     0,     0,   276,     0,
       0,   277,   278,     0,     0,     0,     0,     0,   279,   280,
       0,   281,     0,   282,     0,   283,   284,     0,     0,     0,
       0,     0,     0,     0,   285,     0,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,     0,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,     0,     0,     0,     0,   312,
     313,   314,   315,   316,   317,     0,     0,   318,   319,   320,
       0,   321,     0,   322,     0,   323,   324,   325,   326,   327,
     328,   329,   330,   331,     0,     0,   332,   333,     0,     0,
     334,   335,   336,   337,   338,   339,   340,     0,     0,     0,
     341,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,   349,     0,   350,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   351,   352,   353,     0,   354,
     355,     0,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,     0,     0,   366,   367,   368,     0,   369,     0,
     370,   371,   372,   373,   374,     0,   375,   376,     0,   377,
       0,     0,     0,   378,     0,     0,     0,   379,   380,   381,
     382,   383,     0,     0,   384,   385,   386,   387,   388,     0,
     389,   390,     0,   391,   392,   393,     0,     0,   394,     0,
     395,     0,   396,   397,     0,   398,   399,   400,     0,   401,
       0,     0,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,     0,   413,   414,     0,     0,     0,   415,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,     0,   426,   427,
     428,   429,   430,     0,     0,     0,     0,     0,   431,   432,
     433,     0,   434,   435,     0,   436,   437,     0,     0,   438,
       0,     0,   439,   440,   441,   442,   443,   444,     0,     0,
     445,   446,     0,   447,   448,   449,   450,   451,   452,     0,
       0,   453,   454,   455,   456,     0,   457,   458,     0,     0,
     459,   460,     0,   461,   462,     0,     0,   463,   464,     0,
     465,   466,   467,   468,     0,     0,     0,     0,   469,   470,
     471,   472,   473,   474,     0,   475,   476,     0,     0,     0,
     477,   478,   479,   480,     0,   481,   482,     0,   483,   484,
       0,   485,   486,     0,     0,   487,     0,     0,   488,     0,
     489,     0,   490,   491,     0,     0,     0,     0,     0,     0,
     492,     0,     0,   493,     0,     0,     0,   494,   495,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,   500,
       0,   501,   502,   503,     0,     0,   504,     0,   505,   506,
       0,     0,     0,   137,  2848,   138,   139,   140,   141,   142,
       0,     0,   143,     0,     0,     0,   144,     0,     0,   145,
       0,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,     0,
     167,     0,   168,   169,   170,     0,   171,   172,     0,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,     0,   185,   186,     0,   187,   188,   189,   190,
     191,     0,     0,     0,   192,     0,     0,   193,     0,   194,
       0,   195,     0,   196,     0,   197,     0,     0,   198,   199,
     200,     0,     0,   201,     0,     0,     0,     0,   202,   203,
       0,     0,     0,     0,   204,   205,     0,   206,     0,     0,
       0,   207,     0,   208,   209,   210,   211,   212,     0,     0,
       0,   213,     0,     0,   214,   215,   216,     0,     0,     0,
     217,     0,   218,   219,     0,   220,   221,   222,     0,     0,
     223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
       0,     0,   231,   232,   233,   234,   235,     0,     0,   236,
     237,     0,   238,   239,   240,     0,     0,   241,     0,     0,
       0,   242,   243,     0,   244,     0,   245,     0,   246,   247,
     248,   249,     0,   250,     0,   251,     0,     0,     0,   252,
     253,     0,   254,     0,     0,   255,   256,     0,     0,     0,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,     0,     0,     0,     0,   266,   267,     0,
       0,     0,   268,     0,     0,     0,   269,   270,     0,   271,
     272,     0,     0,     0,   273,     0,     0,   274,   275,     0,
       0,   276,     0,     0,   277,   278,     0,     0,     0,     0,
       0,   279,   280,     0,   281,     0,   282,     0,   283,   284,
       0,     0,     0,     0,     0,     0,     0,   285,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,     0,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,     0,     0,
       0,     0,   312,   313,   314,   315,   316,   317,     0,     0,
     318,   319,   320,     0,   321,     0,   322,     0,   323,   324,
     325,   326,   327,   328,   329,   330,   331,     0,     0,   332,
     333,     0,     0,   334,   335,   336,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,     0,   350,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   351,   352,
     353,     0,   354,   355,     0,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,     0,     0,   366,   367,   368,
       0,   369,     0,   370,   371,   372,   373,   374,     0,   375,
     376,     0,   377,     0,     0,     0,   378,     0,     0,     0,
     379,   380,   381,   382,   383,     0,     0,   384,   385,   386,
     387,   388,     0,   389,   390,     0,   391,   392,   393,     0,
       0,   394,     0,   395,     0,   396,   397,     0,   398,   399,
     400,     0,   401,     0,     0,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,     0,   413,   414,     0,
       0,     0,   415,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
       0,   426,   427,   428,   429,   430,     0,     0,     0,     0,
       0,   431,   432,   433,     0,   434,   435,     0,   436,   437,
       0,     0,   438,     0,     0,   439,   440,   441,   442,   443,
     444,     0,     0,   445,   446,     0,   447,   448,   449,   450,
     451,   452,     0,     0,   453,   454,   455,   456,     0,   457,
     458,     0,     0,   459,   460,     0,   461,   462,     0,     0,
     463,   464,     0,   465,   466,   467,   468,     0,     0,     0,
       0,   469,   470,   471,   472,   473,   474,     0,   475,   476,
       0,     0,     0,   477,   478,   479,   480,     0,   481,   482,
       0,   483,   484,     0,   485,   486,     0,     0,   487,     0,
       0,   488,     0,   489,     0,   490,   491,     0,     0,     0,
       0,     0,     0,   492,     0,     0,   493,     0,     0,     0,
     494,   495,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,   500,     0,   501,   502,   503,     0,     0,   504,
       0,   505,   506,     0,     0,     0,   137,  3495,   138,   139,
     140,   141,   142,     0,     0,   143,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,     0,   167,     0,   168,   169,   170,     0,   171,
     172,     0,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,     0,   185,   186,     0,   187,
     188,   189,   190,   191,     0,     0,     0,   192,     0,     0,
     193,     0,   194,     0,   195,     0,   196,     0,   197,     0,
       0,   198,   199,   200,     0,     0,   201,     0,     0,     0,
       0,   202,   203,     0,     0,     0,     0,   204,   205,     0,
     206,     0,     0,     0,   207,     0,   208,   209,   210,   211,
     212,     0,     0,     0,   213,     0,     0,   214,   215,   216,
       0,     0,     0,   217,     0,   218,   219,     0,   220,   221,
     222,     0,     0,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,     0,     0,   231,   232,   233,   234,   235,
       0,     0,   236,   237,     0,   238,   239,   240,     0,     0,
     241,     0,     0,     0,   242,   243,     0,   244,     0,   245,
       0,   246,   247,   248,   249,     0,   250,     0,   251,     0,
       0,     0,   252,   253,     0,   254,     0,     0,   255,   256,
       0,     0,     0,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,     0,     0,     0,     0,
     266,   267,     0,     0,     0,   268,     0,     0,     0,   269,
     270,     0,   271,   272,     0,     0,     0,   273,     0,     0,
     274,   275,     0,     0,   276,     0,     0,   277,   278,     0,
       0,     0,     0,     0,   279,   280,     0,   281,     0,   282,
       0,   283,   284,     0,     0,     0,     0,     0,     0,     0,
     285,     0,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,     0,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,     0,     0,     0,     0,   312,   313,   314,   315,   316,
     317,     0,     0,   318,   319,   320,     0,   321,     0,   322,
       0,   323,   324,   325,   326,   327,   328,   329,   330,   331,
       0,     0,   332,   333,     0,     0,   334,   335,   336,   337,
     338,   339,   340,     0,     0,     0,   341,   342,     0,     0,
       0,   343,     0,   344,   345,   346,     0,   347,   348,   349,
       0,   350,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   351,   352,   353,     0,   354,   355,     0,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,     0,     0,
     366,   367,   368,     0,   369,     0,   370,   371,   372,   373,
     374,     0,   375,   376,     0,   377,     0,     0,     0,   378,
       0,     0,     0,   379,   380,   381,   382,   383,     0,     0,
     384,   385,   386,   387,   388,     0,   389,   390,     0,   391,
     392,   393,     0,     0,   394,     0,   395,     0,   396,   397,
       0,   398,   399,   400,     0,   401,     0,     0,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,     0,
     413,   414,     0,     0,     0,   415,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,     0,   426,   427,   428,   429,   430,     0,
       0,     0,     0,     0,   431,   432,   433,     0,   434,   435,
       0,   436,   437,     0,     0,   438,     0,     0,   439,   440,
     441,   442,   443,   444,     0,     0,   445,   446,     0,   447,
     448,   449,   450,   451,   452,     0,     0,   453,   454,   455,
     456,     0,   457,   458,     0,     0,   459,   460,     0,   461,
     462,     0,     0,   463,   464,     0,   465,   466,   467,   468,
       0,     0,     0,     0,   469,   470,   471,   472,   473,   474,
       0,   475,   476,     0,     0,     0,   477,   478,   479,   480,
       0,   481,   482,     0,   483,   484,     0,   485,   486,     0,
       0,   487,     0,     0,   488,     0,   489,     0,   490,   491,
       0,     0,     0,     0,     0,     0,   492,     0,     0,   493,
       0,     0,     0,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,   500,     0,   501,   502,   503,
       0,     0,   504,     0,   505,   506,     0,     0,     0,   137,
    3543,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,  2026,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,  2027,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,  2028,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,  2029,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,  1036,  1037,     0,   341,
     342,     0,     0,  2030,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,  4620,   588,  4621,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,  2031,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,  1378,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,  1379,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,  1380,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   639,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,  1381,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,  1391,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,  1392,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   639,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,  1933,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,  1934,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,   752,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,  1935,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,  1378,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,  1379,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   639,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,   993,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   639,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,  1414,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   639,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,   970,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,   971,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   972,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,  2397,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   639,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,  1378,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   639,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,   639,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,  2844,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,  4524,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,  4525,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,   588,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,  1073,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,   901,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,  1908,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,  2040,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,   901,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,  2998,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,   134,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,  3279,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,  3288,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,  3312,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,   145,     0,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,     0,   167,     0,   168,   169,
     170,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,   190,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,   203,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,   213,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,   218,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,  1831,
     240,     0,     0,   241,     0,     0,     0,   242,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,   252,   253,     0,   254,     0,
       0,   255,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,   267,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,   274,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
    1832,   336,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,   350,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   351,   352,   353,     0,   354,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,     0,     0,   366,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
     390,     0,   391,   392,   393,     0,     0,   394,     0,   395,
       0,   396,   397,     0,   398,   399,   400,     0,   401,     0,
       0,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,     0,   413,   414,     0,     0,     0,   415,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,     0,   426,   427,   428,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,   477,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
     485,   486,     0,     0,   487,     0,     0,   488,     0,   489,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,   500,     0,
     501,   502,   503,     0,     0,   504,     0,   505,   506,   137,
       0,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,     0,     0,  -381,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,  4024,     0,   162,   163,
       0,   164,     0,     0,     0,     0,   167,     0,   168,   169,
    4025,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,     0,   179,     0,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,     0,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,     0,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,     0,     0,     0,
     214,   215,   216,     0,  -351,  -351,   217,     0,  -351,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,     0,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,  4026,   238,   239,
     240,     0,     0,     0,     0,     0,     0,     0,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,     0,   253,     0,     0,     0,
       0,     0,   256,     0,     0,     0,   257,   258,   259,   260,
    4027,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,  4028,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,  4029,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
    -336,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,  4030,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   352,   353,     0,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
       0,     0,   391,     0,   393,  -336,     0,   394,     0,     0,
       0,   396,     0,     0,   398,   399,   400,  4031,   401,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,     0,
     411,   412,     0,   413,     0,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,     0,   420,     0,     0,     0,
     421,     0,     0,   423,     0,   425,     0,   426,     0,     0,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,     0,   441,   442,   443,   444,     0,     0,     0,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,     0,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,     0,     0,     0,   487,     0,     0,   488,     0,     0,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,  -336,     0,     0,     0,   499,     0,     0,
     501,     0,   503,     0,   137,   504,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,     0,     0,  -381,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,  4024,     0,   162,   163,     0,   164,     0,     0,     0,
       0,   167,     0,   168,   169,  4025,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,     0,   179,     0,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
       0,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
       0,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,     0,     0,     0,   214,   215,   216,     0,  -372,
       0,   217,     0,  -372,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,     0,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4026,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4027,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4028,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4029,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -336,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,     0,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,  4030,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,     0,     0,   391,     0,   393,
    -336,     0,   394,     0,     0,     0,   396,     0,     0,   398,
     399,   400,  4031,   401,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,     0,   411,   412,     0,   413,     0,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
       0,   420,     0,     0,     0,   421,     0,     0,   423,     0,
     425,     0,   426,     0,     0,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,     0,   441,   442,
     443,   444,     0,     0,     0,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,     0,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,     0,     0,     0,   487,
       0,     0,   488,     0,     0,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,  -372,     0,  -336,     0,
       0,     0,   499,     0,     0,   501,     0,   503,     0,   137,
     504,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,     0,     0,  -381,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,  4024,     0,   162,   163,
       0,   164,     0,     0,     0,     0,   167,     0,   168,   169,
    4025,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,     0,   179,     0,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,     0,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,     0,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,     0,     0,     0,
     214,   215,   216,     0,  -369,     0,   217,     0,  -369,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,     0,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,  4026,   238,   239,
     240,     0,     0,     0,     0,     0,     0,     0,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,     0,   253,     0,     0,     0,
       0,     0,   256,     0,     0,     0,   257,   258,   259,   260,
    4027,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,  4028,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,  4029,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
    -336,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,  4030,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   352,   353,     0,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
       0,     0,   391,     0,   393,  -336,     0,   394,     0,     0,
       0,   396,     0,     0,   398,   399,   400,  4031,   401,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,     0,
     411,   412,     0,   413,     0,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,     0,   420,     0,     0,     0,
     421,     0,     0,   423,     0,   425,     0,   426,     0,     0,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,     0,   441,   442,   443,   444,     0,     0,     0,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,     0,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,     0,     0,     0,   487,     0,     0,   488,     0,     0,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,  -369,     0,  -336,     0,     0,     0,   499,     0,     0,
     501,     0,   503,     0,   137,   504,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,     0,     0,  -381,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,  4024,     0,   162,   163,     0,   164,     0,     0,     0,
       0,   167,     0,   168,   169,  4025,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,     0,   179,     0,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
       0,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
       0,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,     0,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,  4400,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,     0,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4026,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4027,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4028,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4029,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -336,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,     0,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,  4030,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,     0,     0,   391,     0,   393,
    -336,     0,   394,     0,     0,     0,   396,     0,     0,   398,
     399,   400,  4031,   401,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,     0,   411,   412,     0,   413,     0,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
       0,   420,     0,     0,     0,   421,     0,     0,   423,     0,
     425,     0,   426,     0,     0,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,     0,   441,   442,
     443,   444,     0,     0,     0,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,     0,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,     0,     0,     0,   487,
       0,     0,   488,     0,     0,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,  -336,     0,
       0,     0,   499,     0,     0,   501,     0,   503,     0,   137,
     504,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,     0,     0,  -381,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,  4024,     0,   162,   163,
       0,   164,     0,     0,     0,     0,   167,     0,   168,   169,
    4025,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,     0,   179,     0,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,     0,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,     0,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,     0,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,  -374,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,     0,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,  4026,   238,   239,
     240,     0,     0,     0,     0,     0,     0,     0,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,     0,   253,     0,     0,     0,
       0,     0,   256,     0,     0,     0,   257,   258,   259,   260,
    4027,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,  4028,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,  4029,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
    -336,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,  4030,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   352,   353,     0,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
       0,     0,   391,     0,   393,  -336,     0,   394,     0,     0,
       0,   396,     0,     0,   398,   399,   400,  4031,   401,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,     0,
     411,   412,     0,   413,     0,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,     0,   420,     0,     0,     0,
     421,     0,     0,   423,     0,   425,     0,   426,     0,     0,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,     0,   441,   442,   443,   444,     0,     0,     0,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,     0,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,     0,     0,     0,   487,     0,     0,   488,     0,     0,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,  -336,     0,     0,     0,   499,     0,     0,
     501,     0,   503,     0,   137,   504,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,     0,     0,  -381,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,  4024,     0,   162,   163,     0,   164,     0,     0,     0,
       0,   167,     0,   168,   169,  4025,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,     0,   179,     0,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
       0,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
       0,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,     0,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,  4529,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,     0,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4026,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4027,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4028,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4029,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -336,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,     0,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,  4030,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,     0,     0,   391,     0,   393,
    -336,     0,   394,     0,     0,     0,   396,     0,     0,   398,
     399,   400,  4031,   401,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,     0,   411,   412,     0,   413,     0,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
       0,   420,     0,     0,     0,   421,     0,     0,   423,     0,
     425,     0,   426,     0,     0,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,     0,   441,   442,
     443,   444,     0,     0,     0,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,     0,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,     0,     0,     0,   487,
       0,     0,   488,     0,     0,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,  -336,     0,
       0,     0,   499,     0,     0,   501,     0,   503,     0,   137,
     504,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,     0,     0,  -381,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,  4024,     0,   162,   163,
       0,   164,     0,     0,     0,     0,   167,     0,   168,   169,
    4025,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,     0,   179,     0,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,     0,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,     0,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,     0,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,  4587,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,     0,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,  4026,   238,   239,
     240,     0,     0,     0,     0,     0,     0,     0,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,     0,   253,     0,     0,     0,
       0,     0,   256,     0,     0,     0,   257,   258,   259,   260,
    4027,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,  4028,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,  4029,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
    -336,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,  4030,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   352,   353,     0,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
       0,     0,   391,     0,   393,  -336,     0,   394,     0,     0,
       0,   396,     0,     0,   398,   399,   400,  4031,   401,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,     0,
     411,   412,     0,   413,     0,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,     0,   420,     0,     0,     0,
     421,     0,     0,   423,     0,   425,     0,   426,     0,     0,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,     0,   441,   442,   443,   444,     0,     0,     0,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,     0,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,     0,     0,     0,   487,     0,     0,   488,     0,     0,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,  -336,     0,     0,     0,   499,     0,     0,
     501,     0,   503,     0,   137,   504,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,     0,     0,  -381,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,  4024,     0,   162,   163,     0,   164,     0,     0,     0,
       0,   167,     0,   168,   169,  4025,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,     0,   179,     0,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
       0,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
       0,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,     0,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,  -355,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,     0,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4026,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4027,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4028,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4029,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -336,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,     0,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,  4030,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,     0,     0,   391,     0,   393,
    -336,     0,   394,     0,     0,     0,   396,     0,     0,   398,
     399,   400,  4031,   401,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,     0,   411,   412,     0,   413,     0,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
       0,   420,     0,     0,     0,   421,     0,     0,   423,     0,
     425,     0,   426,     0,     0,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,     0,   441,   442,
     443,   444,     0,     0,     0,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,     0,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,     0,     0,     0,   487,
       0,     0,   488,     0,     0,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,  -336,     0,
       0,     0,   499,     0,     0,   501,     0,   503,     0,   137,
     504,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,     0,     0,  -381,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,  4024,     0,   162,   163,
       0,   164,     0,     0,     0,     0,   167,     0,   168,   169,
    4025,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,     0,   179,     0,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,     0,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,     0,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,     0,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,     0,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,  4026,   238,   239,
     240,     0,     0,     0,     0,     0,     0,     0,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,     0,   253,     0,     0,     0,
       0,     0,   256,     0,     0,     0,   257,   258,   259,   260,
    4027,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,  4028,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,  4029,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
    -336,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,  4030,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   352,   353,     0,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
       0,     0,   391,     0,   393,  -336,     0,   394,     0,     0,
       0,   396,     0,     0,   398,   399,   400,  4031,   401,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,     0,
     411,   412,     0,   413,     0,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,     0,   420,     0,     0,     0,
     421,     0,     0,   423,     0,   425,     0,   426,     0,     0,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,     0,   441,   442,   443,   444,     0,     0,     0,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,     0,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,     0,     0,     0,   487,     0,     0,   488,     0,     0,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,  -336,     0,     0,     0,   499,     0,     0,
     501,     0,   503,     0,   137,   504,   138,   139,   140,   141,
     142,     0,     0,   143,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,     0,     0,  -381,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,  4024,     0,   162,   163,     0,   164,     0,     0,     0,
       0,   167,     0,   168,   169,  4025,     0,   171,   172,     0,
     173,   174,     0,   175,   176,   177,     0,   179,     0,   181,
     182,   183,   184,     0,   185,   186,     0,   187,   188,   189,
       0,   191,     0,     0,     0,   192,     0,     0,   193,     0,
     194,     0,   195,     0,   196,     0,   197,     0,     0,   198,
     199,   200,     0,     0,   201,     0,     0,     0,     0,   202,
       0,     0,     0,     0,     0,   204,   205,     0,   206,     0,
       0,     0,   207,     0,   208,   209,   210,   211,   212,     0,
       0,     0,     0,     0,     0,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   219,     0,   220,   221,   222,     0,
       0,   223,   224,     0,   225,   226,   227,   228,   229,     0,
       0,     0,     0,   231,   232,   233,   234,   235,     0,     0,
     236,   237,  4026,   238,   239,   240,     0,     0,     0,     0,
       0,     0,     0,   243,     0,   244,     0,   245,     0,   246,
     247,   248,   249,     0,   250,     0,   251,     0,     0,     0,
       0,   253,     0,     0,     0,     0,     0,   256,     0,     0,
       0,   257,   258,   259,   260,  4027,     0,   261,   262,   263,
     264,     0,     0,   265,     0,     0,     0,     0,   266,     0,
       0,     0,     0,   268,     0,     0,     0,   269,   270,     0,
     271,   272,  4028,     0,     0,   273,     0,     0,     0,   275,
       0,     0,   276,  4029,     0,   277,   278,     0,     0,     0,
       0,     0,   279,   280,     0,   281,     0,   282,     0,   283,
     284,     0,     0,     0,     0,  -336,     0,     0,   285,     0,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,     0,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,     0,
       0,     0,     0,   312,   313,   314,   315,   316,   317,     0,
       0,   318,   319,   320,     0,   321,     0,   322,     0,   323,
     324,   325,   326,   327,   328,   329,   330,   331,     0,     0,
     332,   333,     0,     0,   334,   335,   336,   337,   338,   339,
     340,     0,     0,     0,     0,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,  4030,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     352,   353,     0,     0,   355,     0,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   367,
     368,     0,   369,     0,   370,   371,   372,   373,   374,     0,
     375,   376,     0,   377,     0,     0,     0,   378,     0,     0,
       0,   379,   380,   381,   382,   383,     0,     0,   384,   385,
     386,   387,   388,     0,   389,     0,     0,   391,     0,   393,
    -336,     0,   394,     0,     0,     0,   396,     0,     0,   398,
     399,   400,  4031,   401,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,     0,   411,   412,     0,   413,     0,
       0,     0,     0,   415,   416,   417,   418,     0,     0,     0,
       0,   420,     0,     0,     0,   421,     0,     0,   423,     0,
     425,     0,   426,     0,     0,   429,   430,     0,     0,     0,
       0,     0,   431,   432,   433,     0,   434,   435,     0,   436,
     437,     0,     0,   438,     0,     0,   439,     0,   441,   442,
     443,   444,     0,     0,     0,   446,     0,   447,   448,   449,
     450,   451,   452,     0,     0,   453,   454,   455,   456,     0,
     457,   458,     0,     0,   459,   460,     0,   461,   462,     0,
       0,   463,   464,     0,   465,   466,   467,   468,     0,     0,
       0,     0,   469,   470,   471,   472,   473,   474,     0,   475,
     476,     0,     0,     0,     0,   478,   479,   480,     0,   481,
     482,     0,   483,   484,     0,     0,     0,     0,     0,   487,
       0,     0,  4403,     0,     0,     0,   490,   491,     0,     0,
       0,     0,     0,     0,   492,     0,     0,   493,     0,     0,
       0,   494,   495,   496,   497,   498,     0,     0,  -336,     0,
       0,     0,   499,     0,     0,   501,     0,   503,     0,   137,
     504,   138,   139,   140,   141,   142,     0,     0,   143,     0,
       0,     0,   144,     0,     0,     0,     0,   146,   147,   148,
     149,   150,     0,     0,     0,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,     0,     0,   162,   163,
       0,   164,     0,     0,     0,     0,   167,     0,   168,   169,
       0,     0,   171,   172,     0,   173,   174,     0,   175,   176,
     177,     0,   179,     0,   181,   182,   183,   184,     0,   185,
     186,     0,   187,   188,   189,     0,   191,     0,     0,     0,
     192,     0,     0,   193,     0,   194,     0,   195,     0,   196,
       0,   197,     0,     0,   198,   199,   200,     0,     0,   201,
       0,     0,     0,     0,   202,     0,     0,     0,     0,     0,
     204,   205,     0,   206,     0,     0,     0,   207,     0,   208,
     209,   210,   211,   212,     0,     0,     0,     0,     0,     0,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   219,
       0,   220,   221,   222,     0,     0,   223,   224,     0,   225,
     226,   227,   228,   229,     0,     0,     0,     0,   231,   232,
     233,   234,   235,     0,     0,   236,   237,     0,   238,   239,
     240,     0,     0,     0,     0,     0,     0,     0,   243,     0,
     244,     0,   245,     0,   246,   247,   248,   249,     0,   250,
       0,   251,     0,     0,     0,     0,   253,     0,     0,     0,
       0,     0,   256,     0,     0,     0,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,     0,
       0,     0,     0,   266,     0,     0,     0,     0,   268,     0,
       0,     0,   269,   270,     0,   271,   272,     0,     0,     0,
     273,     0,     0,     0,   275,     0,     0,   276,     0,     0,
     277,   278,     0,     0,     0,     0,     0,   279,   280,     0,
     281,     0,   282,     0,   283,   284,     0,     0,     0,     0,
       0,     0,     0,   285,     0,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,     0,     0,     0,     0,   312,   313,
     314,   315,   316,   317,     0,     0,   318,   319,   320,     0,
     321,     0,   322,     0,   323,   324,   325,   326,   327,   328,
     329,   330,   331,     0,     0,   332,   333,     0,     0,   334,
     335,   336,   337,   338,   339,   340,     0,     0,     0,     0,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   352,   353,     0,     0,   355,
       0,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   367,   368,     0,   369,     0,   370,
     371,   372,   373,   374,     0,   375,   376,     0,   377,     0,
       0,     0,   378,     0,     0,     0,   379,   380,   381,   382,
     383,     0,     0,   384,   385,   386,   387,   388,     0,   389,
       0,     0,   391,     0,   393,     0,     0,   394,     0,     0,
       0,   396,     0,     0,   398,   399,   400,     0,   401,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,     0,
     411,   412,     0,   413,     0,     0,     0,     0,   415,   416,
     417,   418,     0,     0,     0,     0,   420,     0,     0,     0,
     421,     0,     0,   423,     0,   425,     0,   426,     0,     0,
     429,   430,     0,     0,     0,     0,     0,   431,   432,   433,
       0,   434,   435,     0,   436,   437,     0,     0,   438,     0,
       0,   439,     0,   441,   442,   443,   444,     0,     0,     0,
     446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
     453,   454,   455,   456,     0,   457,   458,     0,     0,   459,
     460,     0,   461,   462,     0,     0,   463,   464,     0,   465,
     466,   467,   468,     0,     0,     0,     0,   469,   470,   471,
     472,   473,   474,     0,   475,   476,     0,     0,     0,     0,
     478,   479,   480,     0,   481,   482,     0,   483,   484,     0,
       0,     0,     0,     0,   487,     0,     0,   488,     0,     0,
       0,   490,   491,     0,     0,     0,     0,     0,     0,   492,
       0,     0,   493,     0,     0,     0,   494,   495,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     501,     0,   503,     0,     0,   504
};

static const yytype_int16 yycheck[] =
{
       6,   663,   673,   674,   600,   986,   905,   906,   122,   619,
    1143,   884,   609,    19,  1885,    11,   915,    23,  1525,  1173,
    1728,    20,   599,   600,   987,   969,    32,     6,  1173,  1465,
    1319,    30,  1593,    39,  1071,  1072,    42,    36,  1852,  1417,
      46,  1270,  1318,  1077,   734,  1968,  1335,    53,  1513,   635,
    2438,  2325,   946,  2074,  1119,   693,  1397,  1196,   659,   660,
    1523,  2323,   648,  3052,  1203,  2150,  2457,  2370,  1270,   923,
    2155,  1204,  1205,  2033,  2942,  1208,  1209,  1210,  1211,  2033,
    1213,  1214,  1215,  1216,  1217,  1218,  1219,  1220,    94,  2523,
    2468,  2248,   946,  2430,  2431,  1109,  2822,  2634,  2133,  3517,
    1428,   523,  2480,  2481,   991,  1324,  1802,  2549,  2678,  1874,
     116,  2022,   118,   991,  2736,   121,   122,   123,  1446,  2022,
     543,   921,  3414,    23,  3320,  2033,  1454,  1455,  2990,  2391,
    1962,  2492,  2490,  3521,  3148,  2496,  2914,  3062,   966,   118,
    2110,   803,   121,  1492,    17,  1502,  2507,   947,  2943,    78,
      24,    59,  2672,   791,   792,   793,  2676,    19,  2519,  3055,
      16,    17,  2110,    50,    33,   163,   804,  3063,    46,   129,
      16,    17,   130,  2809,  1996,  1464,  1502,    20,    69,    24,
    1506,  1502,  1508,    16,    17,  1506,     4,  1508,  3480,     9,
    2632,    19,    16,    17,    94,    19,  1243,  2484,    45,  2110,
     123,   120,    29,    35,   369,   160,   287,  2110,    17,    29,
    2610,    61,   192,    11,  2660,    35,  1573,  2595,  2596,  4195,
    3612,  3613,  3574,    72,  3616,   109,  3761,    66,   198,   830,
      70,  2917,    21,    16,    17,  3790,    21,   320,   378,   198,
    2480,  2481,   326,  3635,    33,   269,  4377,  1573,   834,  3641,
     125,   227,  1573,   272,  3365,    70,   678,  3300,    47,   377,
    2648,   254,  2675,   146,   144,   254,  2654,   374,   185,    58,
      59,    19,  3551,    58,    59,   366,   265,    77,   454,   865,
     238,     8,   530,   156,   377,    16,    17,   462,   131,  2774,
     111,   195,   399,    21,   156,    77,  3713,  3836,   160,    16,
      17,  2088,   125,   222,  2242,    33,    16,    17,  3161,    83,
     108,  1883,   132,    16,    17,    20,    23,    16,    17,    47,
     243,    35,   399,   125,   192,    16,    17,   195,   125,   127,
      58,    59,   160,   156,  3752,    10,   370,  4145,    16,    17,
    3780,   948,  2827,   260,    12,    12,    16,    17,   429,   561,
     165,    16,    17,   500,   156,  2595,  2596,    16,    17,   156,
     234,   551,   195,   814,   554,   212,   598,   526,  4063,   610,
     587,   167,   232,    33,   242,   429,    16,    17,  1049,  1050,
    1051,    16,    17,   215,   362,   363,   245,   195,  3602,   234,
     561,  3605,  3606,   610,    16,    17,   450,   257,   156,    59,
     198,   560,   198,    16,    17,   150,   150,   266,  3622,   328,
     524,   232,   160,   332,   655,   656,  1017,   607,  1108,   156,
     150,   340,   130,   655,   309,  3817,   131,   878,   676,   227,
      62,   485,  1122,   580,  3826,  3852,   633,   245,  3855,   473,
    3719,   130,   316,   267,   414,  2833,    98,  2835,   365,   661,
    3303,   470,   356,   567,   561,   414,   256,  3849,   185,    16,
      17,   168,  3854,  4271,    16,    17,  4005,   460,    16,    17,
    3581,   316,   140,   140,   256,   559,   452,   466,   195,  2921,
     656,  2014,   280,  2925,   561,  4616,  3682,   662,  1777,  3768,
     655,  1390,  3880,   368,   452,  3273,  3421,  2939,  2940,  3277,
    3278,   215,   421,  1466,  4199,   388,  4482,   591,   431,  2951,
      16,    17,   270,   287,    16,    17,   384,   635,   524,   145,
     526,   366,   662,   481,  2958,   195,  3878,   383,    16,    17,
     386,   112,   623,   270,   115,    69,   491,  1199,  2980,   287,
    2005,   547,   635,   160,  3587,   385,   552,    16,    17,   238,
     383,    16,    17,   386,   635,  4090,  1845,   563,  2416,   383,
     479,   567,   386,   569,  1905,    16,    17,    16,    17,  1207,
     385,   654,   459,  2484,    16,    17,   582,   145,    81,    65,
    1270,  2484,  3778,   235,   554,  3207,  1224,   437,  3274,  2054,
     429,  2056,  2057,   599,    50,   554,  4151,  2062,  2063,  2636,
     383,   607,   254,   386,   628,  1492,  2071,  2072,  3054,  2883,
     490,  2076,  2647,   265,  1492,   538,   414,  3017,  2905,   625,
     252,   464,  1422,  1756,  1478,  1425,   624,   474,  1956,   635,
    1430,   637,  2097,  2541,  1767,  2100,  2101,  1770,  3016,  1996,
    2610,   532,   648,   649,   650,  1874,   604,  2469,  1249,   655,
     630,   657,   383,   659,   660,   386,  1456,  1457,   664,   665,
     666,   590,  2610,  3051,   670,  2022,   383,  1090,  1091,   386,
    1996,   650,  1874,   383,   680,  1996,   386,   683,   684,   156,
     383,   429,   688,   386,   383,  1572,   177,   386,  2014,  1112,
     488,   536,   383,  2014,  1572,   386,   654,   349,  1121,  2610,
    3185,  3186,  3187,    16,    17,   383,   625,  2610,   386,   617,
    1133,  1134,  1135,   383,  3910,   675,   386,   831,   383,  1142,
    1321,   386,   641,  4141,   383,    16,    17,   386,   734,   561,
    1558,  2088,  1779,  2082,  3037,  1336,  1750,   557,   622,   414,
    3225,  3226,  3227,   383,   572,   572,   386,  3943,   383,   649,
     227,   386,   630,  2110,   552,   655,   554,   630,   578,    16,
      17,   383,  2088,   572,   386,   585,   666,  2088,  3693,   656,
     383,  2236,  3697,   386,    16,    17,  3016,  3572,   623,  3557,
    2594,  3770,   656,   639,  2110,   654,  3220,   660,   608,  2110,
     796,   905,   798,   639,  3430,   909,   910,  3693,   660,  2737,
    1386,  3697,  4190,   659,   647,   654,   639,   596,   922,   607,
    2597,   596,   130,  4092,   466,   639,   160,   638,   824,   825,
     826,  2393,   828,   829,   830,   831,   383,   833,   834,   386,
     630,   383,   656,   839,   386,   383,  4276,   660,   386,   845,
    1426,    16,    17,   643,   644,  1452,   825,   561,   523,   855,
     829,    16,    17,  4132,   833,   481,   639,  3299,   660,   865,
     866,   643,   644,   660,   870,    16,    17,  2330,   596,  4564,
     628,   985,   655,   656,   491,    16,    17,   383,  4074,   610,
     386,   383,   627,   627,   386,   537,  2757,   635,  4280,    72,
    4282,   628,   620,    16,    17,   383,   604,   627,   386,   905,
      16,    17,   660,   909,   910,  3296,    77,   582,   639,   541,
    3213,    16,    17,   481,   383,   604,   922,   386,   383,  1496,
     238,   386,   639,   660,  1510,   656,   654,  2798,   177,   639,
      16,    17,   383,   424,   383,   386,   639,   386,  4326,   656,
     639,   383,    16,    17,   386,   655,   656,   622,   639,  2482,
     192,    40,   655,   656,   158,   855,   655,   656,    85,  3401,
     966,   639,  2815,  2324,   655,   656,   866,  3229,   160,   639,
     870,  3896,  3897,   476,   639,   452,   160,   655,   656,   985,
     639,   987,  1672,  1405,   565,   655,  2451,   568,    16,    17,
    2804,   656,  1891,  3354,  2905,  3353,   655,   656,   532,   639,
    2507,  2859,  2905,   459,   639,    16,    17,   659,  3045,    16,
      17,  1017,  1911,  3875,   500,   655,  2976,   639,   838,    55,
     655,   656,  2976,   397,  3275,    50,   639,   532,   654,    33,
    3600,   708,   658,   655,   656,   124,   604,   192,  4234,   373,
     227,   859,  3527,   656,  4336,   662,  2878,  3017,  2181,   177,
     218,   384,  2430,  2431,   195,    16,    17,   429,  1952,    42,
    2825,  3631,  3632,  1069,  4078,  2426,  4262,  1073,  2976,  3017,
     383,   366,  1186,   386,  2770,   205,  3596,   153,   481,  1973,
    3702,   251,   639,   232,   902,   256,   654,   639,   164,   349,
     658,   639,   383,  1099,    11,   386,   443,  2562,  1952,   656,
     287,  2135,  1108,  1774,   656,   782,  3017,   101,   656,  1223,
    3630,  2439,  2469,   618,  3017,   375,  1122,   608,  3638,  1973,
    2259,  4539,    12,   402,   279,  3645,   383,  2484,  3570,   386,
    1136,  1769,  2351,   639,   452,  2600,    61,   639,  2603,   158,
    3677,   383,    67,  2469,   386,  1945,   276,   491,  2469,   286,
     656,   639,    16,    17,   656,  1955,  2482,  1271,  1958,  1959,
    1582,  2482,   366,   481,  3061,   656,   276,  1173,   656,  1069,
     639,    16,    17,  1073,   639,   424,  1847,   524,    11,   122,
    1186,  3594,  3595,   660,  1874,  1977,  1978,   656,   639,  3602,
     639,   656,  3605,  3606,   475,  2082,  1782,   639,    19,  1099,
    2265,  2266,  1994,    30,  2082,   656,  2339,   656,   383,  3622,
     127,   386,   500,  1327,   656,   234,  2370,  1223,   383,  2011,
    2012,   386,  1228,  3636,   190,  2370,  3261,  1233,  3641,  3642,
    3643,  3644,   383,   416,  1820,   386,  1136,   424,    16,    17,
    2597,  4659,   383,  1249,  2258,   386,    16,    17,   396,   554,
     140,   654,    79,  2610,  2268,    16,    17,   367,   630,   429,
     383,   227,   402,   386,  1270,  1271,   191,   383,    16,    17,
     386,  2597,    16,    17,  1860,  1861,  2597,    98,   383,  4268,
     654,   386,    16,    17,  2610,   139,   604,    16,    17,  2610,
    1876,  2083,  2084,  2085,  2086,   422,   424,   383,   446,   491,
     386,  1307,     0,  1309,    20,   309,   382,   491,  3559,   383,
      16,    17,   386,    19,   451,  1321,   993,   190,   662,  3133,
      24,  1327,   656,   656,   212,  2788,   639,   154,   623,   365,
    1336,  1337,   536,  1233,  4060,   156,   654,    16,    17,   160,
     365,   284,   160,   656,    16,    17,  4072,   366,   639,  3686,
     610,    16,    17,   234,   227,   383,  3441,   487,   386,  1365,
     122,   656,     6,  3216,   532,   656,   349,  1373,   551,   257,
    1376,   192,   383,   309,   192,   386,   383,  3680,   281,   386,
    1386,   196,   639,    16,    17,  1499,   409,   208,    16,    17,
    1396,  1397,   213,    16,    17,   251,    31,   639,   581,   656,
    1406,  1407,  1408,  1409,  1410,  1411,  1412,   656,  4087,  2916,
    2917,  1417,    56,   655,   235,   131,   587,  1423,  1424,   623,
    1426,   242,   383,  1429,   481,   386,   369,  1406,  1407,  1408,
      16,    17,  1411,   254,   459,    16,    17,  1337,   236,   610,
     529,   344,   561,  1449,   265,  1424,   279,   245,  4279,   270,
    1429,  3408,  3409,    16,    17,    16,    17,    33,   279,  2924,
     481,  2926,    16,    17,   639,   490,   555,   127,  2933,   386,
     662,   325,   643,   644,   639,    16,    17,  2766,   662,  3293,
     608,   656,  2947,    59,   560,   366,   422,   412,   639,  2954,
      12,   656,   629,  1499,   583,  1313,    62,  4365,   639,   665,
     144,  2966,  2967,  2968,  1510,  3066,   561,  2972,   656,  1409,
    1410,  1517,  1412,  2412,  1520,  1521,   639,   536,   156,    16,
      17,  2882,   284,   639,   127,  3422,  3423,  3487,   349,   128,
     234,  3688,  3486,   656,   639,   654,   112,  3971,   383,   115,
     656,   386,    16,    17,   270,   125,  3139,   123,  2905,  1449,
    3143,   656,  1558,   639,   375,  3946,  2832,    16,    17,   139,
     366,    24,  2923,   384,   500,   639,     8,   366,    16,    17,
     656,   122,  1578,   429,  1580,  1581,    41,  1583,  1584,  3882,
     395,   655,   409,  1401,   244,    12,   481,    29,  2949,  2950,
    1596,   389,  1598,   414,    16,    17,  2825,   654,   223,   654,
     225,  1580,  1581,   434,   623,   383,   433,   369,   386,  4598,
     245,   639,   316,   383,  2753,  2649,   386,  1517,   140,    16,
      17,  1521,   383,  2825,  2262,   386,  3711,   655,   639,   532,
      16,    17,   639,   654,   269,   383,   187,   656,   386,   383,
     467,   244,   386,   609,   655,   466,   589,    73,   655,   383,
      16,    17,   386,   481,   383,   536,  2810,   386,   384,  4338,
    3017,  4340,   828,    16,    17,  2810,  1672,  1673,   133,   490,
      12,   158,  1786,   491,   599,    16,    17,   383,   639,  3144,
     386,  4512,  4513,  3945,   499,  2286,   252,  1505,   287,    16,
      17,  3017,   481,   481,   655,   158,  3017,    16,    17,  2491,
      84,   528,  2494,  2495,   383,  2497,  3414,   386,  2500,  2501,
      77,   383,  2504,   140,   386,   481,   537,  2509,   383,   363,
     104,   386,  2514,  2515,  2516,  2517,  2518,  2973,  1734,  3192,
    2522,    21,  2524,   284,  2157,   180,   609,   536,  2530,  2531,
    2532,  2533,   623,    33,  2536,   325,  2538,   234,   464,  2172,
     383,  2997,  4140,   386,   167,   383,    51,    47,   386,   654,
     383,    19,   593,   386,    16,    17,    61,  3274,    58,    59,
    1776,   234,  3480,   141,  1888,   351,  1782,   598,   630,   481,
    1786,   365,  2420,  2206,   428,   198,   430,    16,    17,   610,
     208,  1797,  4028,  4029,   639,   361,  1802,   383,   140,  2953,
     386,  1807,   383,   438,   656,   386,   232,   628,  2953,   630,
     655,   654,    16,    17,  1820,   160,  2608,   623,   369,   662,
     383,   160,   383,   386,   623,   386,   654,   589,  3785,   383,
      16,    17,   386,  1839,   655,   656,   254,  1843,   659,   660,
      98,  2418,   383,    16,    17,   386,   208,  3354,    16,    17,
     656,   561,  2275,   316,  1860,  1861,  1862,   655,   270,   363,
     444,   639,   294,   295,   270,   654,   654,   234,  1874,   639,
    1876,    17,   598,   673,   674,  4253,  4254,   655,   639,   366,
     128,   481,  1888,   655,   656,   655,   383,   526,   654,   386,
     490,   639,    16,    17,   655,   639,    16,    17,   156,  1905,
     137,   271,   160,   366,   274,   639,   410,   655,  3249,   383,
     639,   655,   386,   552,  1920,   152,  1003,  1004,  3383,    58,
      59,   655,   498,   368,   383,    73,   655,   386,   554,    16,
      17,    70,   190,   639,   192,   383,   564,   108,   386,  1839,
      16,    17,    57,  1843,   654,  3966,  3967,   648,  3237,  2822,
     208,  1957,   654,   167,   655,   213,   658,  1044,    12,   525,
     639,   383,  1862,   180,   386,  3779,   384,   639,   216,   227,
     481,   339,   384,  2867,   639,   541,   655,   235,   384,  2873,
     654,   276,    24,   655,   242,   498,   383,  4261,   662,   386,
     655,   195,   568,   360,  2108,   141,   254,   383,  2112,   366,
     386,  3958,  3959,  3068,  3961,  3962,   639,   265,   127,   441,
     442,   639,   270,  2867,   614,   615,   639,   383,  3941,  2873,
     386,   279,   655,   572,    16,    17,   602,  3092,  3093,    17,
     383,   551,   655,   386,   554,    17,  2150,  3283,   589,   287,
    1858,  2155,   383,   191,   648,   386,   217,   662,   212,   536,
    3115,   655,   236,   639,   654,   425,   383,  1957,   639,   386,
     130,   245,   177,  3217,   383,   226,   181,   386,   435,   655,
     636,  3317,  3217,   536,   655,  2875,   639,   192,   639,  3325,
     655,   656,   122,  3329,   232,   639,   140,  4351,  2759,   602,
    4354,   349,   655,   257,   655,   655,   656,  1915,   639,   122,
      39,   655,  2108,   614,   615,   554,  2112,    46,  2114,   257,
    4329,  2117,  3863,  4332,   655,  4334,   158,   375,  2124,  2125,
    2126,  2127,   655,   656,  2130,   192,   384,   192,   195,   642,
     195,   383,   232,    77,   386,  2825,   623,  2251,  2117,   584,
    2932,   558,   639,   654,  2150,   362,   363,   187,   208,  2155,
     232,   368,  3428,  2945,   383,   600,   414,   386,   655,   141,
     623,    67,   216,  1981,   187,   639,   599,  2281,   238,   536,
    4406,  4407,  1990,  1991,   232,   215,   748,    12,   226,   383,
     639,   655,   386,  2001,  2002,  2003,  2004,   208,  2006,  2007,
    4578,   639,   234,   339,   655,   656,   655,   383,   770,   135,
     386,   617,   378,   270,   620,   389,   242,   655,   466,   324,
     383,   783,   784,   386,   158,   383,  1016,   639,   386,   390,
    2806,   655,   656,    46,  2124,  2125,  2126,   594,   399,   631,
     632,  4495,   490,   655,   195,   406,    48,  2055,    24,  4110,
    2058,  2059,   639,  2061,   284,  2251,  2064,  2065,  2066,  2067,
    2068,  2069,  2070,   639,   656,  2073,   623,  2075,   655,   383,
     615,   284,   386,   383,   412,   490,   386,  1067,   287,   655,
    2276,  3736,   655,   639,   316,  2281,   160,  4028,  4029,   537,
    2286,   649,   650,   651,   652,    24,   639,    58,    59,   655,
     234,    77,   605,   122,  2300,   107,   383,  4111,   639,   386,
    2306,  2307,   655,  2309,  3369,   140,   596,   383,  3686,   424,
     386,  3210,   639,    82,   655,   655,   656,   610,   662,    77,
     639,   655,   656,   660,   366,  2748,   616,   617,   655,   369,
     380,  3767,  2338,   504,   613,   614,   655,   616,    77,   618,
     598,   523,  2456,  2457,   655,   656,   369,   493,   494,   655,
     656,   609,   610,  2359,  2931,   654,   125,   339,   187,   191,
     469,     6,  3516,   656,  2370,   414,   452,   584,  2374,   662,
     628,  3516,   630,  2379,  2380,  2381,  3410,   122,  2384,   148,
     125,   216,   452,   600,   655,   656,   215,   639,  2394,   122,
    2396,   383,   178,  1821,   386,    11,  1824,   655,   656,  1827,
     158,   659,   660,   655,   655,   656,  2306,  2307,   654,  2309,
     639,   481,  2418,  3689,   655,   656,   360,   186,   230,   158,
    4076,  4077,   366,   654,  2430,  2431,   655,   108,   654,  3583,
    4181,  4182,   655,   656,    61,   639,   607,   656,  3583,   178,
      67,  4255,   187,   552,   655,   656,    73,   654,   234,   558,
    2456,  2457,   654,   639,   187,   284,   655,   656,   122,  2359,
      87,   654,   516,   517,   518,   519,   639,   521,   522,   655,
     215,   639,   122,   654,   523,   125,   234,   655,   656,  2379,
    2380,  2381,   655,   537,  2384,  3774,   167,   655,   654,  3452,
     223,   435,   225,   561,   536,   234,   643,   644,   607,   645,
     646,   647,   648,   649,   650,   651,   652,   610,   320,   150,
     151,   493,   494,   622,   654,   639,   654,   198,   654,   639,
     654,   333,   654,   187,   654,  3562,  3563,   655,   656,  2535,
     316,   655,   654,   582,   604,   655,   654,   187,    24,   284,
     369,   656,  4293,  2549,   654,    25,   358,   359,  4109,   589,
     654,   284,   639,   656,  2560,    77,   654,  4308,  4214,   662,
    3789,   654,  4218,   639,   191,   215,   589,    73,   655,    91,
     197,  4322,   564,   622,   360,   654,  2394,   316,    67,   655,
     366,   623,   655,   656,   654,  3737,  3738,    67,  3532,   172,
      70,    77,   536,   654,    74,  3884,   662,    77,   654,  3888,
    3889,   108,   360,   655,   656,   232,    63,  3836,   366,   655,
     656,   654,   134,   654,   656,   654,   141,  4273,  4274,   108,
     284,   360,   141,   654,   369,  2631,  2632,   366,  4336,   654,
     257,   375,  3777,  3230,   284,   610,   369,  4102,  4103,  4104,
    4105,    25,    26,  4394,   654,   125,  2652,   639,   655,   656,
     594,   655,   656,  2659,   654,  4406,  4407,   655,   656,   654,
     167,    25,    26,   645,   646,   647,   648,   649,   650,   651,
     652,  3248,   158,   654,    58,    59,    60,   435,   654,   623,
    3103,   516,   517,   654,   519,   191,    70,   522,   655,   656,
     654,   198,   178,    77,    58,    59,    60,   655,   656,   655,
     656,    85,   537,   655,   656,   369,    70,   654,   197,   655,
     656,   654,   656,    77,  4465,   505,   528,   655,   656,   369,
    3391,    85,  4229,  4230,  4475,   232,   232,   111,   654,    12,
      77,  2631,  3155,   414,   655,   656,   654,   259,   655,   656,
     654,   125,   654,   232,    91,   129,   654,   111,   234,   654,
     536,   257,   655,   656,  1083,  1084,  1085,   654,    41,  2659,
     589,   125,   655,   656,  2770,   129,  1095,   654,  2774,   396,
    4521,   654,  4523,   280,   158,  2593,   654,   257,   536,   654,
    2786,  2787,  4533,   655,   656,   412,   206,   655,   656,  4660,
     654,   280,   655,   656,   158,   655,   656,   536,  1127,  2805,
    2806,  1130,  3935,   484,  2810,   654,  4557,   654,  4559,    92,
    4561,   655,   656,    96,   339,   337,   654,  4568,   654,  2825,
     339,  2827,    48,  1152,  1153,   655,   656,  1156,  2942,   654,
     316,   281,  4583,   655,   656,   654,   594,   623,  2844,   654,
     362,   363,    48,   365,   589,  1174,  1175,   654,   232,  4600,
    4601,   655,   656,   545,   546,   239,   589,   549,   654,   551,
     654,  3438,   554,  4328,   556,   623,  4617,  4618,   232,  1160,
    1161,  4622,   256,   554,   360,   239,   655,   656,   655,   656,
     366,   508,   362,   363,   623,   269,  2786,  2787,   368,  2307,
     396,  2309,   256,   313,   314,   375,  3232,  3233,   318,   319,
     654,   582,   409,  2909,   654,   427,   412,   414,  2914,   656,
     141,  2910,   259,  2919,  2920,  2921,  2912,   656,    98,  2925,
     654,  2927,   654,  2922,   654,   589,  4253,  4254,   654,  2928,
     654,   315,   412,  2939,  2940,   654,  2942,  2943,   654,   589,
     654,   622,  2948,  3497,  3498,  2951,   654,  2953,   160,   161,
     334,   315,   654,  2952,  3749,  3750,  2962,   654,  2957,   654,
     475,  2379,  2380,  2381,  2963,  2964,   249,  2973,   493,   494,
     334,    31,   599,   598,  2980,  2981,   649,   484,   490,    57,
     662,   488,   662,   166,   654,  2991,   270,   199,    33,  2995,
     337,  2997,    16,    17,  4139,   484,   192,   532,   210,   488,
     551,   523,   166,   532,   281,   157,   486,   391,   656,  3015,
      86,   376,  2991,   656,   245,   399,   656,   547,   365,   508,
     655,   156,  3028,   125,  3987,   111,  2844,   391,   661,  3035,
    3993,     6,   654,   110,    61,   399,     4,   656,   250,   399,
      67,   480,   325,   622,  3050,   552,    73,   245,   656,   261,
     536,   558,   396,    55,  3953,   235,   536,   444,  2876,  2877,
      87,  2879,  2962,   552,   172,   554,   224,   111,   656,   558,
     656,   662,    70,    35,   254,   582,   288,    12,   627,   655,
     427,   141,   655,   140,  3755,   265,     9,   471,   133,   656,
     662,   655,   116,   117,   118,   119,   120,  4182,   655,   177,
     607,   655,   662,   181,   654,   158,   269,   471,   339,   392,
     599,  2929,  2930,   158,   192,   622,   662,   162,   607,   599,
     656,  3235,   647,   648,   649,   650,   651,   652,   647,   648,
     649,   650,   651,   652,   190,  3035,   656,   623,  2956,   656,
     661,   353,   281,  3149,   836,   529,   530,   531,   281,   281,
     281,  3157,   536,   115,    48,   200,   281,   281,   656,   656,
     122,   160,   413,   469,   191,   529,   530,   531,   552,   349,
     197,   555,   536,   218,   381,  3181,   523,   551,  3184,  3185,
    3186,  3187,  3296,   141,   375,   245,   375,  4060,   552,   656,
     426,   555,  3198,   276,  3771,   219,   220,   221,   222,  4072,
     397,   656,  3020,   572,   122,   232,   396,   125,   656,   269,
      12,  3217,  3218,   656,   598,  3221,   160,    70,   180,  3225,
    3226,  3227,   294,   295,   507,   187,   375,   375,   656,  3235,
     257,   656,    12,    13,   598,  3241,   281,   245,   649,   248,
     549,   182,  3248,  3249,   192,   603,   324,   122,   656,   503,
     125,   136,   141,   215,   400,   175,   375,   655,   160,   656,
     122,   160,   493,   494,   160,   548,   656,  3273,   160,   187,
     654,  3277,  3278,  4427,  1603,   605,   160,  3283,   160,   339,
     160,   160,  4427,   160,   160,    35,   466,   245,   160,   160,
    3296,   160,   656,  3299,  3300,   160,   160,   215,   141,   160,
    4433,   160,   362,   363,   328,   160,   330,   331,   332,  4394,
     160,  3317,   187,   160,   160,   160,   340,    97,  4281,  3325,
     160,   160,   284,  3329,   634,   187,  4118,  3441,   609,  4121,
    4122,  4123,  4124,   375,  3811,  3812,   375,   375,   198,  3157,
     215,   656,   655,  3939,   195,  1674,   424,  3824,   655,  1678,
     130,   655,  3358,   215,  3831,  3361,   655,   537,  4503,   383,
    3366,   655,   386,   649,   144,   115,   284,   655,   413,   441,
     442,   195,   122,   655,  1703,  3381,   655,   422,   438,  3856,
     655,   339,  3859,   656,  4538,   412,   648,   167,   350,   654,
     170,   655,   655,  4538,   439,  3401,   655,   421,   655,   655,
     655,  3407,  3408,  3409,   184,   655,   368,   369,   656,   284,
    4543,  4203,   457,   656,   645,   646,   647,   648,   649,   650,
     651,   652,   284,  3537,   598,   655,   206,   655,   491,   654,
     180,   654,   652,   493,   494,  3441,  4521,   187,  4523,  3257,
     654,   513,   514,   515,  4054,   655,   506,   656,   561,   561,
     339,   369,   232,   551,   478,   479,   501,   561,   238,  4251,
    4252,  3361,   654,   628,   423,   215,   233,   654,  4260,    33,
      98,    11,  4557,   543,   656,   572,   654,  4631,   662,  3297,
     267,   508,  4445,  4446,   654,  4448,  4631,   532,  3306,   656,
     656,   662,  4646,   654,   369,   195,   339,  4651,   655,   279,
     662,  4646,  4656,   662,    54,  3511,  4651,   369,   422,   656,
    3516,  4656,   607,   192,    64,  4600,  4601,    46,   347,   523,
     523,  3527,   523,   523,   543,    75,  4197,   523,   480,   399,
    4126,  3537,   447,  4195,   284,   493,   494,   654,    88,    89,
      90,    46,   630,   654,  4507,   280,  4509,  4510,   654,   610,
     655,  3557,   662,   572,   154,   105,  3374,   241,   241,   655,
     572,   662,   655,   655,  3570,   655,  3572,   656,   655,   133,
     655,   655,   599,   655,    54,   160,   656,  3583,   227,  3397,
     561,  3587,   656,  3589,    64,   645,   646,   647,   648,   649,
     650,   651,   652,  4492,   158,    75,   276,  3711,   162,   561,
     350,   625,   635,   565,   493,   494,   568,   235,    88,    89,
      90,    46,   160,   654,   364,   639,   640,   641,   368,   369,
     654,   572,   584,   654,   654,   105,   254,   589,   160,   206,
     592,  4612,   195,  4596,   242,   415,   200,   265,   251,   419,
     561,   429,   561,   656,   369,   160,   160,   160,  3654,   511,
     493,   494,   399,   557,   218,   329,   111,   437,   111,  3773,
     396,   656,    73,   175,   396,   445,  3672,   396,   136,   572,
     396,   589,   255,   453,   693,   255,   396,   136,   552,   698,
    3686,    46,   396,   398,   552,   647,   648,   645,   646,   647,
     648,   649,   650,   651,   652,   396,    19,   396,   396,   572,
     160,   481,   380,   561,   654,  3711,   208,   654,    77,   462,
     396,   730,   654,   662,   589,   495,   496,   281,   656,  3833,
     649,   349,   654,   654,   654,   185,   243,   589,   747,  3547,
     655,   655,    98,   243,   656,   662,   662,   572,   655,   199,
     656,   654,   111,   655,   655,    76,   655,   375,   655,    80,
     210,    82,   662,   572,  4293,  4654,   645,   646,   647,   648,
     649,   650,   651,   652,   655,   572,   546,  3773,   654,  4308,
    4347,  3777,   791,   792,   793,   794,   227,   327,   656,  3785,
     271,   396,   381,  4322,   604,   804,   195,   195,  3794,   158,
     656,   195,   655,   245,   125,   345,  3802,  3796,   655,   655,
     260,   261,   582,   646,   647,   648,   649,   650,   651,   652,
     662,   561,   429,   655,   160,   565,   126,   148,   568,   257,
    4482,   257,   410,   375,   604,   662,   606,  3833,   288,   375,
      77,    19,  3946,   655,   584,   656,   654,   375,   466,   589,
     375,   505,   592,  3661,   481,   655,   387,   327,   656,   413,
     654,   654,   254,   654,  3860,   186,   384,   254,   422,   655,
     369,    46,   483,   232,   655,   345,   630,  3873,  3874,   235,
     655,   267,   464,   429,   649,   439,   263,   655,   655,  3885,
     656,   195,   208,   492,   160,   401,   656,   257,   254,   654,
     257,   630,   654,   457,  3794,   656,   356,   647,   648,   265,
     656,   655,    81,   500,  4500,   143,   655,  2058,  2059,   537,
    2061,   461,   505,  2064,  2065,  2066,  2067,  2068,  2069,  2070,
      19,   476,  2073,   656,  2075,   655,  4465,   477,  3934,   270,
     375,  3937,   655,   655,   254,   254,  4475,   501,   655,   655,
    3946,    33,   655,   655,  4606,    33,   315,    25,    26,   655,
     655,   411,  3958,  3959,   336,  3961,  3962,   259,  3776,   655,
     655,   422,   655,   279,   656,   334,    11,   176,   532,   206,
     279,   242,  4634,   654,  3874,   662,    46,   213,   655,   336,
      58,    59,    60,   349,   656,   656,  4657,   551,   160,   539,
     554,   360,    70,   490,  4533,   654,   125,   477,   125,    77,
     554,   654,   408,   654,  1023,   662,   556,    85,   655,   375,
     656,   654,   254,   254,    33,   369,   174,  3835,   336,  4025,
    4559,   655,  4561,   381,  4030,   630,   375,   554,   654,  4568,
     614,   654,   654,   111,  3934,   654,   654,   312,   620,   655,
     654,   620,   654,   604,  4583,   125,   257,   125,   369,   257,
     527,   129,   630,   368,   655,   462,   369,   610,   654,   539,
    1079,  1080,   656,   610,   655,   561,   561,   561,   147,  1088,
    1089,  1090,  1091,  1092,  1093,  1094,   556,   542,  4617,  4618,
     158,  4087,   656,  4622,  1103,  1104,   242,  1106,  1107,   375,
     364,   615,  1111,  1112,   656,   155,  1115,  1116,  1117,  1118,
     466,  1120,  1121,    30,   627,   436,   663,   192,   381,  1128,
    1129,   655,  1131,  1132,  1133,  1134,  1135,   610,   655,   655,
    1139,  1140,  1141,  1142,  1143,  1144,  1145,  1146,  1147,  1148,
    1149,   610,  1151,  4139,   563,  1154,  1155,   136,   136,    72,
    1159,   158,  4256,   654,  1163,  1164,  1165,   414,  4154,   627,
     654,    12,    13,   195,   232,    30,   655,  1176,  1177,  1178,
      61,   239,   381,    61,   394,   654,  1185,   536,  4174,   654,
      13,   537,   655,  1192,  1193,  1194,   257,  1196,   256,   654,
     543,    14,   272,   552,  1203,  1204,  1205,   437,  1207,  1208,
    1209,  1210,  1211,   242,  1213,  1214,  1215,  1216,  1217,  1218,
    1219,  1220,   154,    25,    26,  1224,  1225,   381,   381,   134,
     660,   143,   192,   604,   654,    46,    46,   153,    46,     5,
     375,   375,   627,   154,   226,   286,   660,   124,   149,   490,
     663,   654,    46,    46,    46,   130,    97,   315,    60,   564,
     604,  4247,   573,   574,   575,   576,   577,   578,   572,    52,
    4256,  4365,   143,    46,    97,    77,   334,   660,   472,    46,
     654,   654,   369,    85,   656,   470,   656,   154,   564,   130,
     656,   211,   656,   224,   655,   660,   655,    52,   656,   192,
     154,   192,   192,   144,   655,    46,   564,   130,   451,   111,
     629,   125,   227,   369,   654,   194,   490,   656,  2288,  4035,
    3383,   144,  2077,   125,  2106,  3384,   167,   129,  3670,   170,
    2479,  4065,   674,   391,  4413,  1000,  4198,  4414,  3668,  3672,
    4634,   399,  3872,   184,   167,  4439,  4591,   170,    46,   601,
    1873,  1807,  4338,  2770,  4340,  3863,   158,  3863,  3863,  3863,
    3863,   184,  3863,  3863,  3863,   206,  3863,  4602,  3863,  4462,
    4286,  4462,  3863,  3863,  1373,  4407,  3863,  1508,  4312,  4365,
    4366,  4311,  2604,   206,  2033,  1384,  1041,  3881,  2548,  3323,
    2800,   232,  3510,  3198,   698,  4247,  2805,   238,  1324,  3935,
    4349,  3513,  4543,  1402,  4202,  4441,  4126,  1572,  4500,   232,
     534,  3400,  2541,   471,  3021,   238,  3401,   116,   117,   118,
     119,   120,  2980,  3570,  2549,  3613,   730,  3613,  3646,  2983,
     232,  3985,  3795,  3843,  4347,  3140,  3833,   239,   279,  2456,
    3143,  4427,  2726,   747,  3135,   539,  4270,   538,    11,    11,
    3281,  4273,  4250,  4439,   256,  4205,   279,  4274,  4218,  4214,
    3885,  2548,  1587,  2122,  3993,  2976,  1463,   604,  1459,  3800,
    2365,   529,   530,   531,  3571,  1862,  1521,  2787,   536,  1568,
    2330,  4467,  3193,  2382,  2244,   896,  4366,   620,  4474,  1882,
     794,  3157,  2759,  2156,   552,  3065,  3691,   555,  1122,  2243,
    4343,  4232,  3381,  4536,  1095,  2269,  4537,  3583,  1478,  3773,
    4580,  2390,  1234,   315,  2937,  2127,   986,  4503,   986,  1337,
     219,   220,   221,   222,  2786,  3503,  3516,  2369,  4503,  3212,
     986,  3211,   334,  4538,  4139,  4129,   986,  1596,   689,  1953,
     598,  1954,  1415,   600,  1796,  3589,  3196,  1344,  4642,  4541,
    4536,  4537,  4538,  4575,  4452,  1443,  4651,  4373,  4356,  4357,
    4656,  3217,  3836,  1373,  2415,   599,   599,  1908,  2407,  3248,
    1731,  2408,  4558,  3249,   415,  2401,  1843,  4563,   419,  1877,
    1360,  1829,  4100,  1578,   881,  3181,  4106,   594,   530,   391,
     530,   883,   415,  4055,  3656,    -1,   437,   399,   674,   674,
     674,    -1,    -1,    -1,   445,    -1,    -1,    -1,    -1,    -1,
    1609,    -1,   453,    -1,   437,    -1,   228,    -1,    -1,    -1,
    4606,    -1,   445,    -1,    -1,    -1,    -1,    -1,    -1,   328,
     453,   330,   331,   332,    -1,    -1,    -1,    -1,    -1,    -1,
     481,   340,    -1,    -1,    -1,  4631,    -1,    -1,  4634,    -1,
      -1,    -1,    -1,    -1,   495,   496,  4642,    -1,   481,    -1,
    4646,    -1,    -1,    -1,    -1,  4651,    -1,    -1,    -1,   471,
    4656,    -1,   495,   496,    -1,    -1,    -1,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,    -1,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
      -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,    -1,    -1,
    1709,  1710,  1711,    -1,    -1,    -1,    -1,    -1,    -1,  1023,
      -1,    -1,   421,   546,    -1,  1724,    -1,   529,   530,   531,
      -1,    -1,    -1,    -1,   536,    -1,    -1,    -1,    -1,    -1,
      -1,   582,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     552,  1750,    -1,   555,    -1,    -1,    -1,  1756,    -1,   582,
    1759,    -1,  1761,   604,    -1,   606,    -1,    -1,  1767,    -1,
    1769,  1770,    -1,    -1,    -1,  1079,  1080,    -1,    -1,   478,
     479,   604,    -1,   606,  1088,  1089,    -1,    -1,  1092,  1093,
    1094,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,  1103,
    1104,    -1,  1106,  1107,    -1,    -1,    -1,  1111,    -1,    -1,
      -1,  1115,  1116,  1117,  1118,    -1,  1120,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1128,  1129,    -1,  1131,  1132,   441,
     442,    -1,    -1,    -1,    -1,  1139,  1140,  1141,    -1,    -1,
    1144,  1145,  1146,  1147,  1148,  1149,    -1,  1151,    -1,    -1,
    1154,  1155,    -1,    -1,    -1,  1159,    -1,    -1,  1857,  1163,
    1164,  1165,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1176,  1177,  1178,    -1,    -1,    -1,    -1,    -1,
      -1,  1185,    -1,    -1,    -1,    -1,    -1,    -1,  1192,  1193,
    1194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1906,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1914,    -1,    -1,    -1,    -1,
      -1,  1225,    -1,    -1,    -1,    -1,   625,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   640,   641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     6,    -1,    -1,    -1,    -1,    11,    -1,    13,
      -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    85,    -1,  2052,    -1,    -1,    -1,    -1,    -1,    -1,
      94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1373,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,
    1384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,    -1,    -1,    -1,   129,    -1,    -1,  1402,    -1,
      -1,    -1,    -1,   137,   138,    -1,    -1,    -1,    -1,    -1,
     144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,
      -1,    -1,   156,    -1,   158,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   169,    -1,  2136,    -1,    -1,
      -1,  2140,    -1,    -1,    -1,    -1,  2145,  2146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2154,   190,    -1,  2157,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2168,
    2169,    -1,  2171,  2172,    -1,  2174,  2175,  2176,  2177,  2178,
      -1,    -1,  2181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2190,    -1,    -1,    -1,   229,    -1,    -1,   232,  2198,
      -1,  2200,    -1,  2202,  2203,   239,  2205,  2206,    -1,    -1,
      -1,  2210,  2211,  2212,    -1,    -1,    -1,  2216,  2217,  2218,
      -1,  2220,   256,  2222,    -1,  2224,    -1,  2226,    -1,  2228,
      -1,    -1,    -1,    -1,  2233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2252,    -1,    -1,    -1,    -1,    -1,    -1,
    2259,    -1,    -1,  2262,    -1,    -1,    -1,    -1,    -1,  2268,
      -1,    -1,  2271,    -1,    -1,    -1,  2275,    -1,    -1,    -1,
      -1,   315,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     334,    -1,    -1,    -1,   338,  1609,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2339,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,
     384,    -1,    -1,    -1,     6,    -1,    -1,   391,    -1,    11,
      -1,    13,   396,    -1,    -1,   399,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   432,    -1,
      -1,    -1,    -1,    -1,    56,  1709,  1710,  1711,    60,    -1,
      -1,    -1,   446,   447,   448,   449,    -1,  2416,    -1,    -1,
      -1,  2420,    -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    85,    -1,    -1,    -1,   471,    -1,    -1,
      -1,    -1,    94,    -1,    -1,    -1,  1750,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1759,    -1,  1761,    -1,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2468,
      -1,    -1,    -1,   125,    -1,    -1,    -1,   129,    -1,    -1,
      -1,  2480,  2481,    -1,    -1,   137,    -1,    -1,    -1,    -1,
      -1,    -1,   144,    -1,    -1,   529,   530,   531,    -1,    -1,
     152,    -1,   536,    -1,    -1,    -1,   158,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   552,    -1,
      -1,   555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   585,    -1,  1857,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   598,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,   239,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2595,  2596,    -1,    -1,
      -1,    -1,  1906,    -1,   256,    -1,    -1,    -1,    -1,    -1,
    1914,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   660,   279,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   315,  2663,    -1,    -1,    -1,  2667,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   334,    -1,    -1,    -1,   338,    -1,  2687,  2688,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2708,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2717,    -1,
    2719,    -1,  2721,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   384,    -1,    -1,    -1,    -1,    -1,    -1,   391,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,  2052,  2748,
      -1,    -1,    -1,    -1,  2753,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2782,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   447,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    15,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,
      -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,  2136,    -1,    -1,    -1,  2140,    -1,    -1,    -1,
      -1,  2145,  2146,    -1,    48,    49,    -1,    -1,    -1,    -1,
    2154,    -1,    56,    -1,    -1,    -1,    60,    61,    -1,    -1,
    2859,    -1,    -1,    -1,  2168,  2169,    -1,  2171,    -1,    -1,
    2174,  2175,  2176,  2177,  2178,    79,    -1,   529,   530,   531,
      -1,    -1,    -1,    -1,   536,    -1,  2190,  2886,    -1,    -1,
      -1,    -1,    -1,    97,  2198,    -1,  2200,    -1,  2202,  2203,
     552,  2205,    -1,   555,    -1,    -1,  2210,  2211,  2212,    -1,
      -1,    -1,  2216,  2217,  2218,    -1,  2220,   121,  2222,    -1,
    2224,    -1,  2226,    -1,  2228,    -1,   130,   131,   132,  2233,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,
     144,    -1,    -1,    -1,    -1,    -1,   598,    -1,  2252,    -1,
      -1,    -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2268,    -1,   170,  2271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,  2988,
    2989,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     204,    -1,   206,    -1,    -1,    -1,    -1,   211,    -1,    -1,
     214,    -1,    -1,    -1,    -1,    -1,    -1,  3016,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   258,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   275,  3071,    -1,    -1,   279,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3096,    -1,    -1,
      -1,  3100,  3101,    -1,  3103,    -1,    -1,    13,    -1,    15,
      -1,    -1,  2416,  3112,    -1,    -1,    -1,    -1,  3117,    -1,
      -1,  3120,    -1,  3122,  3123,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    48,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      56,    -1,    -1,    -1,    60,    61,  3155,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    79,    -1,   379,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3188,
      -1,    97,   396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,  3211,    -1,    -1,   121,   420,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,   131,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,   144,    -1,
     444,    -1,    -1,   447,    -1,   449,    -1,    -1,   452,    -1,
      -1,   455,   456,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   465,    -1,   467,   170,    -1,    -1,    -1,    -1,    -1,
      -1,   475,    -1,    -1,    -1,    -1,    -1,   481,    -1,    -1,
      -1,    -1,    -1,   189,    -1,    -1,   490,    -1,    -1,    -1,
      -1,   495,    -1,   497,    -1,    -1,    -1,    -1,   204,    -1,
     206,    -1,    -1,    -1,    -1,   211,    -1,    -1,   214,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,    -1,
      -1,   535,   238,    -1,   240,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   258,    -1,    -1,    -1,    -1,    -1,    -1,  2663,
      -1,    -1,    -1,  2667,    -1,    -1,    -1,    -1,    -1,   275,
      -1,    -1,    -1,   279,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   585,    -1,  2687,  2688,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   597,    -1,    -1,    -1,   601,    -1,    -1,
     604,    -1,    -1,    -1,  2708,   609,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2717,    -1,  2719,    -1,  2721,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   637,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   379,    -1,    -1,    -1,    -1,  2782,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   420,    -1,    -1,    -1,  3517,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   444,    71,
      -1,   447,    -1,   449,    -1,    -1,   452,    -1,    -1,   455,
     456,    -1,  3551,    -1,    -1,  2859,    -1,  3556,    -1,   465,
      -1,   467,    -1,    95,    -1,    97,    -1,    -1,    -1,   475,
      -1,    -1,    -1,    -1,    -1,   481,    -1,   109,    -1,    -1,
      -1,    -1,  2886,    -1,   490,    -1,    -1,    32,    33,   495,
      -1,   497,    -1,    38,    -1,    40,    -1,    42,    43,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   528,    -1,    -1,   157,   158,    -1,    -1,   535,
      -1,   163,    -1,    -1,   166,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   196,    -1,   198,   112,    -1,    -1,
     115,    -1,    -1,   205,    -1,   207,    -1,    -1,   123,   585,
      -1,    -1,    -1,    -1,  2988,  2989,    -1,    -1,    -1,    -1,
      -1,   597,    -1,    -1,    -1,   601,    -1,   142,   604,   231,
     232,    -1,    -1,   609,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   159,    -1,    -1,    -1,    -1,    -1,
    3719,    -1,    -1,   255,  3723,    -1,    -1,    -1,    -1,    -1,
      -1,   637,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   186,    -1,   188,   276,    -1,    -1,    -1,   654,    -1,
      -1,    -1,    -1,  3752,    -1,    -1,   201,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3071,    -1,  3768,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3096,    -1,    -1,    -1,  3100,  3101,   243,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3112,    -1,
      -1,    -1,    -1,  3117,    -1,    -1,  3120,    -1,  3122,  3123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,   283,    -1,
     285,    -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3863,    -1,    -1,    -1,    -1,    -1,
      -1,   403,    -1,    -1,    -1,    -1,   321,   322,   323,    -1,
      -1,   413,   414,    -1,  3188,   417,   418,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   341,   342,   343,    -1,
      -1,  3900,  3901,   348,    -1,    -1,   351,  3211,   440,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   371,   372,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3935,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3944,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,   404,
     405,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   431,    -1,   520,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     532,    -1,    -1,    -1,   536,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   554,  4022,    -1,    -1,    -1,    -1,    -1,  4028,
    4029,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   486,    -1,    -1,    -1,   490,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   618,    -1,    -1,    -1,
      -1,    -1,   624,  4092,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   562,    -1,    -1,
     565,    -1,    -1,   568,   569,   570,   571,    -1,    -1,    -1,
      -1,    -1,    -1,  4132,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4167,    -1,
    4169,   616,   617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4179,    -1,  4181,  4182,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   641,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3517,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4222,    -1,  4224,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3551,    -1,    -1,
      -1,    -1,  3556,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4291,    -1,  4293,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4308,
    4309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4322,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4393,  4394,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4406,  4407,    -1,
      -1,    -1,    -1,    -1,    -1,  3719,    -1,    -1,    -1,  3723,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4433,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3752,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3768,    -1,  4465,    -1,    -1,    -1,
      -1,    -1,    -1,  4472,    -1,    -1,  4475,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4514,    -1,    -1,    -1,    -1,
      -1,    -1,  4521,    -1,  4523,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4533,    -1,    -1,    -1,    -1,    -1,
    4539,    -1,    -1,    -1,  4543,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4557,    -1,
    4559,    -1,  4561,    -1,    -1,    -1,    -1,    -1,    -1,  4568,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4583,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3900,  3901,    -1,    -1,
      -1,  4600,  4601,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4617,  4618,
      -1,    -1,    -1,  4622,    -1,    -1,    -1,    -1,    -1,  4628,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3944,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4659,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4022,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4092,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4132,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4167,    -1,  4169,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4179,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4222,    -1,
    4224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4291,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4309,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4393,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4472,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4514,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,  4539,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      44,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    -1,    68,    69,    -1,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    -1,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    -1,    -1,    99,   100,   101,   102,   103,
      -1,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,  4628,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,  4659,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,
     194,    -1,   196,    -1,   198,    -1,   200,   201,   202,   203,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,    -1,
     214,   215,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,   231,    -1,    -1,
     234,    -1,    -1,    -1,   238,   239,   240,   241,    -1,    -1,
     244,    -1,    -1,    -1,   248,   249,    -1,   251,   252,    -1,
      -1,    -1,   256,    -1,    -1,   259,   260,    -1,   262,   263,
      -1,   265,   266,   267,    -1,    -1,    -1,    -1,    -1,   273,
     274,    -1,   276,    -1,   278,    -1,   280,   281,    -1,    -1,
     284,    -1,    -1,    -1,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,    -1,    -1,    -1,
     324,   325,   326,   327,   328,   329,    -1,    -1,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,    -1,
     424,    -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,    -1,    -1,    -1,
     484,   485,   486,   487,   488,    -1,    -1,    -1,   492,    -1,
      -1,    -1,   496,    -1,   498,   499,   500,   501,    -1,   503,
     504,   505,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,
     514,   515,    -1,   517,   518,    -1,   520,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,   573,
     574,   575,   576,   577,   578,   579,   580,   581,    -1,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,    -1,    -1,   611,   612,   613,
     614,   615,    -1,    -1,   618,   619,    -1,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,   643,
     644,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    -1,    -1,    99,   100,   101,   102,   103,    -1,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,    -1,   214,   215,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,   238,   239,   240,   241,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,   265,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,   284,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,   611,   612,   613,   614,   615,
      -1,    -1,   618,   619,    -1,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    -1,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    -1,
      -1,    99,   100,   101,   102,   103,    -1,   105,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,    -1,    -1,    -1,   193,   194,   195,   196,    -1,
     198,    -1,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,    -1,   214,   215,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,
     228,   229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,
     238,   239,   240,   241,    -1,    -1,   244,    -1,    -1,    -1,
     248,   249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,    -1,   263,    -1,   265,   266,   267,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,
     278,    -1,   280,   281,    -1,    -1,   284,    -1,    -1,    -1,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,
     328,   329,    -1,    -1,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,    -1,    -1,    -1,   484,   485,   486,   487,
     488,    -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,
     498,   499,   500,   501,    -1,   503,   504,   505,   506,   507,
      -1,    -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,
     518,    -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,    -1,    -1,   611,   612,   613,   614,   615,    -1,    -1,
     618,   619,    -1,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,   643,   644,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    -1,    68,    69,
      -1,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    -1,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    -1,    -1,    99,
     100,   101,   102,   103,    -1,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
      -1,    -1,    -1,   193,   194,   195,   196,    -1,   198,    -1,
     200,   201,   202,   203,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,    -1,   214,   215,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,    -1,    -1,   234,    -1,    -1,    -1,   238,   239,
     240,   241,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,
      -1,   251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,    -1,   263,    -1,   265,   266,   267,    -1,    -1,
      -1,    -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,
     280,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,    -1,    -1,    -1,   324,   325,   326,   327,   328,   329,
      -1,    -1,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,    -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,
      -1,    -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,
     500,   501,    -1,   503,   504,   505,   506,   507,    -1,    -1,
      -1,    -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,
     520,   521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,   573,   574,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,
      -1,   611,   612,   613,   614,   615,    -1,    -1,   618,   619,
      -1,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,   643,   644,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    -1,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    -1,    -1,    99,   100,   101,
     102,   103,    -1,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,    -1,    -1,
      -1,   193,   194,   195,   196,    -1,   198,    -1,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,    -1,   214,   215,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
      -1,    -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,
      -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
      -1,   263,    -1,   265,   266,   267,    -1,    -1,    -1,    -1,
      -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,   281,
      -1,    -1,   284,    -1,    -1,    -1,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,    -1,
      -1,    -1,   324,   325,   326,   327,   328,   329,    -1,    -1,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,    -1,
      -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,
     492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,
      -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,    -1,   517,   518,    -1,   520,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,   576,   577,   578,    -1,   580,   581,
      -1,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,   611,
     612,   613,   614,   615,    -1,    -1,   618,   619,    -1,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,   643,   644,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    -1,    68,    69,    -1,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    -1,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    -1,    -1,    99,   100,   101,   102,   103,
      -1,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,
     194,    -1,   196,    -1,   198,    -1,   200,   201,   202,   203,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,    -1,
     214,   215,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,   231,    -1,    -1,
     234,    -1,    -1,    -1,   238,   239,   240,   241,    -1,    -1,
     244,    -1,    -1,    -1,   248,   249,    -1,   251,   252,    -1,
      -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,   263,
      -1,   265,   266,   267,    -1,    -1,    -1,    -1,    -1,   273,
     274,    -1,   276,    -1,   278,    -1,   280,   281,    -1,    -1,
     284,    -1,    -1,    -1,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,    -1,    -1,    -1,
     324,   325,   326,   327,   328,   329,    -1,    -1,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,    -1,
     424,    -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,    -1,    -1,    -1,
     484,   485,   486,   487,   488,    -1,    -1,    -1,   492,    -1,
      -1,    -1,   496,    -1,   498,   499,   500,   501,    -1,   503,
     504,   505,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,
     514,   515,    -1,   517,   518,    -1,   520,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,   573,
     574,   575,   576,   577,   578,    -1,   580,   581,    -1,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,    -1,    -1,   611,   612,   613,
     614,   615,    -1,    -1,   618,   619,    -1,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,   643,
     644,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    -1,    -1,    99,   100,   101,   102,   103,    -1,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,    -1,   214,   215,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,   238,   239,   240,   241,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,   265,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,   284,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,   611,   612,   613,   614,   615,
      -1,    -1,   618,   619,    -1,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    -1,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    -1,
      -1,    99,   100,   101,   102,   103,    -1,   105,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
     198,    -1,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,    -1,   214,   215,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,
     228,   229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,
     238,   239,   240,   241,    -1,    -1,   244,    -1,    -1,    -1,
     248,   249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,    -1,   263,    -1,   265,   266,   267,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,
     278,    -1,   280,   281,    -1,    -1,   284,    -1,    -1,    -1,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,
     328,   329,    -1,    -1,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,    -1,    -1,    -1,   484,   485,   486,   487,
     488,    -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,
     498,   499,   500,   501,    -1,   503,   504,   505,   506,   507,
      -1,    -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,
     518,    -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,    -1,    -1,   611,   612,   613,   614,   615,    -1,    -1,
     618,   619,    -1,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,   643,   644,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    -1,    68,    69,
      -1,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    -1,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    -1,    -1,    99,
     100,   101,   102,   103,    -1,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
      -1,    -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,
     200,   201,   202,   203,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,    -1,   214,   215,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,    -1,    -1,   234,    -1,    -1,    -1,   238,   239,
     240,   241,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,
      -1,   251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,    -1,   263,    -1,   265,   266,   267,    -1,    -1,
      -1,    -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,
     280,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,    -1,    -1,    -1,   324,   325,   326,   327,   328,   329,
      -1,    -1,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,    -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,
      -1,    -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,
     500,   501,    -1,   503,   504,   505,   506,   507,    -1,    -1,
      -1,    -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,
     520,   521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,   573,   574,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,
      -1,   611,   612,   613,   614,   615,    -1,    -1,   618,   619,
      -1,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,   643,   644,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    -1,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    -1,    -1,    99,   100,   101,
     102,   103,    -1,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,    -1,   214,   215,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
      -1,    -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,
      -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
      -1,   263,    -1,   265,   266,   267,    -1,    -1,    -1,    -1,
      -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,   281,
      -1,    -1,   284,    -1,    -1,    -1,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,    -1,
      -1,    -1,   324,   325,   326,   327,   328,   329,    -1,    -1,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,    -1,
      -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,
     492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,
      -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,    -1,   517,   518,    -1,   520,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,   576,   577,   578,    -1,   580,   581,
      -1,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,   611,
     612,   613,   614,   615,    -1,    -1,   618,   619,    -1,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,   643,   644,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    -1,
      64,    65,    66,    -1,    68,    69,    -1,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    -1,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    -1,    -1,    99,   100,   101,   102,   103,
      -1,   105,   106,   107,   108,    -1,   110,   111,   112,   113,
     114,   115,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,   172,    -1,
     174,   175,   176,   177,   178,   179,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,
     194,    -1,   196,    -1,   198,    -1,   200,   201,   202,   203,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,    -1,
     214,   215,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,   226,    -1,   228,   229,   230,   231,    -1,    -1,
     234,    -1,    -1,    -1,   238,   239,   240,   241,    -1,    -1,
     244,    -1,    -1,    -1,   248,   249,    -1,   251,   252,    -1,
      -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,   263,
      -1,   265,   266,   267,    -1,    -1,    -1,    -1,    -1,   273,
     274,    -1,   276,    -1,   278,    -1,   280,   281,    -1,    -1,
     284,    -1,    -1,    -1,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,    -1,    -1,    -1,
     324,   325,   326,   327,   328,   329,    -1,    -1,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,   393,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,    -1,
     424,    -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,   462,    -1,
     464,    -1,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,    -1,    -1,    -1,
     484,   485,   486,   487,   488,    -1,    -1,    -1,   492,    -1,
      -1,    -1,   496,    -1,   498,   499,   500,   501,    -1,   503,
     504,   505,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,
     514,   515,    -1,   517,   518,    -1,   520,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,   573,
     574,   575,   576,   577,   578,    -1,   580,   581,    -1,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,    -1,    -1,   611,   612,   613,
     614,   615,    -1,    -1,   618,   619,    -1,   621,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,   643,
     644,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    -1,    -1,    99,   100,   101,   102,   103,    -1,   105,
     106,   107,   108,    -1,   110,   111,   112,   113,   114,   115,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,   172,    -1,   174,   175,
     176,   177,   178,   179,   180,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,    -1,   214,   215,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,   238,   239,   240,   241,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,   265,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,   284,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,   350,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,   364,   365,
     366,    -1,   368,   369,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,   611,   612,   613,   614,   615,
      -1,    -1,   618,   619,    -1,   621,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    -1,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    -1,
      -1,    99,   100,   101,   102,   103,    -1,   105,   106,   107,
     108,    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,   172,    -1,   174,   175,   176,   177,
     178,   179,   180,   181,   182,    -1,   184,   185,   186,   187,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
     198,    -1,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,    -1,   214,   215,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,   226,    -1,
     228,   229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,
     238,   239,   240,   241,    -1,    -1,   244,    -1,    -1,    -1,
     248,   249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,    -1,   263,    -1,   265,   266,   267,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,
     278,    -1,   280,   281,    -1,    -1,   284,    -1,    -1,    -1,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,
     328,   329,    -1,    -1,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,   350,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,    -1,   364,   365,   366,    -1,
     368,   369,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,   393,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,   462,    -1,   464,    -1,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,    -1,    -1,    -1,   484,   485,   486,   487,
     488,    -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,
     498,   499,   500,   501,    -1,   503,   504,   505,   506,   507,
      -1,    -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,
     518,    -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,
     578,    -1,   580,   581,    -1,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,    -1,    -1,   611,   612,   613,   614,   615,    -1,    -1,
     618,   619,    -1,   621,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,   643,   644,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
      -1,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    -1,    64,    65,    66,    -1,    68,    69,
      -1,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    -1,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    -1,    -1,    99,
     100,   101,   102,   103,    -1,   105,   106,   107,   108,    -1,
     110,   111,   112,   113,   114,   115,    -1,    -1,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,   172,    -1,   174,   175,   176,   177,   178,   179,
     180,   181,   182,    -1,   184,   185,   186,   187,    -1,   189,
      -1,    -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,
     200,   201,   202,   203,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,    -1,   214,   215,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,   226,    -1,   228,   229,
     230,   231,    -1,    -1,   234,    -1,    -1,    -1,   238,   239,
     240,   241,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,
      -1,   251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,    -1,   263,    -1,   265,   266,   267,    -1,    -1,
      -1,    -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,
     280,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,    -1,    -1,    -1,   324,   325,   326,   327,   328,   329,
      -1,    -1,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
     350,   351,   352,    -1,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,    -1,   364,   365,   366,    -1,   368,   369,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,   393,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,   462,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,    -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,
      -1,    -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,
     500,   501,    -1,   503,   504,   505,   506,   507,    -1,    -1,
      -1,    -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,
     520,   521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,   573,   574,   575,   576,   577,   578,    -1,
     580,   581,    -1,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,
      -1,   611,   612,   613,   614,   615,    -1,    -1,   618,   619,
      -1,   621,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,   643,   644,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    -1,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    -1,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    -1,    -1,    99,   100,   101,
     102,   103,    -1,   105,   106,   107,   108,    -1,   110,   111,
     112,   113,   114,   115,    -1,    -1,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
     172,    -1,   174,   175,   176,   177,   178,   179,   180,   181,
     182,    -1,   184,   185,   186,   187,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,    -1,   214,   215,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
      -1,    -1,   234,    -1,    -1,    -1,   238,   239,   240,   241,
      -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
      -1,   263,    -1,   265,   266,   267,    -1,    -1,    -1,    -1,
      -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,   281,
      -1,    -1,   284,    -1,    -1,    -1,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,    -1,
      -1,    -1,   324,   325,   326,   327,   328,   329,    -1,    -1,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,    -1,   364,   365,   366,    -1,   368,   369,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,   393,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
     462,    -1,   464,    -1,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,    -1,
      -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,
     492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,
      -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,    -1,   517,   518,    -1,   520,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,   576,   577,   578,    -1,   580,   581,
      -1,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,   611,
     612,   613,   614,   615,    -1,    -1,   618,   619,    -1,   621,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,   643,   644,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      14,    -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    -1,
      64,    65,    66,    -1,    68,    69,    -1,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    -1,    88,    89,    90,    91,    92,    -1,
      -1,    -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,
      -1,   105,    -1,   107,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
      -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,
      -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,   143,
      -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,
     154,   155,    -1,   157,   158,   159,    -1,    -1,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,    -1,    -1,    -1,
     174,   175,   176,   177,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,    -1,   189,    -1,    -1,    -1,   193,
     194,    -1,   196,    -1,   198,    -1,   200,   201,   202,   203,
      -1,   205,    -1,   207,    -1,    -1,    -1,   211,   212,    -1,
     214,   215,    -1,   217,   218,    -1,    -1,    -1,   222,   223,
     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,    -1,
     234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,
     244,    -1,    -1,    -1,   248,   249,    -1,   251,   252,    -1,
      -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,   263,
      -1,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,   273,
     274,    -1,   276,    -1,   278,    -1,   280,   281,    -1,    -1,
     284,    -1,    -1,    -1,    -1,   289,    -1,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,    -1,    -1,    -1,    -1,
     324,   325,   326,   327,   328,   329,    -1,    -1,   332,   333,
     334,    -1,   336,    -1,   338,    -1,   340,   341,   342,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,    -1,
      -1,   355,   356,   357,   358,   359,   360,   361,    -1,    -1,
      -1,   365,   366,    -1,   368,   369,   370,    -1,   372,   373,
     374,    -1,   376,   377,   378,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,    -1,   413,
      -1,   415,   416,   417,   418,   419,    -1,   421,   422,    -1,
     424,    -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,   462,    -1,
     464,    -1,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,    -1,   479,   480,    -1,    -1,    -1,
     484,   485,   486,   487,   488,    -1,    -1,    -1,   492,    -1,
      -1,    -1,   496,    -1,   498,   499,   500,   501,    -1,   503,
     504,   505,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,
     514,   515,    -1,   517,   518,    -1,   520,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,   529,   530,   531,   532,    -1,
      -1,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
      -1,   555,   556,    -1,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,   573,
     574,   575,   576,   577,   578,    -1,   580,   581,    -1,    -1,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,    -1,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,
     624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
     634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,   643,
     644,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,   661,   662,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    -1,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,
      -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
     232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
      -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,
     252,    -1,    -1,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,   263,    -1,    -1,   266,   267,    -1,   269,    -1,    -1,
      -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,    -1,    -1,
      -1,    -1,   324,   325,   326,   327,   328,   329,    -1,    -1,
     332,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
     462,    -1,   464,    -1,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,   481,
      -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,
     492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,    -1,    -1,
      -1,   513,   514,   515,    -1,   517,   518,    -1,   520,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,   531,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,   576,   577,   578,    -1,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,   643,   644,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     662,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    -1,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,
      -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,   197,   198,    -1,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
     232,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
      -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,
     252,    -1,    -1,    -1,   256,   257,    -1,   259,   260,    -1,
      -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,    -1,
      -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,    -1,    -1,
      -1,    -1,   324,   325,   326,   327,   328,   329,    -1,    -1,
     332,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
     462,    -1,   464,    -1,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,    -1,
      -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,
     492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,
      -1,   503,   504,   505,   506,   507,   508,    -1,    -1,    -1,
      -1,   513,   514,   515,    -1,   517,   518,    -1,   520,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,   531,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,   576,   577,   578,    -1,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,   643,   644,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
     662,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    -1,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    -1,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,
      -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
      -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
      -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,    -1,
      -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,    -1,    -1,
      -1,    -1,   324,   325,   326,   327,   328,   329,    -1,    -1,
     332,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
     462,    -1,   464,    -1,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,   481,
      -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,
     492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,
      -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,    -1,   517,   518,    -1,   520,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,   531,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,   576,   577,   578,    -1,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,   643,   644,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    14,   655,    -1,    -1,    18,    -1,    -1,    21,
     662,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    -1,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    -1,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,
      -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
      -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
      -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,    -1,
      -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,    -1,    -1,
      -1,    -1,   324,   325,   326,   327,   328,   329,    -1,    -1,
     332,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
     462,    -1,   464,    -1,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,    -1,
      -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,
     492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,
      -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,    -1,   517,   518,    -1,   520,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,   531,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,   576,   577,   578,    -1,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,   643,   644,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,   655,    14,    -1,    -1,    -1,    18,   661,
     662,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    -1,    64,    65,    66,    -1,    68,    69,
      -1,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    -1,    88,    89,
      90,    91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,
      -1,   101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,    -1,   184,   185,   186,    -1,    -1,   189,
      -1,    -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,
     200,   201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,
      -1,   211,   212,    -1,   214,    -1,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,
     240,    -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,
      -1,   251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,    -1,   263,    -1,    -1,   266,   267,    -1,    -1,
      -1,    -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
      -1,    -1,    -1,    -1,   324,   325,   326,   327,   328,   329,
      -1,    -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,   359,
     360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,   462,    -1,   464,    -1,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,    -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,
      -1,    -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,
     500,   501,    -1,   503,   504,   505,   506,   507,    -1,    -1,
      -1,    -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,
     520,   521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,
     530,   531,   532,    -1,    -1,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
      -1,    -1,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,   573,   574,   575,   576,   577,   578,    -1,
     580,   581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,   643,   644,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,   654,    -1,    14,    -1,    -1,    -1,
      18,    -1,   662,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    -1,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    -1,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    96,    -1,
      -1,    99,    -1,   101,    -1,   103,    -1,   105,    -1,   107,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,    -1,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,    -1,   184,   185,   186,    -1,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
     198,    -1,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,   242,    -1,   244,    -1,    -1,    -1,
     248,   249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,    -1,   263,    -1,    -1,   266,   267,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,
     278,    -1,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,
     328,   329,    -1,    -1,   332,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,
      -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,   462,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,    -1,    -1,    -1,   484,   485,   486,   487,
     488,    -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,
     498,   499,   500,   501,    -1,   503,   504,   505,   506,   507,
      -1,    -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,
     518,    -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,   529,   530,   531,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,
     578,    -1,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,   643,   644,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,    -1,    21,   662,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    -1,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    -1,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    96,    -1,
      -1,    99,    -1,   101,    -1,   103,    -1,   105,    -1,   107,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,    -1,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,    -1,   184,   185,   186,    -1,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
     198,    -1,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,    -1,    -1,   244,    -1,    -1,    -1,
     248,   249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,    -1,   263,    -1,    -1,   266,   267,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,
     278,    -1,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,
     328,   329,    -1,    -1,   332,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,
      -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,   462,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,    -1,    -1,    -1,   484,   485,   486,   487,
     488,    -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,
     498,   499,   500,   501,    -1,   503,   504,   505,   506,   507,
      -1,    -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,
     518,    -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,   529,   530,   531,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,
     578,    -1,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,   643,   644,    -1,    -1,    -1,
       5,   649,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,   662,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    -1,    88,    89,    90,    91,    92,    -1,    -1,
      -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,
     105,    -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,    -1,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,    -1,   184,
     185,   186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,
      -1,   196,    -1,   198,    -1,   200,   201,   202,   203,    -1,
     205,    -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,
      -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,
      -1,    -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,
      -1,   276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,
     325,   326,   327,   328,   329,    -1,    -1,   332,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,   424,
      -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,
     455,    -1,   457,   458,    -1,   460,   461,   462,    -1,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,
     485,   486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,
      -1,   496,    -1,   498,   499,   500,   501,    -1,   503,   504,
     505,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,
     515,    -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,
      -1,    -1,   527,   528,   529,   530,   531,   532,    -1,    -1,
     535,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,    -1,
     555,   556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,
     575,   576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,    -1,   641,    -1,   643,   644,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,   654,
      -1,    14,    -1,    -1,    -1,    18,    -1,   662,    21,    -1,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      -1,    64,    65,    66,    -1,    68,    69,    -1,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    -1,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,    -1,
     103,    -1,   105,    -1,   107,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,    -1,
      -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,    -1,
     133,    -1,   135,   136,   137,   138,   139,    -1,    -1,    -1,
     143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,   152,
      -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,    -1,    -1,
      -1,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
      -1,   184,   185,   186,    -1,    -1,   189,    -1,    -1,    -1,
     193,   194,    -1,   196,    -1,   198,    -1,   200,   201,   202,
     203,    -1,   205,    -1,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,    -1,    -1,   217,   218,    -1,    -1,    -1,   222,
     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,
      -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,    -1,
      -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,   252,
      -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,    -1,
     263,    -1,    -1,   266,   267,    -1,    -1,    -1,    -1,    -1,
     273,   274,    -1,   276,    -1,   278,    -1,   280,   281,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,    -1,    -1,    -1,
      -1,   324,   325,   326,   327,   328,   329,    -1,    -1,   332,
     333,   334,    -1,   336,    -1,   338,    -1,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,    -1,   351,   352,
      -1,    -1,   355,   356,   357,   358,   359,   360,   361,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,   372,
     373,   374,    -1,   376,   377,   378,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,
      -1,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,    -1,
     413,    -1,   415,   416,   417,   418,   419,    -1,   421,   422,
      -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,
     453,    -1,   455,    -1,   457,   458,    -1,   460,   461,   462,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,    -1,   479,   480,    -1,    -1,
      -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,   492,
      -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,    -1,
     503,   504,   505,   506,   507,    -1,    -1,    -1,    -1,    -1,
     513,   514,   515,    -1,   517,   518,    -1,   520,   521,    -1,
      -1,   524,    -1,    -1,   527,   528,   529,   530,   531,   532,
      -1,    -1,   535,   536,    -1,   538,   539,   540,   541,   542,
     543,    -1,    -1,   546,   547,   548,   549,    -1,   551,   552,
      -1,    -1,   555,   556,    -1,   558,   559,    -1,    -1,   562,
     563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,
     573,   574,   575,   576,   577,   578,    -1,   580,   581,    -1,
      -1,    -1,   585,   586,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,
     603,    -1,   605,    -1,   607,   608,    -1,    -1,    -1,    -1,
      -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,   622,
     623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,    -1,
     633,   634,    -1,   636,   637,   638,    -1,    -1,   641,    -1,
     643,   644,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,   661,   662,
      21,    -1,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,   462,    -1,   464,    -1,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
      -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,
     501,    -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,
     531,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,    -1,   643,   644,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   662,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,   462,    -1,   464,    -1,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
      -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,
     501,    -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,
     531,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,    -1,   643,   644,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   662,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,   462,    -1,   464,    -1,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
      -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,
     501,    -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,
     531,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,    -1,   643,   644,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   662,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,   462,    -1,   464,    -1,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
      -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,
     501,    -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,
     531,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,    -1,   643,   644,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      21,   662,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
     121,    -1,    -1,    -1,   125,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,
      -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,
      -1,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,
      -1,    -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,   394,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,   462,    -1,   464,    -1,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,    -1,   479,   480,
      -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,
     501,    -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,
     531,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,
      -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,
     641,    -1,   643,   644,    -1,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,
     661,    21,    -1,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    -1,    64,    65,    66,    -1,    68,    69,
      -1,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    -1,    88,    89,
      90,    91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,
      -1,   101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,
     120,   121,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,
      -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,   139,
      -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,    -1,
      -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,   159,
      -1,    -1,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,    -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,    -1,   184,   185,   186,    -1,    -1,   189,
      -1,    -1,    -1,   193,   194,    -1,   196,    -1,   198,    -1,
     200,   201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,
      -1,   211,   212,    -1,   214,    -1,    -1,   217,   218,    -1,
      -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,   229,
     230,   231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,
     240,    -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,
      -1,   251,   252,    -1,    -1,    -1,   256,    -1,    -1,   259,
     260,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,    -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,
     280,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
      -1,    -1,    -1,    -1,   324,   325,   326,   327,   328,   329,
      -1,    -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,
     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,
      -1,   351,   352,    -1,    -1,   355,   356,   357,   358,   359,
     360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,    -1,
     370,    -1,   372,   373,   374,    -1,   376,   377,   378,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,    -1,   413,    -1,   415,   416,   417,   418,   419,
      -1,   421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,   462,    -1,   464,    -1,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,    -1,   479,
     480,    -1,    -1,    -1,   484,   485,   486,   487,   488,    -1,
      -1,    -1,   492,    -1,    -1,    -1,   496,    -1,   498,   499,
     500,   501,    -1,   503,   504,   505,   506,   507,    -1,    -1,
      -1,    -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,
     520,   521,    -1,    -1,   524,    -1,    -1,   527,   528,   529,
     530,   531,   532,    -1,    -1,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,    -1,   555,   556,    -1,   558,   559,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,   573,   574,   575,   576,   577,   578,    -1,
     580,   581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,    -1,
      -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,
      -1,    -1,   622,   623,   624,   625,   626,    -1,    -1,    -1,
      -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,    -1,
      -1,   641,    -1,   643,   644,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,   661,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    -1,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    -1,    88,
      89,    90,    91,    92,    -1,    -1,    -1,    96,    -1,    -1,
      99,    -1,   101,    -1,   103,    -1,   105,    -1,   107,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,    -1,
     129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,    -1,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,    -1,   184,   185,   186,    -1,    -1,
     189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,   198,
      -1,   200,   201,   202,   203,    -1,   205,    -1,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,    -1,
     239,   240,    -1,    -1,    -1,   244,    -1,    -1,    -1,   248,
     249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,   278,
      -1,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,   328,
     329,    -1,    -1,   332,   333,   334,    -1,   336,    -1,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,   394,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,   446,    -1,   448,
     449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,
      -1,   460,   461,   462,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,    -1,    -1,    -1,   484,   485,   486,   487,   488,
      -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,   498,
     499,   500,   501,    -1,   503,   504,   505,   506,   507,    -1,
      -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,   518,
      -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,   528,
     529,   530,   531,   532,    -1,    -1,   535,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,   578,
      -1,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,   596,   597,    -1,
      -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,
      -1,    -1,    -1,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,   643,   644,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,    -1,   661,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    -1,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    -1,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    96,    -1,
      -1,    99,    -1,   101,    -1,   103,    -1,   105,    -1,   107,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,    -1,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,    -1,   184,   185,   186,    -1,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
     198,    -1,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,    -1,    -1,   244,    -1,    -1,    -1,
     248,   249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,    -1,   263,    -1,    -1,   266,   267,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,
     278,    -1,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,
     328,   329,    -1,    -1,   332,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,
      -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,   462,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,    -1,    -1,    -1,   484,   485,   486,   487,
     488,    -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,
     498,   499,   500,   501,    -1,   503,   504,   505,   506,   507,
      -1,    -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,
     518,    -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,   529,   530,   531,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,
     578,    -1,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,   643,   644,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,
      -1,    18,    -1,   661,    21,    -1,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    -1,    64,    65,    66,
      -1,    68,    69,    -1,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,    96,
      -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,    -1,
     107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,
     127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,
     137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,
     147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,
     157,   158,   159,    -1,    -1,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,    -1,    -1,    -1,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,    -1,   184,   185,   186,
      -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,
      -1,   198,    -1,   200,   201,   202,   203,    -1,   205,    -1,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,    -1,
     217,   218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,
      -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,    -1,
      -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,    -1,
      -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,   256,
      -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,   276,
      -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,   326,
     327,   328,   329,    -1,    -1,   332,   333,   334,    -1,   336,
      -1,   338,    -1,   340,   341,   342,   343,   344,   345,   346,
     347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,
     357,   358,   359,   360,   361,    -1,    -1,    -1,   365,   366,
      -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,
     377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,    -1,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,   416,
     417,   418,   419,    -1,   421,   422,    -1,   424,    -1,    -1,
      -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,
     457,   458,    -1,   460,   461,   462,    -1,   464,    -1,    -1,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,   486,
     487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,   496,
      -1,   498,   499,   500,   501,    -1,   503,   504,   505,   506,
     507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,    -1,
     517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,    -1,
     527,   528,   529,   530,   531,   532,    -1,    -1,   535,   536,
      -1,   538,   539,   540,   541,   542,   543,    -1,    -1,   546,
     547,   548,   549,    -1,   551,   552,    -1,    -1,   555,   556,
      -1,   558,   559,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,   576,
     577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,
      -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,   626,
      -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,
     637,   638,    -1,    -1,   641,    -1,   643,   644,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,   661,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,   661,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    -1,    88,    89,    90,    91,    92,    -1,    -1,
      -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,
     105,    -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,    -1,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,    -1,   184,
     185,   186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,
      -1,   196,    -1,   198,    -1,   200,   201,   202,   203,    -1,
     205,    -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,
      -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,
      -1,    -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,
      -1,   276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,
     325,   326,   327,   328,   329,    -1,    -1,   332,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,   424,
      -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,
     455,    -1,   457,   458,    -1,   460,   461,   462,    -1,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,
     485,   486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,
      -1,   496,    -1,   498,   499,   500,   501,    -1,   503,   504,
     505,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,
     515,    -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,
      -1,    -1,   527,   528,   529,   530,   531,   532,    -1,    -1,
     535,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,    -1,
     555,   556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,
     575,   576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,    -1,   641,    -1,   643,   644,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,   661,    -1,    23,    24,
      25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    -1,    78,    -1,    80,    81,    82,    83,    -1,
      85,    86,    -1,    88,    89,    90,    -1,    92,    -1,    -1,
      -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,
     105,    -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,    -1,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
     185,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,
      -1,   196,    -1,   198,    -1,   200,   201,   202,   203,    -1,
     205,    -1,   207,    -1,    -1,    -1,    -1,   212,    -1,    -1,
      -1,    -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,
     225,   226,    -1,   228,   229,   230,   231,    -1,    -1,   234,
      -1,    -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,
      -1,    -1,    -1,   248,   249,    -1,   251,   252,   253,    -1,
      -1,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,
      -1,   276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,
      -1,   286,    -1,    -1,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,
     325,   326,   327,   328,   329,    -1,    -1,   332,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,   359,   360,   361,    -1,    -1,    -1,
      -1,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,    -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,   424,
      -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,    -1,    -1,   448,    -1,   450,   451,    -1,   453,    -1,
      -1,    -1,   457,    -1,    -1,   460,   461,   462,   463,   464,
      -1,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
      -1,   476,   477,    -1,   479,    -1,    -1,    -1,    -1,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,   492,    -1,    -1,
      -1,   496,    -1,    -1,   499,    -1,   501,    -1,   503,    -1,
      -1,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,
     515,    -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,
      -1,    -1,   527,    -1,   529,   530,   531,   532,    -1,    -1,
      -1,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,    -1,
     555,   556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,
     575,   576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,
      -1,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,
      -1,    -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,
      -1,   636,    -1,   638,    -1,    -1,   641,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,
      18,   656,    -1,    21,    -1,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    -1,    64,    65,    66,    -1,
      68,    69,    -1,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    -1,
      88,    89,    90,    91,    92,    -1,    -1,    -1,    96,    -1,
      -1,    99,    -1,   101,    -1,   103,    -1,   105,    -1,   107,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,
      -1,   129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,
     138,   139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,
     148,    -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,
     158,   159,    -1,    -1,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,    -1,    -1,    -1,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,    -1,   184,   185,   186,    -1,
      -1,   189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,
     198,    -1,   200,   201,   202,   203,    -1,   205,    -1,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,    -1,   217,
     218,    -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,
     228,   229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,
      -1,   239,   240,    -1,    -1,    -1,   244,    -1,    -1,    -1,
     248,   249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,
      -1,   259,   260,    -1,    -1,   263,    -1,    -1,   266,   267,
      -1,    -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,
     278,    -1,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,
     328,   329,    -1,    -1,   332,   333,   334,    -1,   336,    -1,
     338,    -1,   340,   341,   342,   343,   344,   345,   346,   347,
     348,    -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,
     358,   359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,
      -1,    -1,   370,    -1,   372,   373,   374,    -1,   376,   377,
     378,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,    -1,   413,    -1,   415,   416,   417,
     418,   419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,   462,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
      -1,   479,   480,    -1,    -1,    -1,   484,   485,   486,   487,
     488,    -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,
     498,   499,   500,   501,    -1,   503,   504,   505,   506,   507,
      -1,    -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,
     518,    -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,   529,   530,   531,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,    -1,   555,   556,    -1,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,
     578,    -1,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,    -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,
     618,    -1,    -1,    -1,   622,   623,   624,   625,   626,    -1,
      -1,    -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,
     638,    -1,    -1,   641,    -1,   643,   644,    -1,    -1,    -1,
       5,   649,     7,     8,     9,    10,    11,    -1,    -1,    14,
      -1,    -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,
      65,    66,    -1,    68,    69,    -1,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    -1,    88,    89,    90,    91,    92,    -1,    -1,
      -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,
     105,    -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,
      -1,   126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,
     135,   136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,
      -1,   146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,
     155,    -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,    -1,    -1,    -1,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,    -1,   184,
     185,   186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,
      -1,   196,    -1,   198,    -1,   200,   201,   202,   203,    -1,
     205,    -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,    -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,
     225,    -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,
      -1,    -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,
      -1,    -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,
      -1,   256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,
      -1,   266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,
      -1,   276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,
     325,   326,   327,   328,   329,    -1,    -1,   332,   333,   334,
      -1,   336,    -1,   338,    -1,   340,   341,   342,   343,   344,
     345,   346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,
     355,   356,   357,   358,   359,   360,   361,    -1,    -1,    -1,
     365,   366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,
      -1,   376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,
     415,   416,   417,   418,   419,    -1,   421,   422,    -1,   424,
      -1,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,
     455,    -1,   457,   458,    -1,   460,   461,   462,    -1,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,
     485,   486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,
      -1,   496,    -1,   498,   499,   500,   501,    -1,   503,   504,
     505,   506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,
     515,    -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,
      -1,    -1,   527,   528,   529,   530,   531,   532,    -1,    -1,
     535,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,    -1,
     555,   556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,
     575,   576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,
     615,    -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,
     625,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,
      -1,   636,   637,   638,    -1,    -1,   641,    -1,   643,   644,
      -1,    -1,    -1,     5,   649,     7,     8,     9,    10,    11,
      -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,    21,
      -1,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    -1,    64,    65,    66,    -1,    68,    69,    -1,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    -1,    88,    89,    90,    91,
      92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,
      -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,   121,
      -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,    -1,
      -1,   133,    -1,   135,   136,   137,   138,   139,    -1,    -1,
      -1,   143,    -1,    -1,   146,   147,   148,    -1,    -1,    -1,
     152,    -1,   154,   155,    -1,   157,   158,   159,    -1,    -1,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,    -1,
      -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,    -1,   184,   185,   186,    -1,    -1,   189,    -1,    -1,
      -1,   193,   194,    -1,   196,    -1,   198,    -1,   200,   201,
     202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,    -1,   217,   218,    -1,    -1,    -1,
     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,
      -1,    -1,   234,    -1,    -1,    -1,    -1,   239,   240,    -1,
      -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,   251,
     252,    -1,    -1,    -1,   256,    -1,    -1,   259,   260,    -1,
      -1,   263,    -1,    -1,   266,   267,    -1,    -1,    -1,    -1,
      -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,   281,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,    -1,    -1,
      -1,    -1,   324,   325,   326,   327,   328,   329,    -1,    -1,
     332,   333,   334,    -1,   336,    -1,   338,    -1,   340,   341,
     342,   343,   344,   345,   346,   347,   348,    -1,    -1,   351,
     352,    -1,    -1,   355,   356,   357,   358,   359,   360,   361,
      -1,    -1,    -1,   365,   366,    -1,    -1,    -1,   370,    -1,
     372,   373,   374,    -1,   376,   377,   378,    -1,   380,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
      -1,   413,    -1,   415,   416,   417,   418,   419,    -1,   421,
     422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
     462,    -1,   464,    -1,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,    -1,   479,   480,    -1,
      -1,    -1,   484,   485,   486,   487,   488,    -1,    -1,    -1,
     492,    -1,    -1,    -1,   496,    -1,   498,   499,   500,   501,
      -1,   503,   504,   505,   506,   507,    -1,    -1,    -1,    -1,
      -1,   513,   514,   515,    -1,   517,   518,    -1,   520,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,   529,   530,   531,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,   573,   574,   575,   576,   577,   578,    -1,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,    -1,    -1,    -1,
      -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,    -1,
     622,   623,   624,   625,   626,    -1,    -1,    -1,    -1,    -1,
      -1,   633,   634,    -1,   636,   637,   638,    -1,    -1,   641,
      -1,   643,   644,    -1,    -1,    -1,     5,   649,     7,     8,
       9,    10,    11,    -1,    -1,    14,    -1,    -1,    -1,    18,
      -1,    -1,    21,    -1,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    -1,    64,    65,    66,    -1,    68,
      69,    -1,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    -1,    88,
      89,    90,    91,    92,    -1,    -1,    -1,    96,    -1,    -1,
      99,    -1,   101,    -1,   103,    -1,   105,    -1,   107,    -1,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,    -1,
      -1,   120,   121,    -1,    -1,    -1,    -1,   126,   127,    -1,
     129,    -1,    -1,    -1,   133,    -1,   135,   136,   137,   138,
     139,    -1,    -1,    -1,   143,    -1,    -1,   146,   147,   148,
      -1,    -1,    -1,   152,    -1,   154,   155,    -1,   157,   158,
     159,    -1,    -1,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,    -1,    -1,    -1,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,    -1,   184,   185,   186,    -1,    -1,
     189,    -1,    -1,    -1,   193,   194,    -1,   196,    -1,   198,
      -1,   200,   201,   202,   203,    -1,   205,    -1,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,    -1,   217,   218,
      -1,    -1,    -1,   222,   223,   224,   225,    -1,    -1,   228,
     229,   230,   231,    -1,    -1,   234,    -1,    -1,    -1,    -1,
     239,   240,    -1,    -1,    -1,   244,    -1,    -1,    -1,   248,
     249,    -1,   251,   252,    -1,    -1,    -1,   256,    -1,    -1,
     259,   260,    -1,    -1,   263,    -1,    -1,   266,   267,    -1,
      -1,    -1,    -1,    -1,   273,   274,    -1,   276,    -1,   278,
      -1,   280,   281,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,    -1,    -1,    -1,    -1,   324,   325,   326,   327,   328,
     329,    -1,    -1,   332,   333,   334,    -1,   336,    -1,   338,
      -1,   340,   341,   342,   343,   344,   345,   346,   347,   348,
      -1,    -1,   351,   352,    -1,    -1,   355,   356,   357,   358,
     359,   360,   361,    -1,    -1,    -1,   365,   366,    -1,    -1,
      -1,   370,    -1,   372,   373,   374,    -1,   376,   377,   378,
      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,   394,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,    -1,   413,    -1,   415,   416,   417,   418,
     419,    -1,   421,   422,    -1,   424,    -1,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,   446,    -1,   448,
     449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,
      -1,   460,   461,   462,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
     479,   480,    -1,    -1,    -1,   484,   485,   486,   487,   488,
      -1,    -1,    -1,   492,    -1,    -1,    -1,   496,    -1,   498,
     499,   500,   501,    -1,   503,   504,   505,   506,   507,    -1,
      -1,    -1,    -1,    -1,   513,   514,   515,    -1,   517,   518,
      -1,   520,   521,    -1,    -1,   524,    -1,    -1,   527,   528,
     529,   530,   531,   532,    -1,    -1,   535,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,    -1,   555,   556,    -1,   558,
     559,    -1,    -1,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,   573,   574,   575,   576,   577,   578,
      -1,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,   596,   597,    -1,
      -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,
      -1,    -1,    -1,    -1,    -1,    -1,   615,    -1,    -1,   618,
      -1,    -1,    -1,   622,   623,   624,   625,   626,    -1,    -1,
      -1,    -1,    -1,    -1,   633,   634,    -1,   636,   637,   638,
      -1,    -1,   641,    -1,   643,   644,    -1,    -1,    -1,     5,
     649,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,   187,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,   215,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,   284,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,    -1,   365,
     366,    -1,    -1,   369,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,   510,   511,   512,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,   589,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,   160,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,   491,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,   284,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,   369,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,   393,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,   589,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,   102,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,   215,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    19,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,   511,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,   195,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    21,    -1,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    91,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,   121,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,   143,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,   189,    -1,    -1,    -1,   193,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
      -1,   217,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,   240,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,   259,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,   365,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,    -1,   479,   480,    -1,    -1,    -1,   484,   485,
     486,   487,   488,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,   498,   499,   500,   501,    -1,   503,   504,   505,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,   529,   530,   531,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,   634,    -1,
     636,   637,   638,    -1,    -1,   641,    -1,   643,   644,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    -1,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   147,   148,    -1,   150,   151,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,   185,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,
      -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,   253,    -1,    -1,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
     286,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,    -1,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
      -1,    -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,   479,    -1,    -1,    -1,    -1,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,    -1,    -1,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,    -1,   529,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,    -1,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,    -1,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      -1,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,   150,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,   185,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,   253,    -1,    -1,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,    -1,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,    -1,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,    -1,    -1,   448,    -1,   450,
     451,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,   479,    -1,
      -1,    -1,    -1,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,    -1,    -1,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,    -1,   529,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,    -1,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
      -1,    -1,   603,    -1,    -1,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,   627,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    -1,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   147,   148,    -1,   150,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,   185,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,
      -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,   253,    -1,    -1,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
     286,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,    -1,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
      -1,    -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,   479,    -1,    -1,    -1,    -1,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,    -1,    -1,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,    -1,   529,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,    -1,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,    -1,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,   627,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      -1,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,   185,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,   253,    -1,    -1,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,    -1,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,    -1,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,    -1,    -1,   448,    -1,   450,
     451,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,   479,    -1,
      -1,    -1,    -1,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,    -1,    -1,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,    -1,   529,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,    -1,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
      -1,    -1,   603,    -1,    -1,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    -1,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,   185,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,
      -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,   253,    -1,    -1,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
     286,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,    -1,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
      -1,    -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,   479,    -1,    -1,    -1,    -1,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,    -1,    -1,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,    -1,   529,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,    -1,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,    -1,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      -1,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,   185,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,   253,    -1,    -1,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,    -1,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,    -1,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,    -1,    -1,   448,    -1,   450,
     451,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,   479,    -1,
      -1,    -1,    -1,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,    -1,    -1,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,    -1,   529,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,    -1,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
      -1,    -1,   603,    -1,    -1,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    -1,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,   154,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,   185,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,
      -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,   253,    -1,    -1,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
     286,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,    -1,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
      -1,    -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,   479,    -1,    -1,    -1,    -1,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,    -1,    -1,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,    -1,   529,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,    -1,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,    -1,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      -1,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,   154,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,   185,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,   253,    -1,    -1,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,    -1,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,    -1,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,    -1,    -1,   448,    -1,   450,
     451,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,   479,    -1,
      -1,    -1,    -1,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,    -1,    -1,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,    -1,   529,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,    -1,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
      -1,    -1,   603,    -1,    -1,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    64,    65,
      66,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    -1,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,    -1,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,   185,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,
      -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,
     226,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,   253,    -1,    -1,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
     286,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,    -1,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
      -1,    -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,
      -1,   457,    -1,    -1,   460,   461,   462,   463,   464,    -1,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,   479,    -1,    -1,    -1,    -1,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,    -1,    -1,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,    -1,   529,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,    -1,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,    -1,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,   629,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,     5,   641,     7,     8,     9,    10,
      11,    -1,    -1,    14,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    23,    24,    25,    26,    27,    -1,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,
      51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    62,    -1,    64,    65,    66,    -1,    68,    69,    -1,
      71,    72,    -1,    74,    75,    76,    -1,    78,    -1,    80,
      81,    82,    83,    -1,    85,    86,    -1,    88,    89,    90,
      -1,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
     101,    -1,   103,    -1,   105,    -1,   107,    -1,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,    -1,    -1,   120,
      -1,    -1,    -1,    -1,    -1,   126,   127,    -1,   129,    -1,
      -1,    -1,   133,    -1,   135,   136,   137,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,   146,   147,   148,    -1,    -1,
      -1,   152,    -1,    -1,   155,    -1,   157,   158,   159,    -1,
      -1,   162,   163,    -1,   165,   166,   167,   168,   169,    -1,
      -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,   185,   186,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,   196,    -1,   198,    -1,   200,
     201,   202,   203,    -1,   205,    -1,   207,    -1,    -1,    -1,
      -1,   212,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,   222,   223,   224,   225,   226,    -1,   228,   229,   230,
     231,    -1,    -1,   234,    -1,    -1,    -1,    -1,   239,    -1,
      -1,    -1,    -1,   244,    -1,    -1,    -1,   248,   249,    -1,
     251,   252,   253,    -1,    -1,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,    -1,   266,   267,    -1,    -1,    -1,
      -1,    -1,   273,   274,    -1,   276,    -1,   278,    -1,   280,
     281,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,    -1,
      -1,    -1,    -1,   324,   325,   326,   327,   328,   329,    -1,
      -1,   332,   333,   334,    -1,   336,    -1,   338,    -1,   340,
     341,   342,   343,   344,   345,   346,   347,   348,    -1,    -1,
     351,   352,    -1,    -1,   355,   356,   357,   358,   359,   360,
     361,    -1,    -1,    -1,    -1,   366,    -1,    -1,    -1,   370,
      -1,   372,   373,   374,    -1,   376,   377,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,    -1,    -1,   395,    -1,   397,   398,   399,   400,
     401,   402,   403,   404,   405,    -1,    -1,    -1,    -1,   410,
     411,    -1,   413,    -1,   415,   416,   417,   418,   419,    -1,
     421,   422,    -1,   424,    -1,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,    -1,    -1,   448,    -1,   450,
     451,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,   460,
     461,   462,   463,   464,    -1,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,    -1,   476,   477,    -1,   479,    -1,
      -1,    -1,    -1,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,   492,    -1,    -1,    -1,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,    -1,    -1,   506,   507,    -1,    -1,    -1,
      -1,    -1,   513,   514,   515,    -1,   517,   518,    -1,   520,
     521,    -1,    -1,   524,    -1,    -1,   527,    -1,   529,   530,
     531,   532,    -1,    -1,    -1,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,    -1,   555,   556,    -1,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,   573,   574,   575,   576,   577,   578,    -1,   580,
     581,    -1,    -1,    -1,    -1,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
      -1,    -1,   603,    -1,    -1,    -1,   607,   608,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,   618,    -1,    -1,
      -1,   622,   623,   624,   625,   626,    -1,    -1,   629,    -1,
      -1,    -1,   633,    -1,    -1,   636,    -1,   638,    -1,     5,
     641,     7,     8,     9,    10,    11,    -1,    -1,    14,    -1,
      -1,    -1,    18,    -1,    -1,    -1,    -1,    23,    24,    25,
      26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    -1,    64,    65,
      -1,    -1,    68,    69,    -1,    71,    72,    -1,    74,    75,
      76,    -1,    78,    -1,    80,    81,    82,    83,    -1,    85,
      86,    -1,    88,    89,    90,    -1,    92,    -1,    -1,    -1,
      96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,   105,
      -1,   107,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
     126,   127,    -1,   129,    -1,    -1,    -1,   133,    -1,   135,
     136,   137,   138,   139,    -1,    -1,    -1,    -1,    -1,    -1,
     146,   147,   148,    -1,    -1,    -1,   152,    -1,    -1,   155,
      -1,   157,   158,   159,    -1,    -1,   162,   163,    -1,   165,
     166,   167,   168,   169,    -1,    -1,    -1,    -1,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,    -1,   184,   185,
     186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
     196,    -1,   198,    -1,   200,   201,   202,   203,    -1,   205,
      -1,   207,    -1,    -1,    -1,    -1,   212,    -1,    -1,    -1,
      -1,    -1,   218,    -1,    -1,    -1,   222,   223,   224,   225,
      -1,    -1,   228,   229,   230,   231,    -1,    -1,   234,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,   244,    -1,
      -1,    -1,   248,   249,    -1,   251,   252,    -1,    -1,    -1,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,    -1,    -1,
     266,   267,    -1,    -1,    -1,    -1,    -1,   273,   274,    -1,
     276,    -1,   278,    -1,   280,   281,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,    -1,    -1,    -1,    -1,   324,   325,
     326,   327,   328,   329,    -1,    -1,   332,   333,   334,    -1,
     336,    -1,   338,    -1,   340,   341,   342,   343,   344,   345,
     346,   347,   348,    -1,    -1,   351,   352,    -1,    -1,   355,
     356,   357,   358,   359,   360,   361,    -1,    -1,    -1,    -1,
     366,    -1,    -1,    -1,   370,    -1,   372,   373,   374,    -1,
     376,   377,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,   404,   405,
      -1,    -1,    -1,    -1,   410,   411,    -1,   413,    -1,   415,
     416,   417,   418,   419,    -1,   421,   422,    -1,   424,    -1,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
      -1,    -1,   448,    -1,   450,    -1,    -1,   453,    -1,    -1,
      -1,   457,    -1,    -1,   460,   461,   462,    -1,   464,    -1,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,    -1,
     476,   477,    -1,   479,    -1,    -1,    -1,    -1,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,   492,    -1,    -1,    -1,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,    -1,    -1,
     506,   507,    -1,    -1,    -1,    -1,    -1,   513,   514,   515,
      -1,   517,   518,    -1,   520,   521,    -1,    -1,   524,    -1,
      -1,   527,    -1,   529,   530,   531,   532,    -1,    -1,    -1,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,    -1,   555,
     556,    -1,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,   577,   578,    -1,   580,   581,    -1,    -1,    -1,    -1,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,    -1,
      -1,   607,   608,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,   618,    -1,    -1,    -1,   622,   623,   624,   625,
     626,    -1,    -1,    -1,    -1,    -1,    -1,   633,    -1,    -1,
     636,    -1,   638,    -1,    -1,   641
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    15,    30,    34,    48,    49,    56,    60,    61,
      79,    97,   121,   130,   131,   132,   143,   144,   156,   170,
     189,   204,   206,   211,   214,   238,   240,   258,   275,   279,
     379,   396,   409,   420,   444,   447,   449,   452,   455,   456,
     465,   467,   475,   481,   490,   495,   497,   528,   535,   585,
     597,   601,   604,   609,   637,   654,   665,   668,   669,   670,
     671,   672,   674,   679,   681,   688,   726,   753,   760,   761,
     880,  1050,  1092,  1094,  1108,  1111,  1116,  1118,  1119,  1124,
    1127,  1132,  1139,  1151,  1152,  1314,  1316,  1333,  1336,  1361,
    1373,  1384,  1391,  1405,  1409,  1412,  1422,  1428,  1432,  1434,
    1435,  1487,  1515,  1522,  1524,  1531,  1534,  1561,  1567,  1568,
    1569,  1570,  1627,  1635,  1636,    11,   108,   127,   198,   227,
     280,   414,   488,   552,   607,  1088,  1592,  1593,  1594,  1597,
     276,   367,  1126,  1562,   561,  1478,   232,     5,     7,     8,
       9,    10,    11,    14,    18,    21,    23,    24,    25,    26,
      27,    28,    30,    34,    38,    41,    42,    43,    45,    47,
      48,    51,    54,    55,    57,    58,    60,    62,    64,    65,
      66,    68,    69,    71,    72,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    85,    86,    88,    89,    90,
      91,    92,    96,    99,   101,   103,   105,   107,   110,   111,
     112,   115,   120,   121,   126,   127,   129,   133,   135,   136,
     137,   138,   139,   143,   146,   147,   148,   152,   154,   155,
     157,   158,   159,   162,   163,   165,   166,   167,   168,   169,
     170,   174,   175,   176,   177,   178,   181,   182,   184,   185,
     186,   189,   193,   194,   196,   198,   200,   201,   202,   203,
     205,   207,   211,   212,   214,   217,   218,   222,   223,   224,
     225,   228,   229,   230,   231,   234,   239,   240,   244,   248,
     249,   251,   252,   256,   259,   260,   263,   266,   267,   273,
     274,   276,   278,   280,   281,   289,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   309,   310,   311,   313,   314,   315,   316,
     318,   319,   324,   325,   326,   327,   328,   329,   332,   333,
     334,   336,   338,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   351,   352,   355,   356,   357,   358,   359,   360,
     361,   365,   366,   370,   372,   373,   374,   376,   377,   378,
     380,   390,   391,   392,   394,   395,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   409,   410,   411,   413,
     415,   416,   417,   418,   419,   421,   422,   424,   428,   432,
     433,   434,   435,   436,   439,   440,   441,   442,   443,   445,
     446,   448,   449,   450,   453,   455,   457,   458,   460,   461,
     462,   464,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   479,   480,   484,   485,   486,   487,   488,
     492,   496,   498,   499,   500,   501,   503,   504,   505,   506,
     507,   513,   514,   515,   517,   518,   520,   521,   524,   527,
     528,   529,   530,   531,   532,   535,   536,   538,   539,   540,
     541,   542,   543,   546,   547,   548,   549,   551,   552,   555,
     556,   558,   559,   562,   563,   565,   566,   567,   568,   573,
     574,   575,   576,   577,   578,   580,   581,   585,   586,   587,
     588,   590,   591,   593,   594,   596,   597,   600,   603,   605,
     607,   608,   615,   618,   622,   623,   624,   625,   626,   633,
     634,   636,   637,   638,   641,   643,   644,   720,  1476,  1481,
    1485,  1486,   309,   551,   554,  1518,  1518,   633,  1563,    67,
     108,   197,   280,   484,   488,   508,   552,   558,   599,   607,
     699,   703,   932,   933,   934,  1023,  1024,  1025,  1026,  1027,
    1028,  1029,  1374,  1315,   108,   167,   198,   232,   280,   414,
     484,   488,   552,   558,   582,   607,   622,  1329,  1481,  1126,
     101,   762,   719,   662,  1473,  1475,  1481,   680,  1334,   402,
      85,   422,  1433,   111,   232,   638,  1440,  1518,  1126,   881,
    1481,  1429,   475,   607,  1518,  1126,  1337,  1423,   511,   750,
     754,   755,  1481,   719,  1563,  1481,  1155,  1157,  1158,  1488,
    1392,   754,   500,   580,   500,   554,  1386,   402,  1523,  1362,
    1481,    30,    79,   154,   409,   433,   467,   528,  1629,   481,
     654,  1153,     0,   156,   666,   409,   177,   193,   397,  1410,
    1473,  1481,   160,  1062,  1481,   160,   720,   208,   720,   268,
    1478,  1481,  1483,   828,   829,   832,   855,  1481,   719,   554,
     167,  1056,  1592,  1518,  1563,  1133,   727,   662,   572,  1109,
    1120,    17,  1564,   226,   935,   208,   935,  1483,   830,   855,
     719,   386,  1589,  1593,  1594,  1595,  1596,  1597,   554,   933,
     232,  1027,  1026,   232,   232,   227,   287,   424,  1382,  1383,
       7,    21,    27,    33,    35,    36,    37,    39,    52,    53,
      58,    59,    68,    71,    91,    94,    95,   100,   102,   103,
     106,   108,   113,   114,   115,   120,   122,   125,   172,   179,
     180,   187,   193,   201,   203,   209,   215,   222,   226,   238,
     241,   265,   273,   284,   312,   317,   328,   332,   335,   339,
     340,   341,   342,   343,   350,   357,   362,   363,   364,   368,
     369,   374,   393,   399,   404,   405,   407,   421,   451,   452,
     464,   466,   472,   473,   479,   533,   534,   540,   544,   545,
     550,   561,   565,   566,   567,   568,   583,   584,   585,   589,
     592,   607,   611,   612,   613,   614,   619,   621,   625,   626,
     641,   647,   648,   653,   654,   657,   658,   661,   662,   984,
    1176,  1177,  1178,  1179,  1183,  1186,  1187,  1188,  1189,  1190,
    1191,  1199,  1203,  1215,  1459,  1461,  1463,  1464,  1465,  1469,
    1471,  1476,  1481,   226,  1327,  1327,  1327,  1481,   208,  1327,
    1318,  1327,   855,  1327,   719,  1327,  1518,   675,  1413,   135,
    1535,  1481,   378,    66,   429,   662,  1483,   128,   216,   287,
    1339,  1481,  1176,   242,  1436,  1516,  1518,    46,   882,   195,
      33,   309,  1397,  1430,  1481,   719,  1128,  1518,   128,   287,
    1340,  1368,   309,   422,   500,  1424,  1425,   615,   751,   490,
     756,  1532,   572,  1564,  1156,    12,   140,   216,   516,   517,
     518,   519,   521,   522,   537,  1166,  1167,  1168,  1588,    58,
      59,   125,   171,   205,   276,   346,   399,   487,   580,   661,
     986,  1481,  1489,  1501,  1505,  1507,    34,    58,    71,    95,
      97,   109,   158,   163,   166,   196,   198,   205,   207,   231,
     232,   255,   276,   309,   378,   403,   413,   414,   417,   418,
     440,   487,   500,   520,   536,   554,   624,   986,  1022,  1393,
    1397,  1398,  1400,  1502,   756,   443,   524,  1103,  1104,  1105,
     429,   630,  1095,  1096,  1097,  1103,  1385,  1481,  1518,  1368,
      35,   215,   561,  1460,  1479,  1628,  1628,  1628,  1628,  1628,
    1157,  1153,   655,   660,  1481,   160,  1407,  1406,   326,   559,
     591,  1052,   605,   102,  1483,  1484,  1054,   834,   856,  1481,
    1053,   380,     6,    56,   144,   363,   428,   430,   857,  1058,
    1484,  1473,   720,   523,  1598,  1599,  1055,  1117,  1134,  1135,
    1136,  1137,  1473,   654,   728,  1481,   682,  1322,  1323,  1473,
    1322,    55,   365,   365,   444,  1565,   362,   363,  1182,  1481,
     833,   856,  1473,   191,     6,  1484,  1551,  1552,   452,    10,
     414,   582,   706,  1172,  1591,  1599,  1611,  1615,  1616,  1622,
     706,  1172,  1590,  1599,  1611,  1616,  1622,  1592,  1597,   935,
    1481,  1481,  1481,   195,  1375,  1379,  1380,  1481,  1382,   654,
     654,   654,  1186,   654,   654,   654,  1176,  1218,   654,   654,
     654,   654,   654,   654,   654,   654,   654,  1175,  1175,   654,
     654,   973,   654,   654,   654,   561,   654,   654,   654,   654,
     654,   654,   654,   654,   654,   654,   654,   654,   654,  1176,
     654,   654,   654,  1216,  1217,  1469,  1481,   654,   654,   654,
     654,   654,   654,   654,   654,   654,   654,  1176,   973,   654,
     654,   654,   654,   654,   654,   654,   654,   654,   654,   654,
     654,   654,   654,   654,   654,   654,   654,   973,   561,   654,
     654,   654,   561,   654,   654,   654,    35,   215,   561,   654,
    1175,   973,   973,   654,   654,   654,   654,   654,   654,  1186,
    1186,  1186,  1176,  1583,  1584,  1481,  1204,  1481,    16,    17,
     383,   386,   639,  1180,  1181,   160,   161,   199,   210,   250,
     261,   288,   353,  1184,    31,   141,   245,   269,   339,   438,
     493,   494,   506,   645,   646,   647,   648,   649,   650,   651,
     652,  1182,  1186,    70,   385,   656,  1479,   654,   662,   172,
    1481,   720,  1481,   375,   856,   720,  1322,  1483,   366,   623,
     866,   867,  1330,  1331,  1332,  1398,   720,  1484,  1550,  1321,
    1327,   610,   676,    33,   133,   158,   162,   200,   218,   281,
     413,   422,   439,   457,   501,   532,  1414,  1419,  1420,  1518,
      84,   661,   763,   764,   765,   766,  1481,    12,    13,    97,
     130,   144,   167,   170,   184,   206,   232,   238,   279,   415,
     419,   437,   445,   453,   481,   495,   496,   546,   582,   604,
     606,  1536,  1538,  1540,  1541,    19,   160,  1270,  1271,  1525,
    1481,    63,  1370,   505,    48,    83,   287,  1442,  1473,  1519,
    1520,  1125,   271,   274,   425,   883,   885,   661,   673,  1478,
     281,  1129,  1484,  1130,  1131,  1473,  1112,   242,  1324,  1341,
    1342,  1473,    48,  1426,   656,  1479,    54,    64,    75,    88,
      89,    90,   105,   327,   345,   477,   539,   556,   757,   759,
      12,   419,  1533,  1538,   475,  1566,  1565,   598,  1571,  1572,
     649,  1170,  1171,  1172,  1168,   490,   662,  1478,    33,   125,
     160,   491,   987,   988,  1352,  1483,   192,  1352,  1491,   661,
    1483,    33,   125,   990,   991,  1483,   662,  1492,  1490,  1352,
     166,   269,   628,  1404,   654,   108,   167,   198,   414,   484,
     554,   582,   622,  1404,    12,   944,  1483,   270,  1289,  1291,
     195,   245,  1399,  1401,    69,   532,   192,   532,   551,    69,
     532,    12,    41,    92,    96,   249,   325,   392,   507,   548,
    1387,  1388,  1389,   166,   218,   532,   532,  1289,  1404,  1401,
     281,   157,    72,   416,   551,   581,   532,   618,  1093,   656,
     377,   635,    86,   656,  1323,  1370,   656,   376,  1631,   547,
    1632,   254,   460,  1630,   655,  1572,  1574,  1576,  1577,   156,
     667,  1483,  1151,  1333,  1336,  1361,  1373,  1408,  1411,  1460,
    1481,   125,   930,   931,   941,   942,   995,   111,  1175,   661,
     721,     6,   835,   721,   654,   110,   852,   852,   852,     4,
     656,   399,   366,   623,  1517,  1057,   480,   622,  1599,  1322,
     245,   656,   396,  1145,  1147,  1148,   729,   730,  1176,   228,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   310,
     311,   441,   442,   683,   684,   687,   177,   424,   656,  1110,
      57,   177,   181,   192,   324,   424,  1121,  1122,  1123,    55,
     444,   172,   698,   835,   690,   111,   852,   224,   656,  1172,
    1172,  1172,   167,   198,   198,  1599,  1473,  1030,  1031,  1030,
    1030,  1325,  1326,  1473,  1474,  1481,   656,  1377,   662,  1381,
    1176,  1176,    12,   140,  1211,  1272,  1211,  1211,  1211,   627,
    1220,  1176,  1176,  1215,  1215,  1176,  1176,  1176,   140,  1211,
    1272,   655,  1473,   369,   655,   655,  1176,  1176,  1176,  1176,
    1469,  1583,   116,   117,   118,   119,   120,   219,   220,   221,
     222,   328,   330,   331,   332,   340,   421,   478,   479,   625,
     640,   641,  1267,  1268,  1176,  1215,   112,   115,   565,   568,
    1269,   140,  1206,  1176,  1176,  1176,  1176,  1267,  1176,  1215,
    1217,     9,   656,   662,   140,  1211,  1176,  1176,   140,  1211,
    1176,  1176,  1215,  1215,  1215,  1473,  1176,  1176,  1176,  1215,
    1179,  1176,  1176,  1176,  1176,  1176,  1176,   655,  1176,  1211,
    1211,  1176,  1176,   140,  1211,  1176,  1268,  1268,  1176,    44,
     262,   579,  1176,  1176,   655,  1470,  1471,  1481,  1211,  1211,
    1176,  1176,  1176,   655,   656,   655,   481,   654,  1580,  1581,
    1176,   661,  1205,  1483,   662,  1176,  1176,  1176,  1178,   180,
     368,   584,   600,  1182,    12,    18,  1178,  1185,  1179,  1179,
     654,  1186,  1179,  1179,  1179,  1179,   269,  1179,  1179,   241,
    1179,   241,  1179,  1179,  1179,  1179,  1179,    31,   245,   269,
     438,  1483,  1186,  1176,  1192,  1481,   662,  1473,  1330,   656,
    1332,   158,   656,  1322,   190,  1328,   661,   677,   678,   281,
     281,   281,   281,    48,   281,   281,   656,  1415,   115,   565,
     568,   758,   768,  1203,  1463,  1469,  1483,   656,   160,   413,
    1539,   469,   469,   552,   558,   607,   622,   381,  1543,   551,
     375,  1545,    65,   500,  1542,   109,   622,  1544,   375,   656,
    1481,   185,   356,  1481,  1526,  1527,   426,  1371,  1478,  1140,
     276,  1441,  1271,   656,  1517,  1322,    72,   654,   890,   891,
     890,   891,   397,   893,   212,   257,  1483,    29,   572,  1431,
     656,   572,   656,  1517,  1322,  1342,  1338,   396,  1234,  1235,
      12,  1427,  1425,   656,   160,  1539,   375,   375,  1481,    12,
     140,  1579,   656,  1159,  1176,  1467,  1481,  1481,    70,   993,
    1176,  1484,   374,   399,   561,  1513,   251,   429,  1508,  1509,
    1510,  1511,   205,   276,   487,  1503,  1352,  1481,   580,  1493,
    1504,  1507,   656,  1495,  1506,   245,  1402,  1478,  1176,   649,
     935,   720,   720,   720,  1473,  1473,   720,  1473,   281,   344,
     532,  1396,  1396,   284,   369,   589,  1292,  1293,  1461,  1481,
    1404,  1481,   720,  1404,  1484,  1399,   720,  1404,   248,   549,
     182,   192,  1390,   656,  1402,  1399,  1473,  1401,  1399,  1399,
    1404,  1404,   603,  1106,  1105,   503,  1097,  1517,  1371,  1460,
     400,  1633,   384,  1285,  1291,  1578,   931,    70,   986,   136,
    1483,    77,    91,   259,   337,   365,   427,   523,   723,   725,
     434,   593,   853,   854,   234,   849,   850,   851,   858,   866,
     867,   108,   217,   390,   399,   406,   504,   607,   704,   705,
    1478,    24,   316,   843,   844,   845,   858,   859,   860,   866,
     867,   836,   837,   843,  1484,   175,   122,   187,   215,   284,
     369,   589,  1295,  1051,   375,   714,  1059,   127,   244,  1473,
     125,  1138,  1481,  1136,  1473,   879,  1147,   232,   257,  1020,
    1149,   655,   656,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   656,  1323,   605,
    1122,   929,   930,    77,   360,   435,   594,   846,   847,   848,
     858,   862,   863,   864,   865,   866,   867,    48,   107,   230,
     320,   333,   358,   359,   528,   700,   701,   702,   634,   609,
     831,    46,   630,  1552,   198,   720,   720,   935,   720,  1481,
     689,   587,   610,  1038,   375,   375,   375,   656,  1378,  1234,
     662,  1381,  1380,   195,   649,  1481,   656,   655,  1211,   655,
    1212,   655,   655,   655,  1176,   150,   627,  1219,    19,   655,
     610,   655,   655,   655,   656,   610,   656,  1200,   655,   649,
     655,   655,   656,   656,   655,   655,   655,   655,   195,   656,
     655,   656,  1202,   655,   656,   656,   656,   648,   656,   655,
     655,   654,  1469,  1481,  1211,   655,   655,   655,  1211,   655,
     656,   655,   655,   655,   655,   655,   655,   655,   656,   655,
     245,   655,   656,   656,   655,   656,   656,   655,   655,   655,
     656,   195,   656,  1211,   655,   655,   656,   656,   656,   655,
     195,  1176,   195,  1176,   195,  1176,   195,   655,   656,   655,
     655,   655,   655,   656,    19,   267,   656,  1010,   655,  1215,
    1241,  1242,  1243,   481,   654,  1154,  1575,  1576,   598,  1585,
     659,  1503,   491,  1481,   180,   368,   584,   600,   654,    17,
    1176,  1583,   165,  1277,  1179,  1176,  1176,  1179,   654,  1186,
    1179,  1172,  1196,  1197,  1198,   654,   662,  1481,  1517,  1332,
    1352,  1353,  1484,    50,   459,  1089,  1317,  1483,   656,  1420,
    1322,  1421,   766,   769,   770,   765,   370,   473,   767,   551,
     654,  1553,  1484,  1553,  1553,  1553,   198,   414,   554,  1537,
    1541,   160,   185,   199,   210,   260,   261,   288,   356,   411,
    1528,  1530,   628,  1273,   423,  1369,  1141,  1142,  1143,  1144,
    1473,   233,   287,   429,   635,  1521,  1520,  1517,   654,  1172,
     122,   187,   215,   284,   369,   589,  1296,  1299,  1300,   543,
     894,   884,    11,   886,  1176,  1478,  1484,  1484,  1131,   572,
     177,   424,   608,  1113,  1114,  1115,   481,   490,   614,   615,
     654,   925,  1343,  1346,   654,   759,   758,   656,  1484,   198,
     414,  1537,  1573,  1171,   192,   195,   242,  1160,  1161,  1162,
    1165,  1284,  1285,  1309,  1173,  1173,   662,   125,   992,   994,
    1483,  1352,   654,   654,   267,   377,   635,   656,   656,   662,
     662,   662,  1507,  1176,  1508,  1494,  1352,  1496,  1497,    12,
      33,   125,   375,  1176,  1514,  1478,   195,  1403,   655,  1481,
     373,   656,  1404,   422,  1289,  1389,  1403,  1404,  1399,  1473,
    1404,  1404,   513,   514,   515,   687,  1107,   607,  1098,  1099,
    1369,   656,   192,  1634,    46,  1289,  1353,  1353,   347,  1478,
     523,   523,   523,   523,   523,   480,  1478,  1478,  1353,   656,
     851,  1478,  1478,  1478,  1478,  1295,  1478,  1478,   655,   656,
    1353,  1353,   656,   845,   838,   839,   858,   859,   860,   399,
       6,    11,    13,    15,    25,    26,    56,    60,    61,    68,
      77,    85,    94,   111,   129,   137,   138,   144,   152,   158,
     169,   190,   229,   232,   239,   256,   279,   315,   334,   338,
     379,   384,   391,   396,   399,   432,   446,   447,   448,   449,
     471,   529,   530,   531,   536,   552,   555,   585,   598,   877,
     937,   939,   941,   942,  1063,  1067,  1069,  1072,  1078,  1079,
    1080,  1085,  1086,  1281,    81,   476,   447,  1060,  1600,  1146,
     654,  1176,   654,  1295,  1477,  1478,  1295,  1295,  1477,  1477,
     122,   187,   284,   369,   589,  1297,  1477,  1295,  1295,  1477,
    1477,  1477,  1477,  1477,  1477,  1477,  1295,  1295,  1477,  1464,
    1477,  1295,   684,  1353,  1353,  1353,  1353,   656,   848,  1295,
      46,  1295,  1295,   630,   691,   702,  1483,   280,   178,   840,
     841,   842,   858,   859,   860,   861,   864,   865,   866,   867,
     399,   561,  1483,  1481,  1623,     8,    29,   826,   720,   654,
     462,   269,   654,   869,   936,   938,   939,    45,   212,   474,
    1044,  1044,  1473,  1473,  1473,  1326,  1481,   610,  1376,  1481,
     481,   654,   658,  1221,  1222,  1223,  1224,  1225,  1236,  1237,
    1251,   662,  1381,   241,  1176,   655,  1176,   564,  1176,  1176,
     154,    33,    59,   112,   115,   123,   351,   498,   568,   602,
    1213,   987,  1176,   987,  1213,  1215,   655,   241,   241,  1176,
    1176,  1176,  1215,  1176,  1176,  1176,  1176,  1176,  1179,   655,
     655,  1176,  1176,  1176,  1176,  1176,  1176,  1215,   241,  1176,
    1176,  1176,   655,  1176,  1176,  1176,  1176,   195,  1176,   195,
    1176,   195,  1176,  1176,  1176,    33,    59,  1005,  1006,  1007,
    1008,  1009,  1296,  1295,   655,   655,  1586,  1587,  1588,  1242,
    1154,   655,  1579,  1483,  1176,  1583,  1178,   655,   656,   655,
    1186,  1267,  1267,    17,  1176,  1583,  1277,  1176,   655,   656,
    1214,  1215,  1481,  1319,   943,  1483,  1322,   678,  1416,   160,
     656,  1481,  1554,  1555,   572,   649,  1473,  1481,  1549,  1549,
    1549,  1529,  1274,  1290,  1291,  1297,  1088,   656,  1145,  1147,
     561,  1480,   635,   276,   887,   888,   889,  1481,   899,  1179,
      46,   654,   901,   891,   160,   654,   572,  1473,  1114,   926,
    1344,   654,  1349,  1354,  1349,   655,   925,  1345,  1466,  1467,
    1470,  1481,  1347,  1266,  1481,   160,   206,   195,  1549,  1549,
    1549,  1152,  1473,   145,   604,  1222,  1310,   192,   279,  1169,
    1309,  1290,   195,  1165,    19,  1174,  1478,  1481,   649,  1481,
    1513,   561,   561,   429,   450,   485,  1512,  1510,  1509,  1352,
    1495,  1514,   656,  1499,  1501,  1505,  1297,  1394,   163,   624,
    1293,  1293,   369,  1395,  1273,  1399,   160,   160,   656,   160,
     399,  1100,   557,  1372,  1295,   329,  1286,   994,   988,   111,
     111,   127,   244,   284,   369,   589,   868,  1298,  1299,  1476,
     851,   705,   868,   868,   845,   656,   839,   175,    73,    87,
     396,   953,   956,   957,  1018,  1020,  1028,  1029,  1087,  1353,
     232,  1087,   396,  1353,  1353,  1087,  1353,   396,   396,  1353,
    1353,   572,   136,  1353,   255,   552,   191,   396,   412,  1020,
    1087,   255,  1353,   396,   552,   136,  1353,  1353,  1353,  1353,
    1353,  1087,   396,    46,  1353,   879,  1353,   396,   398,    19,
     160,   572,  1091,   396,   396,  1353,  1353,  1353,  1353,   139,
     325,  1481,  1353,   396,  1353,   937,   656,   876,   877,  1067,
     654,   662,   952,   958,  1472,  1481,   363,   410,    23,   168,
     708,   572,   137,   152,   710,   654,  1601,   654,   412,  1263,
    1264,  1265,  1481,   685,   686,  1295,  1478,  1296,   868,   868,
     848,  1295,  1295,   869,   380,   208,  1353,   656,   842,   561,
      19,   462,   654,   130,   238,   604,   827,   707,  1617,   123,
     243,   431,   538,   948,  1473,   269,   870,   875,   876,   949,
     950,   951,   952,   953,   875,   656,   938,   692,   694,   696,
     662,  1222,  1273,  1381,  1250,  1481,    98,   235,   254,   265,
     349,   466,   537,  1233,  1273,   656,  1473,  1250,  1176,   655,
    1176,   564,   654,   977,   978,   978,   654,   972,   654,   970,
     971,   977,   978,   243,   972,   243,   655,   655,   655,   655,
     655,  1201,  1176,  1176,   655,   655,   656,   655,   384,  1208,
     656,   656,   655,   656,   655,   245,  1193,  1194,   655,   655,
     655,   655,   656,   655,   655,  1176,   655,   192,   655,   655,
     656,   655,   656,   656,   655,  1176,   655,  1176,   655,  1176,
     655,   655,   655,   654,  1000,  1000,    20,   131,   464,   647,
    1002,  1003,  1004,   656,   656,  1170,  1588,   655,  1582,   662,
    1048,   655,  1215,  1178,   655,   656,   655,  1173,  1198,   655,
    1320,  1517,   192,   630,  1417,    54,    64,    75,    88,    89,
      90,   105,   327,   345,   461,   477,   539,   556,   771,   770,
     655,   656,  1551,   662,   662,   572,   572,   572,   654,  1176,
    1341,  1143,  1473,  1147,   227,  1150,  1437,   655,   656,  1173,
     885,   396,   902,   903,  1296,   887,  1484,  1166,  1350,  1351,
    1470,  1355,   656,   654,  1346,   655,   655,   656,   662,  1571,
     655,   656,   758,   381,  1551,   195,   195,   195,  1271,  1273,
    1163,  1273,   146,   388,  1305,  1306,  1311,   604,   245,  1478,
    1481,   662,   655,   655,    78,   590,   429,  1514,  1498,  1500,
    1289,  1289,  1404,  1478,  1478,   687,  1478,   160,   126,  1101,
    1297,  1088,  1176,  1287,  1468,   839,  1047,  1472,  1126,    61,
     191,   412,   955,  1019,  1024,  1047,  1020,  1021,  1021,   125,
    1481,  1481,  1472,  1126,  1297,  1295,  1472,  1295,    12,  1068,
    1076,  1077,  1481,  1126,  1478,  1478,   986,  1353,  1295,   257,
    1328,   257,  1472,  1472,   943,  1077,  1353,   185,   260,   365,
     946,  1295,   125,  1481,  1297,  1297,  1472,  1126,  1282,  1283,
    1470,   125,  1295,   878,  1478,  1126,   879,  1473,  1126,  1126,
      76,    80,    82,   125,   148,   186,   436,   573,   574,   575,
     576,   577,   578,   945,   125,  1295,   125,  1295,   125,  1295,
    1295,  1068,   940,     6,   144,  1080,   949,  1481,     8,   185,
    1090,   437,   954,   955,  1012,   959,   662,   410,  1176,  1176,
     375,   714,   720,   375,    77,   715,  1481,  1602,    19,  1068,
     655,   656,   655,   656,   654,  1481,   868,   842,  1478,   948,
    1624,   375,   375,   731,   732,   734,  1481,   505,  1473,   925,
     655,   656,   227,   452,   872,  1443,   938,   654,   654,   654,
    1481,  1273,  1284,  1238,  1245,  1250,  1221,   254,   254,   387,
    1252,   254,   265,   466,  1252,  1236,  1221,  1223,  1234,  1247,
    1248,  1267,  1176,   122,   284,   369,   589,    21,    33,    47,
     596,   986,   996,   997,   998,   369,   369,   655,  1267,  1267,
    1176,    46,   483,  1207,  1176,  1176,  1215,    42,   349,   655,
     630,  1195,  1176,  1267,  1176,  1176,  1176,  1176,   655,   655,
     655,  1296,   655,  1010,  1005,  1003,  1005,  1006,  1295,  1244,
    1580,  1481,   655,  1215,  1174,  1084,  1085,  1086,  1089,  1418,
     429,  1555,   630,  1558,   649,   649,  1551,  1551,  1551,   125,
    1176,  1357,  1358,  1335,  1150,   263,  1443,   889,   655,   212,
     257,   904,   655,   656,   655,  1170,   656,  1352,  1356,  1357,
    1354,  1348,  1346,  1466,  1481,   879,  1481,   195,  1551,  1551,
    1551,  1290,  1368,   208,  1278,  1480,  1480,   661,  1307,  1308,
    1483,  1517,   492,   649,  1499,  1504,  1478,   160,   401,  1102,
    1222,   656,    20,   131,  1288,  1070,   654,   257,   257,  1047,
    1021,  1031,  1047,  1047,   643,   644,  1039,   144,   490,  1068,
    1081,  1065,   656,  1296,   988,  1478,  1472,  1076,  1089,   630,
    1478,  1082,  1068,   656,  1288,   882,  1068,  1073,  1068,   654,
     655,  1481,  1473,    32,    33,    38,    40,    42,    43,    59,
     112,   115,   123,   142,   159,   186,   188,   201,   202,   243,
     273,   282,   283,   285,   321,   322,   323,   341,   342,   343,
     348,   351,   371,   372,   404,   405,   431,   486,   490,   502,
     562,   565,   568,   569,   570,   571,   616,   617,   641,   960,
     963,   964,   965,   966,   967,   968,   969,  1481,  1267,   500,
    1478,   143,  1061,   655,   656,  1603,  1604,   655,  1264,   686,
     704,   505,   236,   245,   389,   735,   736,   737,   738,  1172,
     476,   655,   656,   733,  1478,   655,   655,   936,   951,    19,
     928,  1045,  1046,  1481,  1045,  1045,   270,  1294,   598,   655,
    1575,  1246,   659,   254,  1236,  1252,  1252,   254,   375,   375,
     610,  1271,  1166,   655,   655,   655,   655,   655,    33,    21,
     596,   986,    33,   987,   655,   656,   655,   655,   655,  1209,
    1460,   655,   655,   656,   655,   336,   259,   422,   655,   655,
     655,   655,   655,   655,  1001,   655,   656,   947,  1165,  1290,
    1575,   655,  1086,  1085,   176,   279,   206,   454,  1556,  1556,
    1556,   655,   656,  1343,   242,   654,   892,   886,   905,  1481,
     903,   927,  1351,  1358,   655,  1574,  1551,  1370,    46,   213,
    1275,  1312,  1483,   656,   336,  1478,   160,   490,  1468,   397,
     654,  1071,  1176,  1047,  1031,   654,  1030,  1030,   125,   125,
     958,  1121,  1077,   993,   554,   960,  1064,  1283,  1074,  1076,
    1066,  1421,   654,  1013,   977,   977,   978,   972,   970,   408,
     961,   970,   970,   998,    59,   616,   964,   966,   998,   998,
      59,   617,   617,   620,   970,   962,   978,   972,   972,   998,
     977,   978,    25,    70,    74,    77,   125,   368,   375,   412,
     486,   536,   980,   981,   982,  1011,  1024,  1182,   620,   977,
     998,    33,   977,   999,   977,   977,   978,   654,   971,   979,
     662,   709,   716,   717,  1481,   481,   654,  1605,  1608,   655,
    1478,   655,   656,   733,  1612,   708,  1618,   734,   960,   983,
     871,   875,   654,   925,   655,   656,  1288,   654,   655,   655,
    1293,  1579,  1271,  1224,  1221,  1236,   254,   254,  1221,  1236,
    1227,  1226,  1228,  1261,  1262,  1170,   987,   999,   369,  1210,
    1468,  1176,   336,   174,   655,  1295,  1169,  1169,   381,    62,
     252,   361,   525,   541,   636,  1547,  1548,   630,  1557,  1557,
    1557,  1358,   375,  1359,   554,  1172,   895,   654,   614,   906,
     947,  1371,  1279,  1468,  1276,  1284,   986,   989,  1308,  1517,
    1478,  1364,  1365,  1470,  1288,  1296,   902,   655,   654,   654,
    1045,   654,   654,   115,   565,   568,   647,   648,  1462,  1463,
    1090,  1473,   980,  1126,  1075,  1113,   655,  1014,  1481,   312,
    1015,   498,   602,   642,   974,   975,   976,   654,   974,   974,
     998,   620,   974,   654,   998,   974,   992,    82,   125,   148,
     186,  1478,   984,   985,  1462,   604,   125,   125,   139,   325,
     982,   257,   257,   368,   998,   999,   998,   999,   974,   369,
     974,  1481,   527,   711,    52,    66,   183,   226,   253,   264,
     378,   463,   718,   776,   778,   779,   780,   782,   783,   784,
     785,   786,   787,   789,   797,   798,   801,   812,   815,   817,
     818,  1476,  1482,  1486,  1609,   654,  1607,  1608,   630,  1610,
    1606,  1625,   737,  1481,  1473,   713,   714,   462,   993,  1574,
     872,   925,   873,  1517,  1046,   369,  1517,  1517,  1239,   375,
    1230,  1236,  1236,   375,  1232,  1176,  1176,   654,  1259,  1260,
    1249,   655,   656,  1288,   655,   655,   561,   561,   561,    17,
    1546,   206,   313,   314,   318,   319,  1559,  1560,   147,  1473,
     899,   542,   900,   897,   898,  1481,   245,   266,    77,   111,
     232,   315,   334,   360,   552,   922,   923,   924,  1398,  1369,
     631,   632,   656,  1280,  1288,  1176,  1290,   988,  1313,   656,
    1363,  1352,   655,  1045,  1045,   655,  1045,  1045,  1464,  1464,
     879,  1083,   242,   655,   656,   196,   395,   499,   375,  1016,
     976,  1049,  1460,  1049,   984,   615,  1176,   155,   712,   799,
     802,  1481,   195,   356,   790,   777,  1482,  1482,  1481,   781,
     669,   286,   451,   629,   821,    30,   819,   663,  1157,  1607,
     655,    51,    61,   276,  1571,   722,   983,   192,   710,  1619,
     655,  1571,    77,   256,  1032,  1035,  1038,  1039,  1040,  1041,
    1288,   655,   630,  1033,  1037,  1040,  1043,  1034,  1036,  1040,
    1042,  1580,  1229,   610,  1231,   610,  1266,   190,   227,   609,
    1254,  1255,  1258,   947,  1468,  1547,   381,  1295,  1295,  1295,
    1295,  1560,  1360,  1234,  1173,  1296,   655,   656,   908,   563,
    1353,   136,   136,  1353,  1353,  1353,  1353,   654,   917,   924,
     158,  1372,  1468,   414,  1301,    72,  1444,  1365,  1273,  1358,
     655,   655,  1032,   655,   655,  1090,   654,  1481,   130,   604,
     655,   656,   655,  1176,  1176,   627,   804,   808,   195,  1481,
     792,   793,  1176,   740,   775,   776,   778,   780,   782,   784,
     785,   786,   787,   789,   797,   812,   815,   817,   740,   822,
     820,   813,   816,   655,  1574,    61,   381,    61,   134,   723,
     724,  1182,  1626,  1172,   715,   983,   874,  1478,  1353,   693,
    1041,   394,   695,  1043,   697,  1042,  1240,  1176,   654,  1176,
     654,   655,  1020,  1020,  1255,  1288,   257,  1438,   655,   896,
     898,   654,   910,   912,   907,  1478,  1353,  1353,  1298,  1298,
    1296,  1483,   543,   918,   919,  1353,  1088,  1288,    14,   153,
     164,   382,   560,  1445,  1446,   272,  1447,  1284,  1012,  1032,
    1033,  1034,   902,    50,   365,   459,   490,  1017,  1017,   998,
    1460,   998,   800,   809,   150,   808,   811,   242,   154,  1176,
     154,   775,   660,   603,  1176,   741,   821,   819,   381,   381,
     134,   775,  1613,   143,  1620,  1574,  1295,  1084,  1476,  1084,
    1084,  1575,  1266,  1266,   192,  1253,  1253,   604,   989,   900,
     654,   911,   912,   913,   320,   909,   912,  1478,  1478,   920,
     655,   656,   943,  1473,  1302,    46,    46,   153,    46,  1446,
     526,   560,  1448,  1449,  1294,   655,     5,   125,   368,   375,
     375,   627,   803,   805,  1176,   740,   154,   788,   226,   794,
     286,   660,   824,   823,   124,   739,   742,   814,  1482,   814,
     149,   716,   722,   655,   655,   208,   254,   384,  1257,  1256,
    1366,  1367,  1470,  1439,   655,   656,   320,   915,   916,  1179,
     921,  1483,   919,   490,   654,  1460,  1460,    46,  1460,    46,
      46,  1449,   604,   130,   806,   805,   811,   810,    52,   791,
    1481,   564,  1176,   143,    93,   173,   746,   772,  1481,   154,
     775,   660,   472,  1621,    46,    46,   654,   654,   656,  1352,
     470,  1450,   912,   656,   914,   922,  1364,   369,  1303,  1304,
    1460,  1460,  1460,  1017,  1017,  1176,   154,   564,   656,   740,
     825,   740,   211,   656,   743,    84,   104,   660,  1614,   775,
    1263,  1265,  1367,  1358,   224,  1444,   916,   655,  1164,   655,
     656,   807,    52,   740,  1481,   795,   154,   154,   192,  1481,
     983,   192,   192,   775,   655,   655,    46,  1447,  1273,  1304,
     564,   150,   151,   796,   451,   629,   744,   125,   773,   749,
     750,  1295,   745,  1460,   227,  1451,  1284,   740,   740,   792,
     510,   512,   747,   748,   749,   752,  1182,  1481,   774,  1151,
     369,   654,  1453,  1294,   656,   775,   194,  1176,   272,   470,
    1452,   655,   661,  1454,  1455,  1470,   490,  1456,   748,  1483,
     655,   656,  1457,  1458,  1470,  1455,   656,  1352,  1458,  1172,
    1358,  1173
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YYTHD, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, YYTHD)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, YYTHD); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (YYTHD);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, class THD *YYTHD)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, YYTHD)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    class THD *YYTHD;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, YYTHD);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, class THD *YYTHD)
#else
static void
yy_reduce_print (yyvsp, yyrule, YYTHD)
    YYSTYPE *yyvsp;
    int yyrule;
    class THD *YYTHD;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , YYTHD);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, YYTHD); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, class THD *YYTHD)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, YYTHD)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    class THD *YYTHD;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (YYTHD);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (class THD *YYTHD);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (class THD *YYTHD)
#else
int
yyparse (YYTHD)
    class THD *YYTHD;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 1997 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
#line 2009 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
#line 2034 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 62:
#line 2108 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 65:
#line 2123 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
            /*
              We don't know know at this time whether there's a password
              in prepare_src, so we err on the side of caution.  Setting
              the flag will force a rewrite which will obscure all of
              prepare_src in the "Query" log line.  We'll see the actual
              query (with just the passwords obscured, if any) immediately
              afterwards in the "Prepare" log lines anyway, and then again
              in the "Execute" log line if and when prepare_src is executed.
            */
            lex->contains_plaintext_password= true;
          }
    break;

  case 66:
#line 2143 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 67:
#line 2150 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 68:
#line 2160 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 69:
#line 2167 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 74:
#line 2182 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 75:
#line 2194 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 76:
#line 2202 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 77:
#line 2213 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            /*
              Clear LEX_MASTER_INFO struct. repl_ignore_server_ids is freed
              in THD::cleanup_after_query. So it is guaranteed to be
              uninitialized before here.
	      Its allocation is deferred till the option is parsed below.
            */
            lex->mi.set_unspecified();
            DBUG_ASSERT(Lex->mi.repl_ignore_server_ids.elements == 0);
          }
    break;

  case 78:
#line 2226 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 81:
#line 2236 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:
#line 2240 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.bind_addr = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:
#line 2244 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 84:
#line 2248 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 85:
#line 2253 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 86:
#line 2257 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 87:
#line 2261 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.retry_count= (yyvsp[(3) - (3)].ulong_num);
            Lex->mi.retry_count_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 88:
#line 2266 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              Lex_input_stream *lip= YYLIP;
              const char *start= lip->get_tok_start();
              const char *msg= YYTHD->strmake(start, lip->get_ptr() - start);
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       msg, MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 89:
#line 2279 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 90:
#line 2284 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:
#line 2288 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:
#line 2292 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:
#line 2296 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:
#line 2300 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 95:
#line 2304 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:
#line 2309 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:
#line 2313 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:
#line 2318 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 99:
#line 2349 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 100:
#line 2354 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.auto_position= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE :
              LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 105:
#line 2371 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->mi.repl_ignore_server_ids.elements == 0)
            {
              my_init_dynamic_array2(&Lex->mi.repl_ignore_server_ids,
                                     sizeof(::server_id),
                                     Lex->mi.server_ids_buffer,
                                     array_elements(Lex->mi.server_ids_buffer),
                                     16);
            }
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 106:
#line 2385 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 107:
#line 2389 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 108:
#line 2405 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 109:
#line 2409 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
                                               Lex->mi.relay_log_pos);
          }
    break;

  case 110:
#line 2421 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_SHARED))
              MYSQL_YYABORT;
            /*
              Instruct open_table() to acquire SHARED lock to check the
              existance of table. If the table does not exist then
              it will be upgraded EXCLUSIVE MDL lock. If table exist
              then open_table() will return with an error or warning.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_FOR_CREATE;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 111:
#line 2447 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type=
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE ?
                ha_default_temp_handlerton(thd) : ha_default_handlerton(thd);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 112:
#line 2466 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          lex->sql_command= SQLCOM_CREATE_TABLE;

          LEX_STRING sequence_name={C_STRING_WITH_LEN("sequence")};
          if (!plugin_is_ready(&sequence_name, MYSQL_STORAGE_ENGINE_PLUGIN))
          {
            my_error(ER_FEATURE_DISABLED, MYF(0), "sequence",
                        "--with-plugin-sequence");
            MYSQL_YYABORT;
          }
          if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                 TL_OPTION_UPDATING,
                                                 TL_WRITE, MDL_EXCLUSIVE))
            MYSQL_YYABORT;

              /*
                For CREATE TABLE, an non-existing table is not an error.
                Instruct open_tables() to just take an MDL lock if the
                table does not exist.
              */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            memset((char*) &lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(3) - (4)].num);
            lex->create_info.default_table_charset= NULL;

            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
            lex->seq_create_info= new (thd->mem_root)
                                      Sequence_create_info();
            lex->native_create_sequence= true;
        }
    break;

  case 113:
#line 2504 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->native_create_sequence= true;
          }
    break;

  case 114:
#line 2508 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex;
            lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            if (lex->alter_info.create_list.elements > 0)
              lex->native_create_sequence= false;
          }
    break;

  case 115:
#line 2517 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 116:
#line 2522 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(4) - (13)].lex_str)))
              MYSQL_YYABORT;
            Lex->wait_time= (yyvsp[(12) - (13)].ulong_num);
          }
    break;

  case 117:
#line 2527 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 118:
#line 2530 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 119:
#line 2535 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(4) - (13)].lex_str)))
              MYSQL_YYABORT;
            Lex->wait_time= (yyvsp[(12) - (13)].ulong_num);
          }
    break;

  case 120:
#line 2540 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 121:
#line 2543 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 122:
#line 2548 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(4) - (13)].lex_str)))
              MYSQL_YYABORT;
            Lex->wait_time= (yyvsp[(12) - (13)].ulong_num);
          }
    break;

  case 123:
#line 2553 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 124:
#line 2555 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 125:
#line 2560 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 126:
#line 2567 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 127:
#line 2573 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 128:
#line 2575 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 129:
#line 2579 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 130:
#line 2583 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 131:
#line 2587 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 132:
#line 2593 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 136:
#line 2604 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->seq_create_info->init_value(FIELD_NUM_MINVALUE, (yyvsp[(2) - (2)].ulong_num));
          }
    break;

  case 137:
#line 2608 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->seq_create_info->init_value(FIELD_NUM_MAXVALUE, (yyvsp[(2) - (2)].ulong_num));
          }
    break;

  case 138:
#line 2612 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->seq_create_info->init_value(FIELD_NUM_START, (yyvsp[(3) - (3)].ulong_num));
          }
    break;

  case 139:
#line 2616 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->seq_create_info->init_value(FIELD_NUM_INCREMENT, (yyvsp[(3) - (3)].ulong_num));
          }
    break;

  case 140:
#line 2620 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->seq_create_info->init_value(FIELD_NUM_CACHE, (yyvsp[(2) - (2)].ulong_num));
          }
    break;

  case 141:
#line 2624 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->seq_create_info->init_value(FIELD_NUM_CACHE, 0);
          }
    break;

  case 142:
#line 2628 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->seq_create_info->init_value(FIELD_NUM_CYCLE, 1);
          }
    break;

  case 143:
#line 2632 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->seq_create_info->init_value(FIELD_NUM_CYCLE, 0);
          }
    break;

  case 144:
#line 2643 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 147:
#line 2657 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 148:
#line 2661 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 149:
#line 2665 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 150:
#line 2669 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 151:
#line 2673 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 152:
#line 2678 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 153:
#line 2682 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 154:
#line 2689 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 155:
#line 2709 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 156:
#line 2720 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 158:
#line 2727 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 159:
#line 2733 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 160:
#line 2735 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 161:
#line 2741 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 162:
#line 2747 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 163:
#line 2756 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 164:
#line 2763 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 166:
#line 2771 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 167:
#line 2777 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 169:
#line 2783 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 170:
#line 2789 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 171:
#line 2797 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 172:
#line 2799 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 173:
#line 2806 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd,
                                          SP_TYPE_PROCEDURE,
                                          lex->event_parse_data->identifier);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;

            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 174:
#line 2849 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            sp_finish_parsing(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 188:
#line 2878 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           memset(&(lex->mqh), 0, sizeof(lex->mqh));
         }
    break;

  case 189:
#line 2893 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (3)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 190:
#line 2907 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (sp_check_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 191:
#line 2925 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 192:
#line 2926 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 193:
#line 2930 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 194:
#line 2931 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 195:
#line 2937 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 196:
#line 2939 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 197:
#line 2941 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 198:
#line 2943 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 199:
#line 2945 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 200:
#line 2947 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 201:
#line 2949 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 202:
#line 2954 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 203:
#line 2955 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 204:
#line 2956 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 205:
#line 2961 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 206:
#line 2965 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 207:
#line 2972 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), SP_TYPE_PROCEDURE);
          }
    break;

  case 208:
#line 2980 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 213:
#line 2996 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 214:
#line 3000 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 219:
#line 3018 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 220:
#line 3038 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(1) - (3)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   sp_variable::MODE_IN);

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 225:
#line 3079 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= pctx->add_variable(thd,
                                                   (yyvsp[(3) - (4)].lex_str),
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (fill_field_definition(thd, sp,
                                      (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                      &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 226:
#line 3107 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 227:
#line 3108 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 228:
#line 3109 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 229:
#line 3110 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 230:
#line 3114 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 232:
#line 3119 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 234:
#line 3125 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 235:
#line 3129 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 236:
#line 3155 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 237:
#line 3166 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            LEX_STRING dflt_value_query= EMPTY_STR;

            if (dflt_value_item)
            {
              // sp_opt_default only pushes start ptr for DEFAULT clause.
              const char *expr_start_ptr=
                sp->m_parser_data.pop_expr_start_ptr();
              if (lex->is_metadata_used())
              {
                dflt_value_query= make_string(thd, expr_start_ptr,
                                              YY_TOKEN_END);
                if (!dflt_value_query.str)
                  MYSQL_YYABORT;
              }
            }
            else
            {
              dflt_value_item= new (thd->mem_root) Item_null();

              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
            }

            // We can have several variables in DECLARE statement.
            // We need to create an sp_instr_set instruction for each variable.

            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);

              if (!spvar)
                MYSQL_YYABORT;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;

              if (fill_field_definition(thd, sp, var_type, &spvar->field_def))
                MYSQL_YYABORT;

              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is=
                new (thd->mem_root)
                  sp_instr_set(sp->instructions(),
                               lex,
                               var_idx,
                               dflt_value_item,
                               dflt_value_query,
                               (i == num_vars - 1));

              if (!is || sp->add_instr(thd, is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 238:
#line 3239 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(pctx->add_condition(thd, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 239:
#line 3255 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *handler_pctx=
              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);

            sp_handler *h=
              parent_pctx->add_handler(thd, (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->set_sp_current_parsing_ctx(handler_pctx);

            sp_instr_hpush_jump *i=
              new (thd->mem_root)
                sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
            
            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE)
            {
              // Mark the end of CONTINUE handler scope.

              if (sp->m_parser_data.add_backpatch_entry(
                    i, handler_pctx->last_label()))
              {
                MYSQL_YYABORT;
              }
            }

            if (sp->m_parser_data.add_backpatch_entry(
                  i, handler_pctx->push_label(thd, EMPTY_STR, 0)))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 240:
#line 3295 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *hlab= pctx->pop_label(); /* After this hdlr */

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              sp_instr_hreturn *i=
                new (thd->mem_root) sp_instr_hreturn(sp->instructions(), pctx);

              if (i == NULL ||
                  sp->add_instr(thd, i) ||
                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
                MYSQL_YYABORT;
            }

            sp->m_parser_data.do_backpatch(hlab, sp->instructions());

            lex->set_sp_current_parsing_ctx(pctx->pop_context());

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 241:
#line 3329 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(YY_TOKEN_END);
          }
    break;

  case 242:
#line 3338 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *cursor_lex= Lex;
            sp_head *sp= cursor_lex->sphead;

            DBUG_ASSERT(cursor_lex->sql_command == SQLCOM_SELECT);

            if (cursor_lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }

            cursor_lex->sp_lex_in_use= true;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;

            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            uint offp;

            if (pctx->find_cursor((yyvsp[(2) - (6)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (6)].lex_str).str);
              delete cursor_lex;
              MYSQL_YYABORT;
            }

            LEX_STRING cursor_query= EMPTY_STR;

            if (cursor_lex->is_metadata_used())
            {
              cursor_query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!cursor_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_cpush *i=
              new (thd->mem_root)
                sp_instr_cpush(sp->instructions(), pctx,
                               cursor_lex, cursor_query,
                               pctx->current_cursor_count());

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                pctx->add_cursor((yyvsp[(2) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 243:
#line 3401 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 244:
#line 3402 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 245:
#line 3408 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 246:
#line 3410 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 247:
#line 3415 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_pcontext *parent_pctx= pctx->parent_context();

            if (parent_pctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 248:
#line 3438 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 250:
#line 3453 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 251:
#line 3474 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 252:
#line 3475 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 253:
#line 3480 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 254:
#line 3484 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            (yyval.spcondvalue)= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 255:
#line 3497 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 256:
#line 3503 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 257:
#line 3509 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 258:
#line 3518 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 259:
#line 3533 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (!pctx)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_condition_value *cond= pctx->find_condition((yyvsp[(1) - (1)].lex_str), false);

            if (!cond)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 260:
#line 3559 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 261:
#line 3564 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 262:
#line 3566 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 263:
#line 3571 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 265:
#line 3579 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 266:
#line 3588 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 267:
#line 3607 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 268:
#line 3609 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 269:
#line 3627 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 270:
#line 3633 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 271:
#line 3635 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 272:
#line 3637 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 273:
#line 3639 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 274:
#line 3641 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 275:
#line 3643 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 276:
#line 3645 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 277:
#line 3647 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 278:
#line 3649 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 279:
#line 3651 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 280:
#line 3653 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 281:
#line 3655 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 282:
#line 3660 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 283:
#line 3676 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 284:
#line 3691 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 285:
#line 3693 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 286:
#line 3698 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 287:
#line 3704 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 288:
#line 3713 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 289:
#line 3719 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 290:
#line 3728 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 291:
#line 3736 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            /*
              NOTE: lex->sphead is NULL if we're parsing something like
              'GET DIAGNOSTICS v' outside a stored program. We should throw
              ER_SP_UNDECLARED_VAR in such cases.
            */

            if (!sp)
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            (yyval.item)=
              create_item_for_sp_var(
                thd, (yyvsp[(1) - (1)].lex_str), NULL,
                sp->m_parser_data.get_current_stmt_start_ptr(),
                lip->get_tok_start(),
                lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 292:
#line 3765 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 293:
#line 3774 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 294:
#line 3776 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 295:
#line 3785 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 296:
#line 3790 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 297:
#line 3796 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 298:
#line 3805 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 299:
#line 3813 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 300:
#line 3815 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 301:
#line 3817 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 302:
#line 3819 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 303:
#line 3821 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 304:
#line 3823 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 305:
#line 3825 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 306:
#line 3827 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 307:
#line 3829 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 308:
#line 3831 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 309:
#line 3833 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 310:
#line 3835 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 311:
#line 3837 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 312:
#line 3842 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(1) - (1)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 313:
#line 3862 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            if (pctx->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            pctx->add_variable(thd,
                               (yyvsp[(3) - (3)].lex_str),
                               MYSQL_TYPE_DECIMAL,
                               sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 314:
#line 3885 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 315:
#line 3887 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.push_expr_start_ptr(YY_TOKEN_END); }
    break;

  case 316:
#line 3889 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(3) - (3)].item); }
    break;

  case 330:
#line 3910 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sphead->m_parser_data.new_cont_backpatch(); }
    break;

  case 331:
#line 3912 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 332:
#line 3920 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.set_current_stmt_start_ptr(lip->get_tok_start());
          }
    break;

  case 333:
#line 3930 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              /* Extract the query statement from the tokenizer. */

              LEX_STRING query=
                make_string(thd,
                            sp->m_parser_data.get_current_stmt_start_ptr(),
                            YY_TOKEN_END);

              if (!query.str)
                MYSQL_YYABORT;

              /* Add instruction. */

              sp_instr_stmt *i=
                new (thd->mem_root)
                  sp_instr_stmt(sp->instructions(), lex, query);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 334:
#line 3977 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);

            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 335:
#line 3987 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Check that this is a stored function. */

            if (sp->m_type != SP_TYPE_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }

            /* Indicate that we've reached RETURN statement. */

            sp->m_flags|= sp_head::HAS_RETURN;

            /* Add instruction. */

            sp_instr_freturn *i=
              new (thd->mem_root)
                sp_instr_freturn(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query,
                                 sp->m_return_field_def.sql_type);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 336:
#line 4033 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            pctx->push_label(thd,
                             EMPTY_STR,
                             sp->instructions());
          }
    break;

  case 337:
#line 4044 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 338:
#line 4056 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., sp_label::ITERATION),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            uint n= pctx->diff_handlers(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            n= pctx->diff_cursors(lab->ctx, exclusive);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, pctx);

            if (!i ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, lab) ||
                sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 339:
#line 4115 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            uint ip= sp->instructions();

            /* Inclusive the dest. */
            uint n= pctx->diff_handlers(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_hpop *hpop=
                new (thd->mem_root) sp_instr_hpop(ip++, pctx);

              if (!hpop || sp->add_instr(thd, hpop))
                MYSQL_YYABORT;
            }

            /* Inclusive the dest. */
            n= pctx->diff_cursors(lab->ctx, FALSE);

            if (n)
            {
              sp_instr_cpop *cpop=
                new (thd->mem_root) sp_instr_cpop(ip++, pctx, n);

              if (!cpop || sp->add_instr(thd, cpop))
                MYSQL_YYABORT;
            }

            /* Jump back */
            sp_instr_jump *i=
              new (thd->mem_root) sp_instr_jump(ip, pctx, lab->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 340:
#line 4165 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_copen *i=
              new (thd->mem_root)
                sp_instr_copen(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 341:
#line 4189 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cfetch *i=
              new (thd->mem_root)
                sp_instr_cfetch(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 342:
#line 4210 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 343:
#line 4215 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint offset;

            if (! pctx->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_instr_cclose *i=
              new (thd->mem_root)
                sp_instr_cclose(sp->instructions(), pctx, offset);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 347:
#line 4245 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 348:
#line 4263 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

            i->add_to_varlist(spv);
          }
    break;

  case 349:
#line 4283 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 350:
#line 4292 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            sp_instr_jump_if_not *i =
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex,
                                     (yyvsp[(2) - (2)].item), expr_query);

            /* Add jump instruction. */

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 351:
#line 4328 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i =
              new (thd->mem_root) sp_instr_jump(sp->instructions(), pctx);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());

            sp->m_parser_data.add_backpatch_entry(
              i, pctx->push_label(thd, EMPTY_STR, 0));
          }
    break;

  case 352:
#line 4347 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp->m_parser_data.do_backpatch(pctx->pop_label(),
                                           sp->instructions());
          }
    break;

  case 358:
#line 4370 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            case_stmt_action_case(thd);

            sp->reset_lex(thd); /* For CASE-expr $3 */
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 359:
#line 4381 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            /* Extract CASE-expression string. */

            LEX_STRING case_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              case_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!case_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Register new CASE-expression and get its id. */

            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            int case_expr_id= pctx->push_case_expr_id();

            if (case_expr_id < 0)
              MYSQL_YYABORT;

            /* Add CASE-set instruction. */

            sp_instr_set_case_expr *i=
              new (thd->mem_root)
                sp_instr_set_case_expr(sp->instructions(), lex,
                                       case_expr_id, (yyvsp[(3) - (3)].item), case_expr_query);

            if (i == NULL ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 360:
#line 4425 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, true);
          }
    break;

  case 361:
#line 4432 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            case_stmt_action_case(YYTHD);
          }
    break;

  case 362:
#line 4439 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            case_stmt_action_end_case(Lex, false);
          }
    break;

  case 367:
#line 4456 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 368:
#line 4465 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add CASE-when-jump instruction. */

            sp_instr_jump_case_when *i =
              new (thd->mem_root)
                sp_instr_jump_case_when(sp->instructions(), lex,
                                        pctx->get_current_case_expr_id(),
                                        (yyvsp[(3) - (3)].item), when_expr_query);

            if (i == NULL ||
                i->on_after_expr_parsing(thd) ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 369:
#line 4506 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 370:
#line 4514 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 371:
#line 4523 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING when_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              when_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!when_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), when_query);

            if (i == NULL ||
                sp->m_parser_data.add_backpatch_entry(
                  i, pctx->push_label(thd, EMPTY_STR, 0)) ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 372:
#line 4559 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (case_stmt_action_then(YYTHD, Lex))
              MYSQL_YYABORT;
          }
    break;

  case 373:
#line 4567 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_error *i=
              new (thd->mem_root)
                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 375:
#line 4585 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 376:
#line 4603 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            sp->m_parser_data.do_backpatch(lab, sp->instructions());
          }
    break;

  case 377:
#line 4622 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 378:
#line 4623 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 379:
#line 4628 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= pctx->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), sp->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 380:
#line 4644 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_label *lab= pctx->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 381:
#line 4661 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_label *lab=
              pctx->push_label(YYTHD, EMPTY_STR, sp->instructions());

            lab->type= sp_label::BEGIN;
          }
    break;

  case 382:
#line 4672 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->get_sp_current_parsing_ctx()->pop_label();
          }
    break;

  case 383:
#line 4680 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();

            sp_pcontext *child_pctx=
              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);

            lex->set_sp_current_parsing_ctx(child_pctx);
          }
    break;

  case 384:
#line 4695 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            // We always have a label.
            sp->m_parser_data.do_backpatch(pctx->last_label(),
                                           sp->instructions());

            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              sp_instr *i=
                new (thd->mem_root) sp_instr_hpop(sp->instructions(), pctx);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              sp_instr *i=
                new (thd->mem_root)
                  sp_instr_cpop(sp->instructions(), pctx, (yyvsp[(3) - (5)].spblock).curs);

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }

            lex->set_sp_current_parsing_ctx(pctx->pop_context());
          }
    break;

  case 385:
#line 4731 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
                new (thd->mem_root)
                  sp_instr_jump(sp->instructions(), pctx,
                                pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;
          }
    break;

  case 386:
#line 4746 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 387:
#line 4755 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(sp->instructions(), lex, (yyvsp[(3) - (3)].item), expr_query);

            if (i == NULL ||
                /* Jumping forward */
                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
                sp->m_parser_data.new_cont_backpatch() ||
                sp->m_parser_data.add_cont_backpatch_entry(i) ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 388:
#line 4793 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();

            sp_instr_jump *i=
              new (thd->mem_root)
                sp_instr_jump(sp->instructions(), pctx, pctx->last_label()->ip);

            if (!i || sp->add_instr(thd, i))
              MYSQL_YYABORT;

            sp->m_parser_data.do_cont_backpatch(sp->instructions());
          }
    break;

  case 389:
#line 4809 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            sp->reset_lex(thd);
            sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_END);
          }
    break;

  case 390:
#line 4818 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            uint ip= sp->instructions();

            /* Extract expression string. */

            LEX_STRING expr_query= EMPTY_STR;
            const char *expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if (lex->is_metadata_used())
            {
              expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);
              if (!expr_query.str)
                MYSQL_YYABORT;
            }

            /* Add jump instruction. */

            sp_instr_jump_if_not *i=
              new (thd->mem_root)
                sp_instr_jump_if_not(ip, lex, (yyvsp[(5) - (5)].item), expr_query,
                                     pctx->last_label()->ip);

            if (i == NULL ||
                sp->add_instr(thd, i) ||
                sp->restore_lex(thd))
            {
              MYSQL_YYABORT;
            }

            /* We can shortcut the cont_backpatch here */
            i->set_cont_dest(ip + 1);
          }
    break;

  case 392:
#line 4859 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_BEFORE; }
    break;

  case 393:
#line 4861 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TRG_ACTION_AFTER; }
    break;

  case 394:
#line 4866 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_INSERT; }
    break;

  case 395:
#line 4868 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_UPDATE; }
    break;

  case 396:
#line 4870 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TRG_EVENT_DELETE; }
    break;

  case 400:
#line 4904 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 401:
#line 4906 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 402:
#line 4916 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 403:
#line 4922 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 408:
#line 4945 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 459:
#line 5043 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 460:
#line 5051 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 461:
#line 5059 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 462:
#line 5067 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 463:
#line 5079 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 464:
#line 5091 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 465:
#line 5096 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 466:
#line 5101 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 467:
#line 5109 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 468:
#line 5117 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 469:
#line 5125 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 470:
#line 5133 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 471:
#line 5141 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 472:
#line 5149 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 473:
#line 5157 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 474:
#line 5170 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 475:
#line 5183 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 476:
#line 5197 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 477:
#line 5202 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 478:
#line 5214 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 479:
#line 5216 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 480:
#line 5266 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 481:
#line 5269 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 482:
#line 5271 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 483:
#line 5286 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 484:
#line 5305 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 485:
#line 5308 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 486:
#line 5309 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 487:
#line 5313 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 488:
#line 5315 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 489:
#line 5316 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 490:
#line 5318 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 491:
#line 5319 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 492:
#line 5324 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 493:
#line 5360 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 495:
#line 5366 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 497:
#line 5384 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 498:
#line 5403 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 499:
#line 5415 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 501:
#line 5424 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 502:
#line 5431 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 503:
#line 5432 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 504:
#line 5434 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 505:
#line 5436 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 506:
#line 5438 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 507:
#line 5440 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 508:
#line 5444 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 509:
#line 5446 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 510:
#line 5451 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 511:
#line 5453 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 512:
#line 5469 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 513:
#line 5470 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 514:
#line 5474 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 515:
#line 5475 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 516:
#line 5480 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 517:
#line 5499 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 518:
#line 5509 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 519:
#line 5520 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 520:
#line 5528 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 521:
#line 5530 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 522:
#line 5545 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 523:
#line 5547 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 524:
#line 5548 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 525:
#line 5551 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 526:
#line 5556 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 527:
#line 5560 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 528:
#line 5561 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 529:
#line 5566 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 530:
#line 5584 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 531:
#line 5599 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 532:
#line 5601 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 533:
#line 5616 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 534:
#line 5632 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 535:
#line 5653 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 536:
#line 5654 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 537:
#line 5659 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 538:
#line 5678 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 539:
#line 5683 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 540:
#line 5692 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 541:
#line 5714 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 542:
#line 5729 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 543:
#line 5731 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 544:
#line 5746 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 545:
#line 5751 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 546:
#line 5772 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 547:
#line 5777 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST [COLUMNS] partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 548:
#line 5806 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 549:
#line 5817 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 550:
#line 5818 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 551:
#line 5823 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 552:
#line 5834 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 553:
#line 5836 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 554:
#line 5859 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 555:
#line 5860 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 556:
#line 5865 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 557:
#line 5878 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 558:
#line 5898 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 559:
#line 5912 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 560:
#line 5937 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 561:
#line 5938 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 562:
#line 5943 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 563:
#line 5975 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 564:
#line 5980 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 565:
#line 5984 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 566:
#line 5985 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 567:
#line 5989 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 568:
#line 5990 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 569:
#line 5995 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 570:
#line 5997 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 571:
#line 6003 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 572:
#line 6005 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 573:
#line 6007 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 574:
#line 6009 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 575:
#line 6011 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 576:
#line 6013 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 577:
#line 6022 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 578:
#line 6037 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 579:
#line 6041 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 580:
#line 6051 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 581:
#line 6052 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 582:
#line 6056 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 583:
#line 6057 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 584:
#line 6061 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 585:
#line 6062 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 586:
#line 6066 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 587:
#line 6067 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 588:
#line 6071 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 589:
#line 6072 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 590:
#line 6076 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 591:
#line 6077 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 592:
#line 6081 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 593:
#line 6085 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 594:
#line 6086 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 602:
#line 6107 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 603:
#line 6112 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 604:
#line 6117 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 605:
#line 6122 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 606:
#line 6127 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 607:
#line 6132 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 608:
#line 6137 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 609:
#line 6142 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 610:
#line 6157 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 611:
#line 6163 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 612:
#line 6178 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 613:
#line 6183 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 614:
#line 6198 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 615:
#line 6204 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 616:
#line 6222 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 617:
#line 6227 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 618:
#line 6232 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 619:
#line 6237 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 620:
#line 6242 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 621:
#line 6247 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 622:
#line 6251 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 625:
#line 6275 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 626:
#line 6280 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 627:
#line 6285 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 628:
#line 6290 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 629:
#line 6292 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 630:
#line 6294 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 631:
#line 6296 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 632:
#line 6302 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 633:
#line 6310 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 634:
#line 6328 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 635:
#line 6345 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                thd->lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 636:
#line 6371 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            plugin_ref plugin=
              ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                lex->create_info.options & HA_LEX_CREATE_TMP_TABLE);
            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 637:
#line 6388 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 638:
#line 6389 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 639:
#line 6390 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 640:
#line 6391 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 641:
#line 6392 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 642:
#line 6393 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 643:
#line 6394 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_UNCOMPRESSED; }
    break;

  case 644:
#line 6395 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_ZLIB; }
    break;

  case 645:
#line 6396 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_QUICKLZ; }
    break;

  case 646:
#line 6397 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_LZMA; }
    break;

  case 647:
#line 6398 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_FAST; }
    break;

  case 648:
#line 6399 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_TOKU_SMALL; }
    break;

  case 649:
#line 6400 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMFORT; }
    break;

  case 650:
#line 6404 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 651:
#line 6405 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 652:
#line 6406 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 653:
#line 6410 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 655:
#line 6415 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 656:
#line 6416 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 657:
#line 6417 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 658:
#line 6418 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 659:
#line 6424 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 665:
#line 6442 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 666:
#line 6449 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 667:
#line 6455 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 668:
#line 6461 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 669:
#line 6467 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
           /* TokuDB */
            if (((yyvsp[(1) - (8)].lex_str).length != 0)
                && ((enum Key::Keytype)(yyvsp[(2) - (8)].key_type) == (Key::CLUSTERING | Key::MULTIPLE)))
            {
              /* Forbid "CONSTRAINT c CLUSTERING" */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 670:
#line 6480 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 671:
#line 6499 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 675:
#line 6514 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 676:
#line 6515 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 677:
#line 6519 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 678:
#line 6524 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 679:
#line 6533 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 680:
#line 6546 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 681:
#line 6547 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 682:
#line 6548 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 683:
#line 6550 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 684:
#line 6555 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 685:
#line 6559 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 686:
#line 6564 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 687:
#line 6569 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 688:
#line 6573 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 689:
#line 6578 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 690:
#line 6583 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 691:
#line 6589 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 692:
#line 6594 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 693:
#line 6600 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 694:
#line 6604 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 695:
#line 6609 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 696:
#line 6614 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                /* Reset unsupported positive column width to default value */
                Lex->length= NULL;
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_INVALID_YEAR_COLUMN_LENGTH,
                                    ER(ER_INVALID_YEAR_COLUMN_LENGTH),
                                    length);
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 697:
#line 6632 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 698:
#line 6634 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_TIME2; }
    break;

  case 699:
#line 6636 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME2;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                This behavior is deprecated now.
              */
              if (!YYTHD->variables.explicit_defaults_for_timestamp)
                Lex->type|= NOT_NULL_FLAG;

              (yyval.num)=MYSQL_TYPE_TIMESTAMP2;
            }
          }
    break;

  case 700:
#line 6652 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= MYSQL_TYPE_DATETIME2; }
    break;

  case 701:
#line 6654 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 702:
#line 6659 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 703:
#line 6664 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 704:
#line 6676 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 705:
#line 6681 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 706:
#line 6686 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 707:
#line 6691 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 708:
#line 6693 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 709:
#line 6695 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 710:
#line 6697 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 711:
#line 6699 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 712:
#line 6701 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 713:
#line 6703 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 714:
#line 6705 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 715:
#line 6707 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 716:
#line 6709 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 717:
#line 6711 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 718:
#line 6713 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 719:
#line 6715 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 720:
#line 6717 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 721:
#line 6725 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 722:
#line 6726 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 723:
#line 6728 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 724:
#line 6733 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 725:
#line 6734 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 726:
#line 6735 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 727:
#line 6736 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 728:
#line 6737 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 729:
#line 6741 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 730:
#line 6745 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 731:
#line 6746 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 732:
#line 6750 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 733:
#line 6751 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 734:
#line 6755 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 735:
#line 6756 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 736:
#line 6757 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 737:
#line 6758 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 738:
#line 6759 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 739:
#line 6763 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 740:
#line 6764 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 741:
#line 6765 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 742:
#line 6766 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 743:
#line 6767 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 744:
#line 6772 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 745:
#line 6777 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 746:
#line 6779 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 747:
#line 6784 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 748:
#line 6786 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 749:
#line 6788 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 750:
#line 6793 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 751:
#line 6802 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->dec= (char *) 0; }
    break;

  case 752:
#line 6803 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->dec= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 753:
#line 6807 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 754:
#line 6808 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 755:
#line 6810 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
             int error;
             (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(2) - (3)].lex_str).str, NULL, &error);
           }
    break;

  case 756:
#line 6817 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 757:
#line 6818 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 758:
#line 6822 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 759:
#line 6823 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 760:
#line 6827 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 761:
#line 6828 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 762:
#line 6829 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 763:
#line 6833 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 764:
#line 6834 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 765:
#line 6835 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 766:
#line 6836 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 767:
#line 6839 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 768:
#line 6840 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 769:
#line 6844 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 770:
#line 6845 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 771:
#line 6849 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 772:
#line 6850 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 773:
#line 6854 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 775:
#line 6859 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 776:
#line 6860 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 777:
#line 6861 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 778:
#line 6862 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->on_update_value= (yyvsp[(3) - (3)].item); }
    break;

  case 779:
#line 6863 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 780:
#line 6865 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 781:
#line 6871 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 782:
#line 6877 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (1)].key_type) & Key::UNIQUE)
              lex->type|= UNIQUE_FLAG;
            if ((yyvsp[(1) - (1)].key_type) & Key::CLUSTERING)
              lex->type|= CLUSTERING_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 783:
#line 6886 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (2)].key_type) & Key::UNIQUE)
              lex->type|= UNIQUE_KEY_FLAG;
            if ((yyvsp[(1) - (2)].key_type) & Key::CLUSTERING)
              lex->type|= CLUSTERING_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 784:
#line 6894 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 785:
#line 6896 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 786:
#line 6909 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DEFAULT << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 787:
#line 6915 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_FIXED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 788:
#line 6921 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_DYNAMIC << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 789:
#line 6927 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_COLUMN_FORMAT_MASK);
            Lex->type|=
              (COLUMN_FORMAT_TYPE_COMPRESSED << FIELD_FLAGS_COLUMN_FORMAT);
          }
    break;

  case 790:
#line 6933 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DEFAULT << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 791:
#line 6938 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_DISK << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 792:
#line 6943 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->type&= ~(FIELD_FLAGS_STORAGE_MEDIA_MASK);
            Lex->type|= (HA_SM_MEMORY << FIELD_FLAGS_STORAGE_MEDIA);
          }
    break;

  case 793:
#line 6952 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 794:
#line 6973 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 796:
#line 6982 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 797:
#line 6986 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 798:
#line 6987 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 799:
#line 6992 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 800:
#line 6999 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 801:
#line 7003 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 802:
#line 7004 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 803:
#line 7008 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 804:
#line 7009 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 805:
#line 7014 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 806:
#line 7022 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 807:
#line 7026 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 808:
#line 7027 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 809:
#line 7032 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 810:
#line 7039 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 811:
#line 7040 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 812:
#line 7044 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 813:
#line 7045 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 814:
#line 7049 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 815:
#line 7050 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 816:
#line 7055 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 817:
#line 7057 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 818:
#line 7061 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 819:
#line 7068 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 820:
#line 7077 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
    break;

  case 821:
#line 7082 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
          }
    break;

  case 822:
#line 7089 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 825:
#line 7092 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 826:
#line 7093 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 827:
#line 7095 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 828:
#line 7100 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 829:
#line 7107 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 830:
#line 7108 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 831:
#line 7113 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
    break;

  case 832:
#line 7121 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 833:
#line 7125 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 834:
#line 7126 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 835:
#line 7130 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 836:
#line 7133 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 837:
#line 7134 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 838:
#line 7135 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 839:
#line 7136 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 840:
#line 7141 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 841:
#line 7149 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 842:
#line 7155 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 843:
#line 7156 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 844:
#line 7161 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 845:
#line 7170 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 846:
#line 7171 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 847:
#line 7175 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 848:
#line 7176 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 851:
#line 7190 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 852:
#line 7197 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 854:
#line 7203 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 855:
#line 7210 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 856:
#line 7222 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 857:
#line 7224 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 858:
#line 7226 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 859:
#line 7228 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 860:
#line 7233 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 861:
#line 7239 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 862:
#line 7245 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 863:
#line 7252 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 864:
#line 7259 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 865:
#line 7267 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 866:
#line 7268 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 867:
#line 7269 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 868:
#line 7270 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 869:
#line 7271 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 870:
#line 7275 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 871:
#line 7279 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 872:
#line 7280 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_type)= (yyvsp[(1) - (2)].key_type); }
    break;

  case 873:
#line 7284 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 874:
#line 7285 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 875:
#line 7289 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 877:
#line 7294 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 878:
#line 7295 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 879:
#line 7296 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 880:
#line 7300 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 882:
#line 7306 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (1)].key_type) | Key::MULTIPLE);
          }
    break;

  case 883:
#line 7310 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (yyvsp[(1) - (1)].key_type);
          }
    break;

  case 884:
#line 7317 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (yyvsp[(1) - (1)].key_type);
          }
    break;

  case 885:
#line 7321 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (2)].key_type) | (yyvsp[(2) - (2)].key_type));
          }
    break;

  case 886:
#line 7325 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.key_type)= (enum Key::Keytype)((yyvsp[(1) - (2)].key_type) | (yyvsp[(2) - (2)].key_type));
          }
    break;

  case 887:
#line 7331 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 888:
#line 7335 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::CLUSTERING; }
    break;

  case 889:
#line 7339 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 890:
#line 7344 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 891:
#line 7356 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 894:
#line 7373 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 896:
#line 7378 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 898:
#line 7383 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 906:
#line 7403 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 907:
#line 7404 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 908:
#line 7408 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 909:
#line 7409 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 910:
#line 7414 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 911:
#line 7415 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 912:
#line 7416 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->key_create_info.is_visible = (yyvsp[(1) - (1)].num); }
    break;

  case 917:
#line 7431 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 918:
#line 7443 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 919:
#line 7444 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 920:
#line 7445 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 921:
#line 7449 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 922:
#line 7450 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 923:
#line 7455 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 924:
#line 7461 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 925:
#line 7474 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 926:
#line 7475 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 927:
#line 7479 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 928:
#line 7480 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 929:
#line 7484 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 930:
#line 7485 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 931:
#line 7493 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            lex->wait_time= (yyvsp[(5) - (5)].ulong_num);
            DBUG_ASSERT(!lex->m_sql_cmd);
            if (lex->ignore)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                  ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                  "IGNORE");
            }
          }
    break;

  case 932:
#line 7527 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 933:
#line 7539 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 934:
#line 7544 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 935:
#line 7553 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 936:
#line 7564 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 937:
#line 7575 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 938:
#line 7582 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 939:
#line 7593 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 940:
#line 7600 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 941:
#line 7611 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 942:
#line 7618 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 943:
#line 7630 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 944:
#line 7632 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 945:
#line 7652 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 946:
#line 7665 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 947:
#line 7670 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 948:
#line 7675 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 949:
#line 7680 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 950:
#line 7685 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 951:
#line 7692 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 952:
#line 7699 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)))
              MYSQL_YYABORT;
        }
    break;

  case 953:
#line 7704 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 954:
#line 7711 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 955:
#line 7712 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 956:
#line 7713 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 957:
#line 7714 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 958:
#line 7718 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 959:
#line 7720 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 960:
#line 7731 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 961:
#line 7732 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 962:
#line 7736 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 963:
#line 7737 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 965:
#line 7743 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 966:
#line 7751 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 972:
#line 7773 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->force_drop_table= (yyvsp[(3) - (4)].num);
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 973:
#line 7779 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 974:
#line 7786 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 976:
#line 7800 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 977:
#line 7812 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 979:
#line 7825 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 981:
#line 7838 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 982:
#line 7845 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 984:
#line 7858 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 985:
#line 7885 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 986:
#line 7892 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 988:
#line 7900 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 989:
#line 7912 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 991:
#line 7918 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 992:
#line 7923 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 993:
#line 7930 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 995:
#line 7945 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 996:
#line 7949 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 997:
#line 7953 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 998:
#line 7960 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 999:
#line 7961 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1000:
#line 7966 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1003:
#line 7986 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 1004:
#line 7995 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1005:
#line 7999 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1006:
#line 8004 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1007:
#line 8009 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 1008:
#line 8015 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1009:
#line 8019 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
          }
    break;

  case 1010:
#line 8028 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 1011:
#line 8040 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1012:
#line 8044 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1013:
#line 8053 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(4) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1014:
#line 8062 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1015:
#line 8071 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1016:
#line 8080 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1017:
#line 8086 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1018:
#line 8092 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1019:
#line 8101 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            Alter_index_visibility *ac= new Alter_index_visibility((yyvsp[(3) - (4)].lex_str).str, (yyvsp[(4) - (4)].num));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_index_visibility_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_INDEX_VISIBILITY;
          }
    break;

  case 1020:
#line 8110 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1021:
#line 8119 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            enum_ident_name_check ident_check_status=
              check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE);
            if (ident_check_status == IDENT_NAME_WRONG)
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            else if (ident_check_status == IDENT_NAME_TOO_LONG)
            {
              my_error(ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (3)].table)->db.str &&
                (check_and_convert_db_name(&(yyvsp[(3) - (3)].table)->db, FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1022:
#line 8147 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
    break;

  case 1023:
#line 8168 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1024:
#line 8178 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1025:
#line 8182 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1033:
#line 8199 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1034:
#line 8204 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1035:
#line 8215 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1036:
#line 8220 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1037:
#line 8230 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1038:
#line 8231 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1039:
#line 8235 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1040:
#line 8236 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1041:
#line 8240 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1042:
#line 8241 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1043:
#line 8242 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1044:
#line 8246 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1045:
#line 8248 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1046:
#line 8253 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1047:
#line 8260 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1048:
#line 8261 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1049:
#line 8262 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1050:
#line 8263 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1051:
#line 8268 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            /* Clean previous slave connection values */
            lex->slave_connection.reset();
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            lex->mi.set_unspecified();
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1052:
#line 8280 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              It is not possible to set user's information when
              one is trying to start the SQL Thread.
            */
            if ((Lex->slave_thd_opt & SLAVE_SQL) == SLAVE_SQL &&
                (Lex->slave_thd_opt & SLAVE_IO) != SLAVE_IO &&
                (Lex->slave_connection.user ||
                 Lex->slave_connection.password ||
                 Lex->slave_connection.plugin_auth ||
                 Lex->slave_connection.plugin_dir))
            {
              my_error(ER_SQLTHREAD_WITH_SECURE_SLAVE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1053:
#line 8297 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            lex->slave_thd_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1054:
#line 8307 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1055:
#line 8323 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1056:
#line 8327 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1057:
#line 8334 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1058:
#line 8338 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1059:
#line 8345 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1060:
#line 8349 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1061:
#line 8353 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1063:
#line 8364 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1064:
#line 8368 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->slave_connection.user= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1065:
#line 8374 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1066:
#line 8378 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->slave_connection.password= (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 1067:
#line 8384 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1068:
#line 8388 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_auth= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1069:
#line 8394 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* empty */
          }
    break;

  case 1070:
#line 8398 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->slave_connection.plugin_dir= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 1071:
#line 8405 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1072:
#line 8409 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1073:
#line 8416 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1074:
#line 8420 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1075:
#line 8427 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_SQL;
          }
    break;

  case 1076:
#line 8431 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= SLAVE_IO;
          }
    break;

  case 1077:
#line 8437 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1078:
#line 8439 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                lex->mi.gtid) ||
               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
                lex->mi.gtid) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
                  lex->mi.gtid ||
                  lex->mi.until_after_gaps) ||
                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
                /* with any other coordinates related options       */
                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
                  || lex->mi.relay_log_pos || lex->mi.gtid)
                 && lex->mi.until_after_gaps))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1081:
#line 8466 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_BEFORE_GTIDS;
          }
    break;

  case 1082:
#line 8471 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.gtid= (yyvsp[(3) - (3)].lex_str).str;
            Lex->mi.gtid_until_condition= LEX_MASTER_INFO::UNTIL_SQL_AFTER_GTIDS;
          }
    break;

  case 1083:
#line 8476 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->mi.until_after_gaps= true;
          }
    break;

  case 1084:
#line 8483 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1085:
#line 8490 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1086:
#line 8494 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1087:
#line 8495 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1088:
#line 8496 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1089:
#line 8501 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1090:
#line 8511 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:
#line 8522 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1092:
#line 8523 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1093:
#line 8527 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1094:
#line 8528 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1095:
#line 8532 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1096:
#line 8533 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1097:
#line 8534 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1098:
#line 8539 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1099:
#line 8549 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:
#line 8561 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1101:
#line 8569 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1102:
#line 8584 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:
#line 8595 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1104:
#line 8596 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1105:
#line 8600 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1106:
#line 8601 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1107:
#line 8605 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1108:
#line 8606 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1109:
#line 8607 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1110:
#line 8608 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1111:
#line 8609 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1112:
#line 8610 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1113:
#line 8615 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1114:
#line 8625 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
            lex->wait_time= (yyvsp[(6) - (6)].ulong_num);
          }
    break;

  case 1115:
#line 8637 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1116:
#line 8638 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1117:
#line 8639 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1118:
#line 8644 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1119:
#line 8648 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1120:
#line 8650 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1121:
#line 8657 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1122:
#line 8662 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1125:
#line 8675 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (4)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(4) - (4)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->wait_time= (yyvsp[(2) - (4)].ulong_num);
          }
    break;

  case 1126:
#line 8689 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1127:
#line 8693 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1132:
#line 8712 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1133:
#line 8722 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1134:
#line 8731 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1135:
#line 8732 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1136:
#line 8737 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1137:
#line 8743 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1142:
#line 8758 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1143:
#line 8768 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1144:
#line 8778 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1146:
#line 8785 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1148:
#line 8796 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 1150:
#line 8802 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1151:
#line 8803 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1152:
#line 8823 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT ||
                        lex->sql_command == SQLCOM_UPDATE ||
                        lex->sql_command == SQLCOM_END);

            /* SELECT...UPDATE is regarded as a DML.*/
            if (lex->sql_command != SQLCOM_UPDATE)
              lex->sql_command= SQLCOM_SELECT; //wangyang 这里用于初始化 命令
          }
    break;

  case 1155:
#line 8848 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1157:
#line 8858 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1159:
#line 8870 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1161:
#line 8893 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;

            /* SELECT ... FROM UPDATE only applies to top-level SELECT statement. */
            if (lex->sql_command == SQLCOM_UPDATE && sel != &lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SELECT...FROM UPDATE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1162:
#line 8908 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1166:
#line 8920 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1171:
#line 8932 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* SELECT ... FROM UPDATE only applies to top-level SELECT statement. */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SELECT...FROM UPDATE");
              MYSQL_YYABORT;
            }

            if (Select->options)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SELECT...FROM UPDATE");
              MYSQL_YYABORT;
            }

            /* Explain SELECT ... FROM UPDATE is not supported. */
            if (Lex->describe)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SELECT...FROM UPDATE");
              MYSQL_YYABORT;
            }
            Lex->sql_command= SQLCOM_UPDATE;
            Lex->duplicates= DUP_ERROR;
            Lex->return_update= true;
            Lex->real_query_start= YYLIP->get_tok_start() - YYTHD->query();
            Lex->return_update_list.swap(Select->item_list);
            Select->item_list.empty();
          }
    break;

  case 1172:
#line 8962 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(10) - (12)].table), NULL, 0,
                                           TL_READ_DEFAULT,
                                           MDL_SHARED_READ))
              MYSQL_YYABORT;

            Select->set_lock_for_tables((yyvsp[(4) - (12)].lock_type));
          }
    break;

  case 1173:
#line 8970 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1174:
#line 8976 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1176:
#line 8987 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!(Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), (yyvsp[(3) - (3)].lex_str_ptr),
                                                0,
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                NULL, NULL, NULL,
                                                true)))
              MYSQL_YYABORT;

            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1178:
#line 9005 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1182:
#line 9022 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1183:
#line 9050 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1185:
#line 9082 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->current_select->set_lock_for_tables(TL_WRITE);
              lex->safe_to_cache_query=0;
	      lex->wait_time= (yyvsp[(3) - (3)].ulong_num);
            }
          }
    break;

  case 1186:
#line 9092 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->current_select->
                set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
              lex->safe_to_cache_query=0;
	      lex->wait_time= (yyvsp[(5) - (5)].ulong_num);
            }
          }
    break;

  case 1189:
#line 9112 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1190:
#line 9130 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1191:
#line 9137 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            else if (!(yyvsp[(2) - (4)].item)->item_name.is_set())
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1192:
#line 9161 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1193:
#line 9167 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1194:
#line 9173 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1195:
#line 9174 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1196:
#line 9175 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1197:
#line 9176 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1198:
#line 9177 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1199:
#line 9181 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1200:
#line 9182 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1201:
#line 9191 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1202:
#line 9242 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:
#line 9249 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1204:
#line 9292 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:
#line 9298 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:
#line 9304 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:
#line 9310 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:
#line 9316 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:
#line 9322 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:
#line 9328 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:
#line 9338 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:
#line 9344 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:
#line 9350 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:
#line 9356 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:
#line 9362 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:
#line 9372 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:
#line 9378 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1220:
#line 9388 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:
#line 9394 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:
#line 9402 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:
#line 9408 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1224:
#line 9418 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:
#line 9424 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1226:
#line 9433 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1227:
#line 9443 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:
#line 9449 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1229:
#line 9459 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:
#line 9465 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:
#line 9478 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:
#line 9484 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1234:
#line 9490 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:
#line 9496 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:
#line 9502 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:
#line 9508 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:
#line 9514 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:
#line 9520 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:
#line 9526 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:
#line 9532 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:
#line 9538 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:
#line 9544 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:
#line 9550 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:
#line 9556 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:
#line 9585 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1256:
#line 9586 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1257:
#line 9587 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1258:
#line 9588 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1259:
#line 9589 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1260:
#line 9590 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1261:
#line 9594 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1262:
#line 9595 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1268:
#line 9605 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1273:
#line 9621 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1274:
#line 9627 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1275:
#line 9631 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1276:
#line 9637 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1277:
#line 9643 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1278:
#line 9649 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1279:
#line 9655 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1280:
#line 9657 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1281:
#line 9664 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1282:
#line 9671 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1283:
#line 9677 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              ErrConvString str(&item->str_value);
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
                (yyval.item)= create_temporal_literal(YYTHD,
                                            str.ptr(), str.length(),
                                            system_charset_info,
                                            type, false);
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1284:
#line 9718 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1285:
#line 9727 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1286:
#line 9734 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1287:
#line 9742 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1288:
#line 9748 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1289:
#line 9755 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1290:
#line 9761 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            TABLE_LIST *table;
            if (!(table= Lex->current_select->add_table_to_list(YYTHD, (yyvsp[(3) - (4)].table), NULL,
                                                                TL_OPTION_SEQUENCE,
                                                                TL_READ,
                                                                MDL_SHARED_READ,
                                                                NULL, NULL, NULL, true)))
              MYSQL_YYABORT;
            if (!((yyval.item)= new (YYTHD->mem_root) Item_func_nextval(YYTHD, table)))
              MYSQL_YYABORT;
          }
    break;

  case 1291:
#line 9773 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            TABLE_LIST *table;
            if (!(table= Lex->current_select->add_table_to_list(YYTHD, (yyvsp[(3) - (4)].table), NULL,
                                                                TL_OPTION_SEQUENCE,
                                                                TL_READ,
                                                                MDL_SHARED_READ,
                                                                NULL, NULL, NULL, true)))
              MYSQL_YYABORT;
            if (!((yyval.item)= new (YYTHD->mem_root) Item_func_currval(YYTHD, table)))
              MYSQL_YYABORT;
          }
    break;

  case 1292:
#line 9785 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->m_name.ptr());
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:
#line 9799 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1294:
#line 9807 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:
#line 9822 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:
#line 9828 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:
#line 9834 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1298:
#line 9842 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1299:
#line 9848 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:
#line 9854 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:
#line 9860 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:
#line 9866 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1303:
#line 9881 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1304:
#line 9893 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:
#line 9899 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:
#line 9905 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:
#line 9911 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:
#line 9917 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:
#line 9923 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:
#line 9929 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:
#line 9935 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:
#line 9941 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:
#line 9947 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:
#line 9953 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1315:
#line 9959 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:
#line 9965 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:
#line 9971 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:
#line 9977 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:
#line 9983 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:
#line 9989 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1321:
#line 9997 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:
#line 10018 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:
#line 10025 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:
#line 10031 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1325:
#line 10038 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1326:
#line 10046 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:
#line 10053 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:
#line 10059 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:
#line 10065 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:
#line 10071 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(1) - (1)].item);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1331:
#line 10076 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:
#line 10082 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:
#line 10089 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:
#line 10095 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:
#line 10101 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:
#line 10107 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:
#line 10113 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1338:
#line 10119 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].ulong_num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1339:
#line 10137 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:
#line 10143 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:
#line 10149 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1342:
#line 10156 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1343:
#line 10163 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1344:
#line 10178 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:
#line 10184 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:
#line 10190 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:
#line 10196 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1348:
#line 10202 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1349:
#line 10209 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:
#line 10215 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:
#line 10221 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_format((yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:
#line 10227 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:
#line 10233 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:
#line 10239 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:
#line 10247 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1356:
#line 10260 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:
#line 10266 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:
#line 10272 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:
#line 10278 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_reverse((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:
#line 10284 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1361:
#line 10292 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:
#line 10298 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int(NAME_STRING("0"),
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:
#line 10310 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:
#line 10316 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:
#line 10322 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string((yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:
#line 10330 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_char_typecast((yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[(6) - (7)].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:
#line 10340 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_weight_string((yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num), (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:
#line 10346 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1369:
#line 10362 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_mbr_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1370:
#line 10368 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1371:
#line 10375 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1372:
#line 10382 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1373:
#line 10389 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1374:
#line 10396 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1375:
#line 10403 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1376:
#line 10407 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1377:
#line 10426 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1378:
#line 10445 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (sp_check_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1379:
#line 10499 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str ||
                (check_and_convert_db_name(&(yyvsp[(1) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
              MYSQL_YYABORT;
            if (sp_check_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1380:
#line 10539 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1381:
#line 10541 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1382:
#line 10545 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1383:
#line 10546 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1384:
#line 10550 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1385:
#line 10551 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1386:
#line 10555 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1387:
#line 10556 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1388:
#line 10561 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1389:
#line 10568 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1390:
#line 10576 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info, false);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->item_name.copy((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1391:
#line 10602 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1392:
#line 10608 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1393:
#line 10614 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1394:
#line 10620 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1395:
#line 10626 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1396:
#line 10632 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1397:
#line 10641 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1398:
#line 10647 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1399:
#line 10649 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1400:
#line 10651 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1401:
#line 10657 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1402:
#line 10668 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1403:
#line 10674 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1404:
#line 10680 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:
#line 10686 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1406:
#line 10692 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1407:
#line 10698 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1408:
#line 10704 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1409:
#line 10710 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1410:
#line 10716 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1411:
#line 10722 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1412:
#line 10726 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1413:
#line 10741 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1414:
#line 10749 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1415:
#line 10756 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item=
              new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item), false);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1416:
#line 10767 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1417:
#line 10775 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1418:
#line 10790 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1419:
#line 10791 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1420:
#line 10796 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1421:
#line 10801 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1423:
#line 10807 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1425:
#line 10824 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1426:
#line 10826 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1427:
#line 10831 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1428:
#line 10840 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1429:
#line 10848 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1430:
#line 10850 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1431:
#line 10852 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1432:
#line 10854 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1433:
#line 10856 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1434:
#line 10858 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1435:
#line 10860 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1436:
#line 10862 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec= Lex->length= (char *) 0; }
    break;

  case 1437:
#line 10864 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_TIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1438:
#line 10866 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)= ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->length= (char *) 0; }
    break;

  case 1439:
#line 10868 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1440:
#line 10872 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1441:
#line 10873 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1442:
#line 10878 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1443:
#line 10885 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1444:
#line 10892 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1445:
#line 10893 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1446:
#line 10898 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1447:
#line 10905 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1448:
#line 10912 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1449:
#line 10913 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1450:
#line 10917 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1451:
#line 10918 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1452:
#line 10923 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1453:
#line 10931 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1454:
#line 10941 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1455:
#line 10943 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1456:
#line 10951 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1457:
#line 10962 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1458:
#line 10963 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1459:
#line 10969 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1460:
#line 10971 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1461:
#line 10991 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1462:
#line 10993 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1463:
#line 10996 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1464:
#line 11004 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1465:
#line 11011 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1466:
#line 11019 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1467:
#line 11027 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1468:
#line 11031 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1469:
#line 11033 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1470:
#line 11041 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1471:
#line 11049 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1472:
#line 11057 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1473:
#line 11061 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1474:
#line 11067 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1475:
#line 11077 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1476:
#line 11085 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1477:
#line 11094 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1478:
#line 11098 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1479:
#line 11105 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1480:
#line 11115 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1481:
#line 11116 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1482:
#line 11117 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1483:
#line 11125 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1485:
#line 11131 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1486:
#line 11145 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1487:
#line 11150 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1488:
#line 11161 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1489:
#line 11201 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1490:
#line 11274 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1491:
#line 11284 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1492:
#line 11289 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1493:
#line 11297 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1494:
#line 11309 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1495:
#line 11328 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1496:
#line 11336 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1498:
#line 11345 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1499:
#line 11351 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1500:
#line 11367 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1501:
#line 11384 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1503:
#line 11391 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1504:
#line 11396 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1505:
#line 11421 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1506:
#line 11422 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1507:
#line 11427 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1508:
#line 11430 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1509:
#line 11431 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1510:
#line 11432 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1511:
#line 11436 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1512:
#line 11437 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1513:
#line 11442 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1515:
#line 11447 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1520:
#line 11460 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1522:
#line 11464 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1524:
#line 11469 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1525:
#line 11470 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1526:
#line 11475 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1527:
#line 11477 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1530:
#line 11487 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1531:
#line 11498 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1532:
#line 11510 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1533:
#line 11511 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1534:
#line 11512 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1535:
#line 11513 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1536:
#line 11514 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1537:
#line 11515 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1538:
#line 11516 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1539:
#line 11517 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1540:
#line 11518 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1541:
#line 11519 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1542:
#line 11520 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1543:
#line 11521 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1544:
#line 11525 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1545:
#line 11526 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1546:
#line 11527 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1547:
#line 11528 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1548:
#line 11529 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1549:
#line 11530 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1550:
#line 11531 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1551:
#line 11532 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1552:
#line 11533 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1553:
#line 11537 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATE; }
    break;

  case 1554:
#line 11538 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_TIME; }
    break;

  case 1555:
#line 11539 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1556:
#line 11540 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.date_time_type)= MYSQL_TIMESTAMP_DATETIME; }
    break;

  case 1560:
#line 11550 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1561:
#line 11552 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1564:
#line 11565 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1565:
#line 11567 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1566:
#line 11571 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1568:
#line 11583 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1569:
#line 11587 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1570:
#line 11598 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1571:
#line 11603 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1574:
#line 11625 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1575:
#line 11627 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1576:
#line 11631 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1577:
#line 11633 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1578:
#line 11653 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            if (lex->current_select->options & SELECT_DISTINCT)
            {
              // DISTINCT+ROLLUP does not work
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP", "DISTINCT");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1582:
#line 11693 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1585:
#line 11712 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1587:
#line 11747 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1588:
#line 11749 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1589:
#line 11753 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1590:
#line 11754 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1591:
#line 11755 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1592:
#line 11760 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1593:
#line 11766 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1594:
#line 11770 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1595:
#line 11771 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1596:
#line 11776 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1597:
#line 11783 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1598:
#line 11790 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1599:
#line 11797 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1600:
#line 11807 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          THD *thd= YYTHD;
          LEX *lex= Lex;
          Lex_input_stream *lip= YYLIP;
          sp_head *sp= lex->sphead;
          const char *query_start_ptr=
            sp ? sp->m_parser_data.get_current_stmt_start_ptr() : NULL;

          Item_splocal *v= create_item_for_sp_var(thd, (yyvsp[(1) - (1)].lex_str), NULL,
                                                  query_start_ptr,
                                                  lip->get_tok_start(),
                                                  lip->get_ptr());
          if (!v)
            MYSQL_YYABORT;

          lex->safe_to_cache_query= false;

          if (v->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }

          v->limit_clause_param= true;
          (yyval.item)= v;
        }
    break;

  case 1601:
#line 11834 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1602:
#line 11838 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1603:
#line 11844 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1604:
#line 11850 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1605:
#line 11859 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1606:
#line 11864 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1607:
#line 11873 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1608:
#line 11874 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1609:
#line 11875 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1610:
#line 11876 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1611:
#line 11877 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1612:
#line 11878 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1613:
#line 11882 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1614:
#line 11883 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1615:
#line 11884 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1616:
#line 11885 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1617:
#line 11886 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1618:
#line 11890 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1619:
#line 11891 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1620:
#line 11892 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1621:
#line 11893 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1622:
#line 11894 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1623:
#line 11898 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1624:
#line 11899 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1625:
#line 11900 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1626:
#line 11901 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1627:
#line 11906 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1631:
#line 11917 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            
            if (!lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }

            if (lex->result != NULL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO");
              MYSQL_YYABORT;
            }

            if ((lex->proc_analyse= new Proc_analyse_params) == NULL)
            {
              my_error(ER_OUTOFMEMORY, MYF(ME_FATALERROR));
              MYSQL_YYABORT;
            }
            
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1633:
#line 11950 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1634:
#line 11952 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (1)].ulonglong_number);
          }
    break;

  case 1635:
#line 11956 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->proc_analyse->max_tree_elements= (yyvsp[(1) - (3)].ulonglong_number);
            Lex->proc_analyse->max_treemem= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 1636:
#line 11964 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            int error;
            (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error);
            if (error != 0)
            {
              my_error(ER_WRONG_PARAMETERS_TO_PROCEDURE, MYF(0), "ANALYSE");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1637:
#line 11976 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1638:
#line 11982 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1640:
#line 11987 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1641:
#line 11992 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1642:
#line 12011 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
#ifndef DBUG_OFF
            sp_head *sp= lex->sphead;
#endif
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str), 1, spv->offset, spv->type);

              if (var == NULL)
                MYSQL_YYABORT;

              ((select_dumpvar *) lex->result)->var_list.push_back(var);

#ifndef DBUG_OFF
              var->sp= sp;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1643:
#line 12050 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1645:
#line 12062 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1646:
#line 12070 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1648:
#line 12073 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1649:
#line 12085 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1650:
#line 12096 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1651:
#line 12102 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1652:
#line 12113 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (5)].num);
            lex->drop_if_exists= (yyvsp[(4) - (5)].num);
            lex->force_drop_table= (yyvsp[(5) - (5)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1653:
#line 12123 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->wait_time= (yyvsp[(8) - (9)].ulong_num);
          }
    break;

  case 1654:
#line 12129 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TABLE;
            lex->drop_temporary= 0;
            lex->drop_if_exists= 0;
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1655:
#line 12138 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1656:
#line 12139 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1657:
#line 12140 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (7)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            lex->wait_time= (yyvsp[(6) - (7)].ulong_num);
          }
    break;

  case 1658:
#line 12156 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1659:
#line 12158 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1660:
#line 12165 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str &&
                (check_and_convert_db_name(&(yyvsp[(4) - (6)].lex_str), FALSE) != IDENT_NAME_OK))
               MYSQL_YYABORT;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1661:
#line 12186 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1662:
#line 12207 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1663:
#line 12219 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1664:
#line 12223 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1665:
#line 12231 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1666:
#line 12233 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1667:
#line 12239 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1668:
#line 12246 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1669:
#line 12251 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1670:
#line 12256 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1673:
#line 12271 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1674:
#line 12282 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1677:
#line 12300 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1678:
#line 12310 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1679:
#line 12311 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1680:
#line 12315 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1681:
#line 12317 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.num)= 1;
            Lex->skip_force_pos= YYLIP->get_tok_start() - YYTHD->query();
          }
    break;

  case 1682:
#line 12324 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1683:
#line 12325 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1691:
#line 12348 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1692:
#line 12356 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (8)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1693:
#line 12361 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1694:
#line 12366 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1695:
#line 12373 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1696:
#line 12378 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1697:
#line 12383 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1698:
#line 12395 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1699:
#line 12397 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "INSERT DELAYED", "INSERT");
        }
    break;

  case 1700:
#line 12409 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1701:
#line 12413 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1702:
#line 12415 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;

          push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                              ER_WARN_DEPRECATED_SYNTAX,
                              ER(ER_WARN_DEPRECATED_SYNTAX),
                              "REPLACE DELAYED", "REPLACE");
        }
    break;

  case 1703:
#line 12430 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1704:
#line 12431 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1705:
#line 12436 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1706:
#line 12444 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1707:
#line 12445 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1708:
#line 12446 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1709:
#line 12448 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1711:
#line 12458 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1712:
#line 12459 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1713:
#line 12463 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1714:
#line 12464 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1715:
#line 12466 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1716:
#line 12467 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1717:
#line 12469 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1718:
#line 12470 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1723:
#line 12485 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1724:
#line 12494 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1725:
#line 12495 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1726:
#line 12499 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1727:
#line 12500 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1728:
#line 12505 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1729:
#line 12510 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1730:
#line 12518 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1732:
#line 12524 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1733:
#line 12529 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1734:
#line 12536 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1735:
#line 12538 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1737:
#line 12547 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1739:
#line 12555 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1740:
#line 12563 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (11)].lock_type));
          }
    break;

  case 1741:
#line 12581 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1744:
#line 12591 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1747:
#line 12604 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1748:
#line 12613 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1749:
#line 12614 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1750:
#line 12618 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ic_reduce_id= 0;}
    break;

  case 1751:
#line 12619 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->ic_reduce_id= (yyvsp[(2) - (2)].ulonglong_number);}
    break;

  case 1752:
#line 12623 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ci_on_success= 0; }
    break;

  case 1753:
#line 12624 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->ci_on_success= 1;}
    break;

  case 1754:
#line 12628 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->rb_on_fail= 0; }
    break;

  case 1755:
#line 12629 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->rb_on_fail= 1;}
    break;

  case 1756:
#line 12633 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->target_affect_row= 0;}
    break;

  case 1757:
#line 12634 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {Lex->target_affect_row= (yyvsp[(2) - (2)].ulonglong_number);}
    break;

  case 1758:
#line 12641 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1760:
#line 12656 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1761:
#line 12667 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1762:
#line 12669 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1763:
#line 12675 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1764:
#line 12680 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1765:
#line 12686 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1768:
#line 12699 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1769:
#line 12712 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1770:
#line 12727 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1771:
#line 12728 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1772:
#line 12732 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1773:
#line 12733 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1774:
#line 12737 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1775:
#line 12738 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1776:
#line 12739 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1777:
#line 12744 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1778:
#line 12755 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
            lex->wait_time= (yyvsp[(5) - (5)].ulong_num);
          }
    break;

  case 1785:
#line 12781 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1786:
#line 12785 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1787:
#line 12789 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1788:
#line 12793 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1789:
#line 12797 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1790:
#line 12801 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1791:
#line 12805 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1792:
#line 12809 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1793:
#line 12813 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1794:
#line 12820 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1795:
#line 12824 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1796:
#line 12833 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            memset(&lex->create_info, 0, sizeof(lex->create_info));
          }
    break;

  case 1797:
#line 12841 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1798:
#line 12848 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1799:
#line 12855 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1800:
#line 12863 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1801:
#line 12871 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1802:
#line 12879 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1803:
#line 12887 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1804:
#line 12895 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1805:
#line 12902 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1806:
#line 12904 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1807:
#line 12906 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1808:
#line 12915 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1809:
#line 12919 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1810:
#line 12923 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1812:
#line 12928 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1814:
#line 12933 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1815:
#line 12942 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1816:
#line 12949 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1817:
#line 12954 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1818:
#line 12956 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1819:
#line 12958 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1820:
#line 12960 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1821:
#line 12962 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILES", "Performance Schema");
            Lex->sql_command = SQLCOM_SHOW_PROFILES;
          }
    break;

  case 1822:
#line 12970 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX,
                                ER(ER_WARN_DEPRECATED_SYNTAX),
                                "SHOW PROFILE", "Performance Schema");
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1823:
#line 12981 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1824:
#line 12989 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1825:
#line 12991 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_SQL_FILTERS;}
    break;

  case 1826:
#line 12993 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1827:
#line 13001 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1828:
#line 13008 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1829:
#line 13015 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            memset(curr_user, 0, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1830:
#line 13025 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1831:
#line 13032 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1832:
#line 13038 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1833:
#line 13047 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1834:
#line 13055 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_sequence= 1;
          }
    break;

  case 1835:
#line 13063 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1836:
#line 13067 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1837:
#line 13071 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1838:
#line 13078 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1839:
#line 13085 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1840:
#line 13091 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1841:
#line 13098 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1842:
#line 13105 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1843:
#line 13110 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1844:
#line 13115 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1845:
#line 13123 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1846:
#line 13125 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1847:
#line 13127 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1852:
#line 13141 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1853:
#line 13142 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1854:
#line 13146 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1855:
#line 13147 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1858:
#line 13156 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1859:
#line 13157 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1860:
#line 13161 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1861:
#line 13162 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1863:
#line 13168 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1864:
#line 13175 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1865:
#line 13185 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1866:
#line 13196 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1867:
#line 13200 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1868:
#line 13202 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->select_lex.options|= SELECT_DESCRIBE; }
    break;

  case 1876:
#line 13220 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1877:
#line 13225 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_EXTENDED;
          }
    break;

  case 1878:
#line 13231 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((Lex->explain_format= new Explain_format_traditional) == NULL)
              MYSQL_YYABORT;
            Lex->describe|= DESCRIBE_PARTITIONS;
          }
    break;

  case 1879:
#line 13237 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
            {
              if ((Lex->explain_format= new Explain_format_JSON) == NULL)
                MYSQL_YYABORT;
              Lex->describe|= DESCRIBE_EXTENDED | DESCRIBE_PARTITIONS;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
            {
              if ((Lex->explain_format= new Explain_format_traditional) == NULL)
                MYSQL_YYABORT;
            }
            else
            {
              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1880:
#line 13258 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1881:
#line 13259 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1882:
#line 13261 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1883:
#line 13275 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1884:
#line 13282 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1885:
#line 13287 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1886:
#line 13296 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1887:
#line 13297 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1889:
#line 13302 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1890:
#line 13304 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1891:
#line 13315 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
          }
    break;

  case 1892:
#line 13323 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_FOR_EXPORT;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1894:
#line 13338 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1895:
#line 13343 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1896:
#line 13345 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1897:
#line 13347 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1898:
#line 13349 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1899:
#line 13351 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1900:
#line 13353 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1901:
#line 13355 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1902:
#line 13357 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1903:
#line 13359 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1904:
#line 13361 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1905:
#line 13363 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1906:
#line 13365 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1907:
#line 13367 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1908:
#line 13371 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1909:
#line 13372 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1910:
#line 13377 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1911:
#line 13382 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1914:
#line 13391 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1915:
#line 13392 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 1916:
#line 13393 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1917:
#line 13394 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1918:
#line 13398 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1919:
#line 13399 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1920:
#line 13404 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1921:
#line 13410 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1923:
#line 13419 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1924:
#line 13423 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1925:
#line 13435 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1926:
#line 13444 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1927:
#line 13445 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1928:
#line 13446 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1929:
#line 13453 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1930:
#line 13464 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1931:
#line 13476 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1932:
#line 13486 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1933:
#line 13496 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1934:
#line 13500 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1935:
#line 13504 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1936:
#line 13505 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1937:
#line 13509 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1938:
#line 13510 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1939:
#line 13514 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1940:
#line 13516 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1941:
#line 13527 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1942:
#line 13531 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1943:
#line 13532 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1944:
#line 13533 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1949:
#line 13548 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1950:
#line 13553 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1951:
#line 13560 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1952:
#line 13565 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1957:
#line 13583 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1958:
#line 13588 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1959:
#line 13595 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 1960:
#line 13597 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1962:
#line 13602 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1963:
#line 13609 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 1964:
#line 13611 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { }
    break;

  case 1965:
#line 13615 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1966:
#line 13616 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1967:
#line 13617 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1968:
#line 13622 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1969:
#line 13624 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1970:
#line 13628 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1971:
#line 13630 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1972:
#line 13638 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1973:
#line 13639 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 1976:
#line 13649 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint length= (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string));
            String *val= new (YYTHD->mem_root) String((yyvsp[(3) - (5)].simple_string),
                                                      length,
                                                      YYTHD->charset());
            if (val == NULL)
              MYSQL_YYABORT;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) ||
                lex->value_list.push_back((yyvsp[(4) - (5)].item)) ||
                lex->load_set_str_list.push_back(val))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->item_name.copy((yyvsp[(3) - (5)].simple_string), length, YYTHD->charset());
          }
    break;

  case 1977:
#line 13669 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            const CHARSET_INFO *cs_con= thd->variables.collation_connection;
            const CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1978:
#line 13693 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1979:
#line 13705 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1980:
#line 13716 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              const CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1981:
#line 13735 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1982:
#line 13743 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1983:
#line 13755 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1984:
#line 13770 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1985:
#line 13790 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1986:
#line 13791 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1987:
#line 13793 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1988:
#line 13801 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1989:
#line 13802 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1990:
#line 13803 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1991:
#line 13805 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= YYLIP;
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            lip->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1992:
#line 13820 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("FALSE"), 0, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1993:
#line 13826 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int(NAME_STRING("TRUE"), 1, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1994:
#line 13832 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1995:
#line 13838 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1996:
#line 13844 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value,
                                                    true, //send error
                                                    true))  //truncate
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1997:
#line 13875 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(null_name_string, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value,
                                                    true, //send error
                                                    true)) //truncate
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1998:
#line 13908 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1999:
#line 13918 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str),
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2000:
#line 13928 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2001:
#line 13934 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2002:
#line 13943 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2003:
#line 13955 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2004:
#line 13961 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2005:
#line 13967 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2006:
#line 13982 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2007:
#line 13983 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2008:
#line 13988 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2009:
#line 13997 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2010:
#line 14012 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2011:
#line 14017 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx = lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            if (pctx && (spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              Lex_input_stream *lip= &thd->m_parser_state->m_lip;
              sp_head *sp= lex->sphead;

              DBUG_ASSERT(sp);

              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              (yyval.item)=
                create_item_for_sp_var(
                  thd, (yyvsp[(1) - (1)].lex_str), spv,
                  sp->m_parser_data.get_current_stmt_start_ptr(),
                  lip->get_tok_start_prev(),
                  lip->get_tok_end());

              if ((yyval.item) == NULL)
                MYSQL_YYABORT;

              lex->safe_to_cache_query= false;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2012:
#line 14067 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2013:
#line 14072 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2014:
#line 14089 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2015:
#line 14094 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (sp->m_trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (sp->m_trg_chistics.event == TRG_EVENT_INSERT ||
                           sp->m_trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && sp->m_trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->sphead->m_cur_instr_trig_field_items.link_in_list(
                trg_fld, &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "nextval"))
            {
              TABLE_LIST *table;
              SELECT_LEX *sel= lex->current_select;
              if (!(table= sel->add_table_to_list(thd, new Table_ident((yyvsp[(1) - (3)].lex_str)), NULL,
                                                  TL_OPTION_SEQUENCE,
                                                  TL_READ,
                                                  MDL_SHARED_READ,
                                                  NULL, NULL, NULL, true)))
                MYSQL_YYABORT;
              if (!((yyval.item)= new (thd->mem_root) Item_func_nextval(thd, table)))
                MYSQL_YYABORT;
            }
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "currval"))
            {
              TABLE_LIST *table;
              SELECT_LEX *sel= lex->current_select;
              if (!(table= sel->add_table_to_list(thd, new Table_ident((yyvsp[(1) - (3)].lex_str)), NULL,
                                                  TL_OPTION_SEQUENCE,
                                                  TL_READ,
                                                  MDL_SHARED_READ,
                                                  NULL, NULL, NULL, true)))
                MYSQL_YYABORT;
              if (!((yyval.item)= new (thd->mem_root) Item_func_currval(thd, table)))
                MYSQL_YYABORT;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2016:
#line 14200 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2017:
#line 14225 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2018:
#line 14255 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2019:
#line 14257 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2020:
#line 14273 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2021:
#line 14282 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2022:
#line 14287 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2023:
#line 14293 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2024:
#line 14299 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2025:
#line 14309 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2026:
#line 14315 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2027:
#line 14324 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2028:
#line 14333 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2029:
#line 14335 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              const CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2030:
#line 14365 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!strcont((yyvsp[(1) - (1)].lex_str).str, "\n"))
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 2031:
#line 14378 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2032:
#line 14394 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2033:
#line 14410 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2034:
#line 14426 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2035:
#line 14428 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2036:
#line 14438 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2037:
#line 14440 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2038:
#line 14450 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2039:
#line 14451 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2040:
#line 14452 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2041:
#line 14457 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2042:
#line 14484 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= (yyvsp[(1) - (3)].lex_str);
            (yyval.lex_user)->host= (yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
            (yyval.lex_user)->uses_identified_by_clause= false;
            (yyval.lex_user)->uses_identified_with_clause= false;
            (yyval.lex_user)->uses_identified_by_password_clause= false;
            (yyval.lex_user)->uses_authentication_string_clause= false;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            /*
              Trim whitespace as the values will go to a CHAR field
              when stored.
            */
            trim_whitespace(system_charset_info, &(yyval.lex_user)->user);
            trim_whitespace(system_charset_info, &(yyval.lex_user)->host);
          }
    break;

  case 2043:
#line 14517 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            memset((yyval.lex_user), 0, sizeof(LEX_USER));
          }
    break;

  case 2044:
#line 14531 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2045:
#line 14532 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2046:
#line 14533 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2047:
#line 14534 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2048:
#line 14535 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2049:
#line 14536 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2050:
#line 14537 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2051:
#line 14538 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2052:
#line 14539 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2053:
#line 14540 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2054:
#line 14541 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2055:
#line 14542 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2056:
#line 14543 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2057:
#line 14544 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2058:
#line 14545 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2059:
#line 14546 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2060:
#line 14547 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2061:
#line 14548 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2062:
#line 14549 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2063:
#line 14550 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2064:
#line 14551 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2065:
#line 14552 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2066:
#line 14553 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2067:
#line 14554 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2068:
#line 14555 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2069:
#line 14556 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2070:
#line 14557 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2071:
#line 14558 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2072:
#line 14559 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2073:
#line 14560 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2074:
#line 14561 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2075:
#line 14562 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2076:
#line 14563 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2077:
#line 14564 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2078:
#line 14565 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2079:
#line 14566 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2080:
#line 14567 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2081:
#line 14568 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2082:
#line 14569 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2083:
#line 14570 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2084:
#line 14571 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2085:
#line 14572 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2086:
#line 14573 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2087:
#line 14574 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2088:
#line 14575 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2089:
#line 14576 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2090:
#line 14577 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2091:
#line 14578 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2092:
#line 14579 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2093:
#line 14580 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2094:
#line 14581 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2095:
#line 14582 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2096:
#line 14592 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2097:
#line 14593 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2098:
#line 14594 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2099:
#line 14595 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2100:
#line 14596 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2101:
#line 14597 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2102:
#line 14598 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2103:
#line 14599 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2104:
#line 14600 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2105:
#line 14601 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2106:
#line 14602 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2107:
#line 14603 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2108:
#line 14604 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2109:
#line 14605 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2110:
#line 14606 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2111:
#line 14607 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2112:
#line 14608 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2113:
#line 14609 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2114:
#line 14610 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2115:
#line 14611 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2116:
#line 14612 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2117:
#line 14613 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2118:
#line 14614 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2119:
#line 14615 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2120:
#line 14616 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2121:
#line 14617 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2122:
#line 14618 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2123:
#line 14619 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2124:
#line 14620 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2125:
#line 14621 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2126:
#line 14622 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2127:
#line 14623 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2128:
#line 14624 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2129:
#line 14625 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2130:
#line 14626 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2131:
#line 14627 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2132:
#line 14628 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2133:
#line 14629 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2134:
#line 14630 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2135:
#line 14631 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2136:
#line 14632 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2137:
#line 14633 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2138:
#line 14634 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2139:
#line 14635 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2140:
#line 14636 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2141:
#line 14637 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2142:
#line 14642 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2143:
#line 14643 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2144:
#line 14644 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2145:
#line 14645 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2146:
#line 14646 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2147:
#line 14647 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2148:
#line 14648 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2149:
#line 14649 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2150:
#line 14650 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2151:
#line 14651 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2152:
#line 14652 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2153:
#line 14653 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2154:
#line 14654 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2155:
#line 14655 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2156:
#line 14656 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2157:
#line 14657 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2158:
#line 14658 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2159:
#line 14659 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2160:
#line 14660 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2161:
#line 14661 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2162:
#line 14662 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2163:
#line 14663 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2164:
#line 14664 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2165:
#line 14665 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2166:
#line 14666 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2167:
#line 14667 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2168:
#line 14668 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2169:
#line 14669 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2170:
#line 14670 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2171:
#line 14671 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2172:
#line 14672 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2173:
#line 14673 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2174:
#line 14674 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2175:
#line 14675 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2176:
#line 14676 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2177:
#line 14677 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2178:
#line 14678 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2179:
#line 14679 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2180:
#line 14680 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2181:
#line 14681 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2182:
#line 14682 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2183:
#line 14683 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2184:
#line 14684 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2185:
#line 14685 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2186:
#line 14686 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2187:
#line 14687 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2188:
#line 14688 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2189:
#line 14689 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2190:
#line 14690 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2191:
#line 14691 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2192:
#line 14692 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2193:
#line 14693 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2194:
#line 14694 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2195:
#line 14695 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2196:
#line 14696 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2197:
#line 14697 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2198:
#line 14698 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2199:
#line 14699 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2200:
#line 14700 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2201:
#line 14701 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2202:
#line 14702 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2203:
#line 14703 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2204:
#line 14704 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2205:
#line 14705 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2206:
#line 14706 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2207:
#line 14707 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2208:
#line 14708 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2209:
#line 14709 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2210:
#line 14710 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2211:
#line 14711 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2212:
#line 14712 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2213:
#line 14713 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2214:
#line 14714 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2215:
#line 14715 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2216:
#line 14716 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2217:
#line 14717 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2218:
#line 14718 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2219:
#line 14719 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2220:
#line 14720 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2221:
#line 14721 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2222:
#line 14722 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2223:
#line 14723 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2224:
#line 14724 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2225:
#line 14725 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2226:
#line 14726 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2227:
#line 14727 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2228:
#line 14728 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2229:
#line 14729 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2230:
#line 14730 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2231:
#line 14731 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2232:
#line 14732 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2233:
#line 14733 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2234:
#line 14734 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2235:
#line 14735 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2236:
#line 14736 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2237:
#line 14737 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2238:
#line 14738 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2239:
#line 14739 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2240:
#line 14740 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2241:
#line 14741 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2242:
#line 14742 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2243:
#line 14743 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2244:
#line 14744 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2245:
#line 14745 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2246:
#line 14746 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2247:
#line 14747 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2248:
#line 14748 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2249:
#line 14749 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2250:
#line 14750 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2251:
#line 14751 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2252:
#line 14752 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2253:
#line 14753 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2254:
#line 14754 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2255:
#line 14755 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2256:
#line 14756 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2257:
#line 14757 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2258:
#line 14758 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2259:
#line 14759 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2260:
#line 14760 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2261:
#line 14761 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2262:
#line 14762 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2263:
#line 14763 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2264:
#line 14764 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2265:
#line 14765 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2266:
#line 14766 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2267:
#line 14767 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2268:
#line 14768 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2269:
#line 14769 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2270:
#line 14770 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2271:
#line 14771 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2272:
#line 14772 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2273:
#line 14773 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2274:
#line 14774 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2275:
#line 14775 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2276:
#line 14776 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2277:
#line 14777 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2278:
#line 14778 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2279:
#line 14779 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2280:
#line 14780 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2281:
#line 14781 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2282:
#line 14782 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2283:
#line 14783 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2284:
#line 14784 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2285:
#line 14785 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2286:
#line 14786 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2287:
#line 14787 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2288:
#line 14788 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2289:
#line 14789 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2290:
#line 14790 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2291:
#line 14791 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2292:
#line 14792 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2293:
#line 14793 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2294:
#line 14794 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2295:
#line 14795 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2296:
#line 14796 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2297:
#line 14797 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2298:
#line 14798 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2299:
#line 14799 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2300:
#line 14800 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2301:
#line 14801 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2302:
#line 14802 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2303:
#line 14803 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2304:
#line 14804 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2305:
#line 14805 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2306:
#line 14806 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2307:
#line 14807 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2308:
#line 14808 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2309:
#line 14809 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2310:
#line 14810 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2311:
#line 14811 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2312:
#line 14812 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2313:
#line 14813 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2314:
#line 14814 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2315:
#line 14815 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2316:
#line 14816 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2317:
#line 14817 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2318:
#line 14818 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2319:
#line 14819 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2320:
#line 14820 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2321:
#line 14821 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2322:
#line 14822 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2323:
#line 14823 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2324:
#line 14824 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2325:
#line 14825 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2326:
#line 14826 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2327:
#line 14827 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2328:
#line 14828 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2329:
#line 14829 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2330:
#line 14830 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2331:
#line 14831 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2332:
#line 14832 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2333:
#line 14833 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2334:
#line 14834 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2335:
#line 14835 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2336:
#line 14836 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2337:
#line 14837 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2338:
#line 14838 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2339:
#line 14839 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2340:
#line 14840 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2341:
#line 14841 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2342:
#line 14842 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2343:
#line 14843 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2344:
#line 14844 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2345:
#line 14845 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2346:
#line 14846 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2347:
#line 14847 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2348:
#line 14848 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2349:
#line 14849 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2350:
#line 14850 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2351:
#line 14851 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2352:
#line 14852 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2353:
#line 14853 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2354:
#line 14854 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2355:
#line 14855 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2356:
#line 14856 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2357:
#line 14857 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2358:
#line 14858 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2359:
#line 14859 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2360:
#line 14860 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2361:
#line 14861 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2362:
#line 14862 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2363:
#line 14863 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2364:
#line 14864 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2365:
#line 14865 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2366:
#line 14866 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2367:
#line 14867 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2368:
#line 14868 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2369:
#line 14869 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2370:
#line 14870 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2371:
#line 14871 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2372:
#line 14872 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2373:
#line 14873 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2374:
#line 14874 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2375:
#line 14875 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2376:
#line 14876 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2377:
#line 14877 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2378:
#line 14878 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2379:
#line 14879 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2380:
#line 14880 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2381:
#line 14881 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2382:
#line 14882 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2383:
#line 14883 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2384:
#line 14884 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2385:
#line 14885 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2386:
#line 14886 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2387:
#line 14887 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2388:
#line 14888 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2389:
#line 14889 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2390:
#line 14890 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2391:
#line 14891 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2392:
#line 14892 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2393:
#line 14893 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2394:
#line 14894 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2395:
#line 14895 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2396:
#line 14896 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2397:
#line 14897 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2398:
#line 14898 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2399:
#line 14899 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2400:
#line 14900 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2401:
#line 14901 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2402:
#line 14902 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2403:
#line 14903 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2404:
#line 14904 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2405:
#line 14905 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2406:
#line 14906 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2407:
#line 14907 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2408:
#line 14908 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2409:
#line 14909 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2410:
#line 14910 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2411:
#line 14911 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2412:
#line 14912 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2413:
#line 14924 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->option_type= OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;

            sp_create_assignment_lex(YYTHD, YY_TOKEN_END);
          }
    break;

  case 2414:
#line 14936 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2415:
#line 14943 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2417:
#line 14949 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2418:
#line 14953 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT;
          }
    break;

  case 2419:
#line 14958 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_SET_EXECUTED_GTID_SET;
            lex->add_executed_gtid_set_string= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2420:
#line 14965 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2422:
#line 14975 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2424:
#line 14981 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2427:
#line 14995 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2428:
#line 14999 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2429:
#line 15004 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, YY_TOKEN_START);
          }
    break;

  case 2430:
#line 15008 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, YY_TOKEN_END))
              MYSQL_YYABORT; 
          }
    break;

  case 2431:
#line 15017 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2434:
#line 15025 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2435:
#line 15026 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2436:
#line 15027 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2437:
#line 15031 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2438:
#line 15032 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2439:
#line 15033 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2440:
#line 15034 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2441:
#line 15038 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2442:
#line 15039 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2443:
#line 15040 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2444:
#line 15041 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2445:
#line 15047 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2446:
#line 15072 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;

            if (sp)
              sp->m_parser_data.push_expr_start_ptr(YY_TOKEN_START);
          }
    break;

  case 2447:
#line 15079 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            const char *expr_start_ptr= NULL;

            if (sp)
              expr_start_ptr= sp->m_parser_data.pop_expr_start_ptr();

            if ((yyvsp[(1) - (4)].variable).var == trg_new_row_fake_var)
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We are parsing trigger and this is a trigger NEW-field. */

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET NEW.x = DEFAULT
                // DEFAULT clause is not supported in triggers.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              if (set_trigger_new_row(thd, (yyvsp[(1) - (4)].variable).base_name, (yyvsp[(4) - (4)].item), expr_query))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (4)].variable).var)
            {
              /* We're not parsing SP and this is a system variable. */

              if (set_system_variable(thd, &(yyvsp[(1) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              DBUG_ASSERT(sp);
              DBUG_ASSERT(expr_start_ptr);

              /* We're parsing SP and this is an SP-variable. */

              sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
              sp_variable *spv= pctx->find_variable((yyvsp[(1) - (4)].variable).base_name, false);

              LEX_STRING expr_query= EMPTY_STR;

              if (!(yyvsp[(4) - (4)].item))
              {
                // This is: SET x = DEFAULT, where x is a SP-variable.
                // This is not supported.

                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              else if (lex->is_metadata_used())
              {
                expr_query= make_string(thd, expr_start_ptr, YY_TOKEN_END);

                if (!expr_query.str)
                  MYSQL_YYABORT;
              }

              /*
                NOTE: every SET-expression has its own LEX-object, even if it is
                a multiple SET-statement, like:

                  SET spv1 = expr1, spv2 = expr2, ...

                Every SET-expression has its own sp_instr_set. Thus, the
                instruction owns the LEX-object, i.e. the instruction is
                responsible for destruction of the LEX-object.
              */

              sp_instr_set *i=
                new sp_instr_set(sp->instructions(), lex,
                                 spv->offset, (yyvsp[(4) - (4)].item), expr_query,
                                 true); // The instruction owns its lex.

              if (!i || sp->add_instr(thd, i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2448:
#line 15172 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item), false);
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2449:
#line 15183 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2450:
#line 15196 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            int flags= (yyvsp[(2) - (2)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT;
            const CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(flags,
                                              cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2451:
#line 15212 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING names= { C_STRING_WITH_LEN("names") };

            if (pctx && pctx->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2452:
#line 15225 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            const CHARSET_INFO *cs2;
            const CHARSET_INFO *cs3;
            int flags= set_var_collation_client::SET_CS_NAMES
                       | ((yyvsp[(2) - (3)].charset) ? 0 : set_var_collation_client::SET_CS_DEFAULT)
                       | ((yyvsp[(3) - (3)].charset) ? set_var_collation_client::SET_CS_COLLATE : 0);
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(flags, cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2453:
#line 15247 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (pctx && pctx->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }

            LEX_USER *user= (LEX_USER*) thd->alloc(sizeof(LEX_USER));

            if (!user)
              MYSQL_YYABORT;

            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);

            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;

            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            lex->is_change_password= TRUE;

            if (sp)
              sp->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2454:
#line 15282 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX_USER *user= (yyvsp[(3) - (5)].lex_user);
            LEX *lex= Lex;
            set_var_password *var;

            var= new set_var_password(user,(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
            lex->autocommit= TRUE;
            lex->is_set_password_sql= true;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
            /*
              'is_change_password' should be set if the user is setting his
              own password. This is later used to determine if the password
              expiration flag should be reset.
              Either the user exactly matches the currently authroized user or
              the CURRENT_USER keyword was used.

              If CURRENT_USER was used for the <user> rule then
              user->user.str=0. See rule below:
              
              user:
                 [..]
              | CURRENT_USER optional_braces
                {
                 [..]
                  memset($$, 0, sizeof(LEX_USER));
                }
            */
            if (user->user.str ||
                match_authorized_user(&current_thd->main_security_ctx,
                                      user))
              lex->is_change_password= TRUE;
            else
              lex->is_change_password= FALSE;
          }
    break;

  case 2455:
#line 15324 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!pctx || !(spv= pctx->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2456:
#line 15352 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }

            if (sp && sp->m_type == SP_TYPE_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (sp->m_trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2457:
#line 15398 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2462:
#line 15419 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2463:
#line 15437 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2464:
#line 15454 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2465:
#line 15455 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2466:
#line 15459 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2467:
#line 15460 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2468:
#line 15461 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2469:
#line 15462 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2470:
#line 15466 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2471:
#line 15468 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2472:
#line 15486 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
		    WARN_DEPRECATED(YYTHD, "OLD_PASSWORD", "PASSWORD");
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2473:
#line 15499 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2474:
#line 15500 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2475:
#line 15502 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2476:
#line 15508 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2477:
#line 15514 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2478:
#line 15525 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2479:
#line 15536 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->wait_time= (yyvsp[(5) - (5)].ulong_num);
          }
    break;

  case 2480:
#line 15544 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= ULONG_MAX;
        }
    break;

  case 2481:
#line 15548 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= ULONG_MAX;
        }
    break;

  case 2482:
#line 15552 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          ulong wait_time= (yyvsp[(2) - (2)].ulong_num);

          if (wait_time > LONG_TIMEOUT)
          {
            char buf[22];
            sprintf(buf, "%ld", wait_time);
            my_error(ER_WRONG_VALUE_FOR_VAR, MYF(0), "wait_time", buf);
            MYSQL_YYABORT;
          }

          (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num);
        }
    break;

  case 2483:
#line 15566 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (ulong)0;
        }
    break;

  case 2488:
#line 15583 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2489:
#line 15595 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2490:
#line 15596 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2491:
#line 15598 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            (yyval.num)= TL_WRITE_LOW_PRIORITY; 
            WARN_DEPRECATED(YYTHD, "LOW_PRIORITY WRITE", "WRITE");
          }
    break;

  case 2492:
#line 15602 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2493:
#line 15607 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2494:
#line 15618 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2495:
#line 15627 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_open();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2496:
#line 15643 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_close();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2497:
#line 15659 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2498:
#line 15677 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_handler_read((yyvsp[(5) - (7)].ha_read_mode),
                                  lex->ident.str, lex->insert_list,
                                  thd->m_parser_state->m_yacc.m_ha_rkey_mode);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2499:
#line 15697 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; (yyval.ha_read_mode)=(yyvsp[(1) - (1)].ha_read_mode); }
    break;

  case 2500:
#line 15698 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); (yyval.ha_read_mode)=(yyvsp[(2) - (2)].ha_read_mode); }
    break;

  case 2501:
#line 15702 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2502:
#line 15703 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2503:
#line 15707 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RFIRST; }
    break;

  case 2504:
#line 15708 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RNEXT;  }
    break;

  case 2505:
#line 15709 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RPREV;  }
    break;

  case 2506:
#line 15710 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_read_mode)= RLAST;  }
    break;

  case 2507:
#line 15712 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_ha_rkey_mode= (yyvsp[(1) - (1)].ha_rkey_mode);
            Lex->insert_list= new List_item;
            if (! Lex->insert_list)
              MYSQL_YYABORT;
          }
    break;

  case 2508:
#line 15719 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.ha_read_mode)= RKEY;
          }
    break;

  case 2509:
#line 15725 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2510:
#line 15726 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2511:
#line 15727 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2512:
#line 15728 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2513:
#line 15729 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2514:
#line 15735 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_REVOKE; }
    break;

  case 2515:
#line 15736 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2516:
#line 15741 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2517:
#line 15746 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2518:
#line 15756 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2519:
#line 15766 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2520:
#line 15770 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2521:
#line 15778 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_GRANT; }
    break;

  case 2522:
#line 15779 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2523:
#line 15785 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->type= 0;
          }
    break;

  case 2524:
#line 15791 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2525:
#line 15802 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2526:
#line 15812 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2529:
#line 15826 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->grant == GLOBAL_ACLS &&
                lex->sql_command == SQLCOM_REVOKE)
              lex->sql_command= SQLCOM_REVOKE_ALL;
          }
    break;

  case 2530:
#line 15833 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2535:
#line 15851 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2536:
#line 15852 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2537:
#line 15854 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2538:
#line 15855 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2539:
#line 15857 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2540:
#line 15858 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2541:
#line 15860 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2542:
#line 15861 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2543:
#line 15862 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2544:
#line 15863 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2545:
#line 15864 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2546:
#line 15865 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2547:
#line 15866 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2548:
#line 15867 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2549:
#line 15868 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2550:
#line 15869 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2551:
#line 15870 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2552:
#line 15871 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2553:
#line 15872 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2554:
#line 15873 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2555:
#line 15874 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2556:
#line 15875 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2557:
#line 15876 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2558:
#line 15877 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2559:
#line 15878 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2560:
#line 15879 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2561:
#line 15880 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2562:
#line 15881 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2563:
#line 15882 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2564:
#line 15883 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2565:
#line 15884 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2566:
#line 15885 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2567:
#line 15886 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2568:
#line 15887 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2569:
#line 15891 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2570:
#line 15892 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2573:
#line 15902 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2574:
#line 15912 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2575:
#line 15922 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2576:
#line 15935 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2577:
#line 15950 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2578:
#line 15963 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2579:
#line 15976 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2580:
#line 15988 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2581:
#line 15993 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2582:
#line 16001 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2583:
#line 16006 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2584:
#line 16014 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            String *password = new (YYTHD->mem_root) String((const char*)(yyvsp[(4) - (4)].lex_str).str,
                                    YYTHD->variables.character_set_client);
            check_password_policy(password);
            /*
              1. Plugin must be resolved
              2. Password must be digested
            */
            (yyvsp[(1) - (4)].lex_user)->uses_identified_by_clause= true;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2585:
#line 16032 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
            if (!strcmp((yyvsp[(5) - (5)].lex_str).str, ""))
            {
              String *password= new (YYTHD->mem_root) String ((const char *)"",
                                     YYTHD->variables.character_set_client);
              check_password_policy(password);
            }
            /*
              1. Plugin must be resolved
            */
            (yyvsp[(1) - (5)].lex_user)->uses_identified_by_password_clause= true;
          }
    break;

  case 2586:
#line 16052 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
            (yyvsp[(1) - (4)].lex_user)->uses_identified_with_clause= true;
          }
    break;

  case 2587:
#line 16064 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->uses_identified_with_clause= true;
            (yyvsp[(1) - (6)].lex_user)->uses_authentication_string_clause= true;
          }
    break;

  case 2588:
#line 16077 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
            (yyvsp[(1) - (1)].lex_user)->password= null_lex_str;
          }
    break;

  case 2589:
#line 16085 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2593:
#line 16099 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2595:
#line 16128 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2596:
#line 16132 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2597:
#line 16136 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2598:
#line 16140 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2599:
#line 16146 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2601:
#line 16151 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2602:
#line 16152 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2603:
#line 16156 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2604:
#line 16157 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2605:
#line 16161 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2606:
#line 16163 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2607:
#line 16169 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2608:
#line 16175 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2609:
#line 16181 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2610:
#line 16190 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2611:
#line 16195 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2612:
#line 16199 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2613:
#line 16200 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2614:
#line 16205 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2615:
#line 16206 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2616:
#line 16207 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2617:
#line 16212 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2618:
#line 16213 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2619:
#line 16214 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2620:
#line 16218 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2621:
#line 16219 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2622:
#line 16224 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2623:
#line 16236 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2624:
#line 16246 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2625:
#line 16255 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2626:
#line 16264 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2627:
#line 16277 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2629:
#line 16283 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2630:
#line 16288 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2631:
#line 16298 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2632:
#line 16299 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2633:
#line 16300 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2634:
#line 16304 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2635:
#line 16305 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2636:
#line 16309 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2637:
#line 16325 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2640:
#line 16338 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2641:
#line 16339 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2642:
#line 16340 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2643:
#line 16345 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2644:
#line 16349 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2646:
#line 16358 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2647:
#line 16364 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2648:
#line 16373 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2649:
#line 16379 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2650:
#line 16400 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->outer_select();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 2655:
#line 16435 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2656:
#line 16437 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2657:
#line 16444 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2658:
#line 16445 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2659:
#line 16446 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2660:
#line 16448 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2661:
#line 16454 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2662:
#line 16459 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2663:
#line 16470 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2664:
#line 16472 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2665:
#line 16474 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2679:
#line 16507 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2680:
#line 16521 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2681:
#line 16534 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2682:
#line 16536 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2683:
#line 16538 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2684:
#line 16543 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2685:
#line 16548 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2686:
#line 16550 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2687:
#line 16552 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2688:
#line 16557 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2689:
#line 16559 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2690:
#line 16561 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2691:
#line 16566 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2693:
#line 16583 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2695:
#line 16589 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2696:
#line 16594 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2697:
#line 16601 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2698:
#line 16610 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2699:
#line 16627 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (Lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              For statment as "CREATE VIEW v1 AS SELECT1 UNION SELECT2",
              parsing of Select query (SELECT1) is completed and UNION_CLAUSE
              is not yet parsed. So check for
              Lex->current_select->master_unit()->first_select()->braces
              (as its done in "select_init2" for "select_part2" rule) is not
              done here.
            */
          }
    break;

  case 2702:
#line 16648 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2704:
#line 16657 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 2705:
#line 16661 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 2706:
#line 16668 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2707:
#line 16670 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2708:
#line 16672 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2709:
#line 16674 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2710:
#line 16691 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {                 /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2711:
#line 16697 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {                 /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2712:
#line 16702 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {                 /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_TRIGGER, (yyvsp[(3) - (14)].spname));

            if (!sp)
              MYSQL_YYABORT;

            sp->m_trg_chistics.action_time= (enum trg_action_time_type) (yyvsp[(4) - (14)].num);
            sp->m_trg_chistics.event= (enum trg_event_type) (yyvsp[(5) - (14)].num);
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
            sp->m_chistics= &lex->sp_chistics;
            sp->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2713:
#line 16732 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* $17 */
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_TRIGGER;

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2714:
#line 16767 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2715:
#line 16785 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2716:
#line 16808 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_FUNCTION, lex->spname);

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;

            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            sp->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2717:
#line 16840 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());
          }
    break;

  case 2718:
#line 16845 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2719:
#line 16853 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (fill_field_definition(YYTHD, sp,
                                      (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                      &sp->m_return_field_def))
              MYSQL_YYABORT;

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2720:
#line 16876 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2721:
#line 16884 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;

            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }

            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
          }
    break;

  case 2722:
#line 16942 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            sp_head *sp= sp_start_parsing(thd, SP_TYPE_PROCEDURE, (yyvsp[(3) - (3)].spname));

            if (!sp)
              MYSQL_YYABORT;

            lex->sphead= sp;
          }
    break;

  case 2723:
#line 16962 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            /*
              NOTE: the start of the parameters in the query string is
              YYLIP->get_cpp_tok_start() + 1. 1 is the length of '(', which the
              tokenizer has just passed (just YYLIP->get_cpp_tok_start() points
              to the '(').
            */

            Lex->sphead->m_parser_data.set_parameter_start_ptr(
              YYLIP->get_cpp_tok_start() + 1);
          }
    break;

  case 2724:
#line 16975 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            Lex->sphead->m_parser_data.set_parameter_end_ptr(
              YYLIP->get_cpp_tok_start());

            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
          }
    break;

  case 2725:
#line 16985 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2726:
#line 16993 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            sp_finish_parsing(thd);

            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
          }
    break;

  case 2727:
#line 17007 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2728:
#line 17011 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2729:
#line 17015 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2730:
#line 17019 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2731:
#line 17023 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2732:
#line 17027 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2733:
#line 17034 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2734:
#line 17041 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2735:
#line 17048 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2736:
#line 17057 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2737:
#line 17058 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2738:
#line 17062 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2739:
#line 17063 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2740:
#line 17064 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2741:
#line 17068 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2742:
#line 17069 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2743:
#line 17074 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2744:
#line 17076 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2746:
#line 17081 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {}
    break;

  case 2747:
#line 17082 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2748:
#line 17087 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2749:
#line 17097 "/Users/wangyang/CLionProjects/AliSQL/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;


/* Line 1267 of yacc.c.  */
#line 38851 "/Users/wangyang/CLionProjects/AliSQL/cmake-build-debug/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YYTHD, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (YYTHD, yymsg);
	  }
	else
	  {
	    yyerror (YYTHD, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, YYTHD);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, YYTHD);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YYTHD, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, YYTHD);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, YYTHD);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



